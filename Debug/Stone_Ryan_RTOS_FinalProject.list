
Stone_Ryan_RTOS_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001020c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001590  080103c0  080103c0  000113c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011950  08011950  00013284  2**0
                  CONTENTS
  4 .ARM          00000008  08011950  08011950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011958  08011958  00013284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011958  08011958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801195c  0801195c  0001295c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  20000000  08011960  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013284  2**0
                  CONTENTS
 10 .bss          0002b0ec  20000288  20000288  00013288  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2002b374  2002b374  00013288  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013284  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028b36  00000000  00000000  000132b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065ad  00000000  00000000  0003bdea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020d8  00000000  00000000  00042398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b9c  00000000  00000000  00044470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bd1c  00000000  00000000  0004600c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d55f  00000000  00000000  00071d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc59e  00000000  00000000  0008f287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      0000005a  00000000  00000000  0018b825  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008554  00000000  00000000  0018b880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000167  00000000  00000000  00193dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 00004e58  00000000  00000000  00193f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001b2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001b6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000240 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ba:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001be:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001c2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001c4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001c6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001c8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ca:	d332      	bcc.n	8000232 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001cc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ce:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001d0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001d2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001d4:	d314      	bcc.n	8000200 <_CheckCase2>

080001d6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001d6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001d8:	19d0      	adds	r0, r2, r7
 80001da:	bf00      	nop

080001dc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001e0:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001e4:	3a01      	subs	r2, #1
        BEQ      _CSDone
 80001e6:	d005      	beq.n	80001f4 <_CSDone>
        LDRB     R3,[R1], #+1
 80001e8:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ec:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001f0:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 80001f2:	d1f3      	bne.n	80001dc <_LoopCopyStraight>

080001f4 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80001f4:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 80001f8:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 80001fa:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001fc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001fe:	4770      	bx	lr

08000200 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000200:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000202:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000204:	d319      	bcc.n	800023a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000206:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000208:	1b12      	subs	r2, r2, r4

0800020a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800020a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800020e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000212:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000214:	d1f9      	bne.n	800020a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000216:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000218:	d005      	beq.n	8000226 <_No2ChunkNeeded>

0800021a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800021a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000222:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000224:	d1f9      	bne.n	800021a <_LoopCopyAfterWrapAround>

08000226 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000226:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800022a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800022c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000230:	4770      	bx	lr

08000232 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000232:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000234:	3801      	subs	r0, #1
        CMP      R0,R2
 8000236:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000238:	d2cd      	bcs.n	80001d6 <_Case4>

0800023a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800023a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800023e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000240:	2002a7b0 	.word	0x2002a7b0

08000244 <__aeabi_drsub>:
 8000244:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000248:	e002      	b.n	8000250 <__adddf3>
 800024a:	bf00      	nop

0800024c <__aeabi_dsub>:
 800024c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000250 <__adddf3>:
 8000250:	b530      	push	{r4, r5, lr}
 8000252:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000256:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025a:	ea94 0f05 	teq	r4, r5
 800025e:	bf08      	it	eq
 8000260:	ea90 0f02 	teqeq	r0, r2
 8000264:	bf1f      	itttt	ne
 8000266:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000276:	f000 80e2 	beq.w	800043e <__adddf3+0x1ee>
 800027a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000282:	bfb8      	it	lt
 8000284:	426d      	neglt	r5, r5
 8000286:	dd0c      	ble.n	80002a2 <__adddf3+0x52>
 8000288:	442c      	add	r4, r5
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	ea82 0000 	eor.w	r0, r2, r0
 8000296:	ea83 0101 	eor.w	r1, r3, r1
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	2d36      	cmp	r5, #54	@ 0x36
 80002a4:	bf88      	it	hi
 80002a6:	bd30      	pophi	{r4, r5, pc}
 80002a8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x70>
 80002ba:	4240      	negs	r0, r0
 80002bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002cc:	d002      	beq.n	80002d4 <__adddf3+0x84>
 80002ce:	4252      	negs	r2, r2
 80002d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d4:	ea94 0f05 	teq	r4, r5
 80002d8:	f000 80a7 	beq.w	800042a <__adddf3+0x1da>
 80002dc:	f1a4 0401 	sub.w	r4, r4, #1
 80002e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e4:	db0d      	blt.n	8000302 <__adddf3+0xb2>
 80002e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ea:	fa22 f205 	lsr.w	r2, r2, r5
 80002ee:	1880      	adds	r0, r0, r2
 80002f0:	f141 0100 	adc.w	r1, r1, #0
 80002f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f8:	1880      	adds	r0, r0, r2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	4159      	adcs	r1, r3
 8000300:	e00e      	b.n	8000320 <__adddf3+0xd0>
 8000302:	f1a5 0520 	sub.w	r5, r5, #32
 8000306:	f10e 0e20 	add.w	lr, lr, #32
 800030a:	2a01      	cmp	r2, #1
 800030c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000310:	bf28      	it	cs
 8000312:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000316:	fa43 f305 	asr.w	r3, r3, r5
 800031a:	18c0      	adds	r0, r0, r3
 800031c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000320:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000324:	d507      	bpl.n	8000336 <__adddf3+0xe6>
 8000326:	f04f 0e00 	mov.w	lr, #0
 800032a:	f1dc 0c00 	rsbs	ip, ip, #0
 800032e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000332:	eb6e 0101 	sbc.w	r1, lr, r1
 8000336:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800033a:	d31b      	bcc.n	8000374 <__adddf3+0x124>
 800033c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000340:	d30c      	bcc.n	800035c <__adddf3+0x10c>
 8000342:	0849      	lsrs	r1, r1, #1
 8000344:	ea5f 0030 	movs.w	r0, r0, rrx
 8000348:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800034c:	f104 0401 	add.w	r4, r4, #1
 8000350:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000354:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000358:	f080 809a 	bcs.w	8000490 <__adddf3+0x240>
 800035c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000360:	bf08      	it	eq
 8000362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000366:	f150 0000 	adcs.w	r0, r0, #0
 800036a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036e:	ea41 0105 	orr.w	r1, r1, r5
 8000372:	bd30      	pop	{r4, r5, pc}
 8000374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000378:	4140      	adcs	r0, r0
 800037a:	eb41 0101 	adc.w	r1, r1, r1
 800037e:	3c01      	subs	r4, #1
 8000380:	bf28      	it	cs
 8000382:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000386:	d2e9      	bcs.n	800035c <__adddf3+0x10c>
 8000388:	f091 0f00 	teq	r1, #0
 800038c:	bf04      	itt	eq
 800038e:	4601      	moveq	r1, r0
 8000390:	2000      	moveq	r0, #0
 8000392:	fab1 f381 	clz	r3, r1
 8000396:	bf08      	it	eq
 8000398:	3320      	addeq	r3, #32
 800039a:	f1a3 030b 	sub.w	r3, r3, #11
 800039e:	f1b3 0220 	subs.w	r2, r3, #32
 80003a2:	da0c      	bge.n	80003be <__adddf3+0x16e>
 80003a4:	320c      	adds	r2, #12
 80003a6:	dd08      	ble.n	80003ba <__adddf3+0x16a>
 80003a8:	f102 0c14 	add.w	ip, r2, #20
 80003ac:	f1c2 020c 	rsb	r2, r2, #12
 80003b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b4:	fa21 f102 	lsr.w	r1, r1, r2
 80003b8:	e00c      	b.n	80003d4 <__adddf3+0x184>
 80003ba:	f102 0214 	add.w	r2, r2, #20
 80003be:	bfd8      	it	le
 80003c0:	f1c2 0c20 	rsble	ip, r2, #32
 80003c4:	fa01 f102 	lsl.w	r1, r1, r2
 80003c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003cc:	bfdc      	itt	le
 80003ce:	ea41 010c 	orrle.w	r1, r1, ip
 80003d2:	4090      	lslle	r0, r2
 80003d4:	1ae4      	subs	r4, r4, r3
 80003d6:	bfa2      	ittt	ge
 80003d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003dc:	4329      	orrge	r1, r5
 80003de:	bd30      	popge	{r4, r5, pc}
 80003e0:	ea6f 0404 	mvn.w	r4, r4
 80003e4:	3c1f      	subs	r4, #31
 80003e6:	da1c      	bge.n	8000422 <__adddf3+0x1d2>
 80003e8:	340c      	adds	r4, #12
 80003ea:	dc0e      	bgt.n	800040a <__adddf3+0x1ba>
 80003ec:	f104 0414 	add.w	r4, r4, #20
 80003f0:	f1c4 0220 	rsb	r2, r4, #32
 80003f4:	fa20 f004 	lsr.w	r0, r0, r4
 80003f8:	fa01 f302 	lsl.w	r3, r1, r2
 80003fc:	ea40 0003 	orr.w	r0, r0, r3
 8000400:	fa21 f304 	lsr.w	r3, r1, r4
 8000404:	ea45 0103 	orr.w	r1, r5, r3
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f1c4 040c 	rsb	r4, r4, #12
 800040e:	f1c4 0220 	rsb	r2, r4, #32
 8000412:	fa20 f002 	lsr.w	r0, r0, r2
 8000416:	fa01 f304 	lsl.w	r3, r1, r4
 800041a:	ea40 0003 	orr.w	r0, r0, r3
 800041e:	4629      	mov	r1, r5
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	fa21 f004 	lsr.w	r0, r1, r4
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f094 0f00 	teq	r4, #0
 800042e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000432:	bf06      	itte	eq
 8000434:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000438:	3401      	addeq	r4, #1
 800043a:	3d01      	subne	r5, #1
 800043c:	e74e      	b.n	80002dc <__adddf3+0x8c>
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf18      	it	ne
 8000444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000448:	d029      	beq.n	800049e <__adddf3+0x24e>
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	d005      	beq.n	8000462 <__adddf3+0x212>
 8000456:	ea54 0c00 	orrs.w	ip, r4, r0
 800045a:	bf04      	itt	eq
 800045c:	4619      	moveq	r1, r3
 800045e:	4610      	moveq	r0, r2
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea91 0f03 	teq	r1, r3
 8000466:	bf1e      	ittt	ne
 8000468:	2100      	movne	r1, #0
 800046a:	2000      	movne	r0, #0
 800046c:	bd30      	popne	{r4, r5, pc}
 800046e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000472:	d105      	bne.n	8000480 <__adddf3+0x230>
 8000474:	0040      	lsls	r0, r0, #1
 8000476:	4149      	adcs	r1, r1
 8000478:	bf28      	it	cs
 800047a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000484:	bf3c      	itt	cc
 8000486:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800048a:	bd30      	popcc	{r4, r5, pc}
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000494:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000498:	f04f 0000 	mov.w	r0, #0
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf1a      	itte	ne
 80004a4:	4619      	movne	r1, r3
 80004a6:	4610      	movne	r0, r2
 80004a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004ac:	bf1c      	itt	ne
 80004ae:	460b      	movne	r3, r1
 80004b0:	4602      	movne	r2, r0
 80004b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b6:	bf06      	itte	eq
 80004b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004bc:	ea91 0f03 	teqeq	r1, r3
 80004c0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	bf00      	nop

080004c8 <__aeabi_ui2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004dc:	f04f 0500 	mov.w	r5, #0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e750      	b.n	8000388 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_i2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004fc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000500:	bf48      	it	mi
 8000502:	4240      	negmi	r0, r0
 8000504:	f04f 0100 	mov.w	r1, #0
 8000508:	e73e      	b.n	8000388 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_f2d>:
 800050c:	0042      	lsls	r2, r0, #1
 800050e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000512:	ea4f 0131 	mov.w	r1, r1, rrx
 8000516:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051a:	bf1f      	itttt	ne
 800051c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000520:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000524:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000528:	4770      	bxne	lr
 800052a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052e:	bf08      	it	eq
 8000530:	4770      	bxeq	lr
 8000532:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000536:	bf04      	itt	eq
 8000538:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000544:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000548:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800054c:	e71c      	b.n	8000388 <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_ul2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f04f 0500 	mov.w	r5, #0
 800055e:	e00a      	b.n	8000576 <__aeabi_l2d+0x16>

08000560 <__aeabi_l2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056e:	d502      	bpl.n	8000576 <__aeabi_l2d+0x16>
 8000570:	4240      	negs	r0, r0
 8000572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000576:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000582:	f43f aed8 	beq.w	8000336 <__adddf3+0xe6>
 8000586:	f04f 0203 	mov.w	r2, #3
 800058a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058e:	bf18      	it	ne
 8000590:	3203      	addne	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059e:	f1c2 0320 	rsb	r3, r2, #32
 80005a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ae:	ea40 000e 	orr.w	r0, r0, lr
 80005b2:	fa21 f102 	lsr.w	r1, r1, r2
 80005b6:	4414      	add	r4, r2
 80005b8:	e6bd      	b.n	8000336 <__adddf3+0xe6>
 80005ba:	bf00      	nop

080005bc <__aeabi_dmul>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ca:	bf1d      	ittte	ne
 80005cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d0:	ea94 0f0c 	teqne	r4, ip
 80005d4:	ea95 0f0c 	teqne	r5, ip
 80005d8:	f000 f8de 	bleq	8000798 <__aeabi_dmul+0x1dc>
 80005dc:	442c      	add	r4, r5
 80005de:	ea81 0603 	eor.w	r6, r1, r3
 80005e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ee:	bf18      	it	ne
 80005f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005fc:	d038      	beq.n	8000670 <__aeabi_dmul+0xb4>
 80005fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000602:	f04f 0500 	mov.w	r5, #0
 8000606:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000612:	f04f 0600 	mov.w	r6, #0
 8000616:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061a:	f09c 0f00 	teq	ip, #0
 800061e:	bf18      	it	ne
 8000620:	f04e 0e01 	orrne.w	lr, lr, #1
 8000624:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000628:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800062c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000630:	d204      	bcs.n	800063c <__aeabi_dmul+0x80>
 8000632:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000636:	416d      	adcs	r5, r5
 8000638:	eb46 0606 	adc.w	r6, r6, r6
 800063c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000640:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000644:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000648:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800064c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000650:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000654:	bf88      	it	hi
 8000656:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800065a:	d81e      	bhi.n	800069a <__aeabi_dmul+0xde>
 800065c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000660:	bf08      	it	eq
 8000662:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000666:	f150 0000 	adcs.w	r0, r0, #0
 800066a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000674:	ea46 0101 	orr.w	r1, r6, r1
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	ea81 0103 	eor.w	r1, r1, r3
 8000680:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000684:	bfc2      	ittt	gt
 8000686:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068e:	bd70      	popgt	{r4, r5, r6, pc}
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f04f 0e00 	mov.w	lr, #0
 8000698:	3c01      	subs	r4, #1
 800069a:	f300 80ab 	bgt.w	80007f4 <__aeabi_dmul+0x238>
 800069e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006a2:	bfde      	ittt	le
 80006a4:	2000      	movle	r0, #0
 80006a6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006aa:	bd70      	pople	{r4, r5, r6, pc}
 80006ac:	f1c4 0400 	rsb	r4, r4, #0
 80006b0:	3c20      	subs	r4, #32
 80006b2:	da35      	bge.n	8000720 <__aeabi_dmul+0x164>
 80006b4:	340c      	adds	r4, #12
 80006b6:	dc1b      	bgt.n	80006f0 <__aeabi_dmul+0x134>
 80006b8:	f104 0414 	add.w	r4, r4, #20
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f305 	lsl.w	r3, r0, r5
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	fa21 f604 	lsr.w	r6, r1, r4
 80006e0:	eb42 0106 	adc.w	r1, r2, r6
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 040c 	rsb	r4, r4, #12
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f304 	lsl.w	r3, r0, r4
 80006fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000700:	fa01 f204 	lsl.w	r2, r1, r4
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	f141 0100 	adc.w	r1, r1, #0
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f205 	lsl.w	r2, r0, r5
 8000728:	ea4e 0e02 	orr.w	lr, lr, r2
 800072c:	fa20 f304 	lsr.w	r3, r0, r4
 8000730:	fa01 f205 	lsl.w	r2, r1, r5
 8000734:	ea43 0302 	orr.w	r3, r3, r2
 8000738:	fa21 f004 	lsr.w	r0, r1, r4
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	fa21 f204 	lsr.w	r2, r1, r4
 8000744:	ea20 0002 	bic.w	r0, r0, r2
 8000748:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800074c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000750:	bf08      	it	eq
 8000752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	f094 0f00 	teq	r4, #0
 800075c:	d10f      	bne.n	800077e <__aeabi_dmul+0x1c2>
 800075e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000762:	0040      	lsls	r0, r0, #1
 8000764:	eb41 0101 	adc.w	r1, r1, r1
 8000768:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800076c:	bf08      	it	eq
 800076e:	3c01      	subeq	r4, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1a6>
 8000772:	ea41 0106 	orr.w	r1, r1, r6
 8000776:	f095 0f00 	teq	r5, #0
 800077a:	bf18      	it	ne
 800077c:	4770      	bxne	lr
 800077e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000782:	0052      	lsls	r2, r2, #1
 8000784:	eb43 0303 	adc.w	r3, r3, r3
 8000788:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800078c:	bf08      	it	eq
 800078e:	3d01      	subeq	r5, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1c6>
 8000792:	ea43 0306 	orr.w	r3, r3, r6
 8000796:	4770      	bx	lr
 8000798:	ea94 0f0c 	teq	r4, ip
 800079c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a0:	bf18      	it	ne
 80007a2:	ea95 0f0c 	teqne	r5, ip
 80007a6:	d00c      	beq.n	80007c2 <__aeabi_dmul+0x206>
 80007a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ac:	bf18      	it	ne
 80007ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b2:	d1d1      	bne.n	8000758 <__aeabi_dmul+0x19c>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c6:	bf06      	itte	eq
 80007c8:	4610      	moveq	r0, r2
 80007ca:	4619      	moveq	r1, r3
 80007cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d0:	d019      	beq.n	8000806 <__aeabi_dmul+0x24a>
 80007d2:	ea94 0f0c 	teq	r4, ip
 80007d6:	d102      	bne.n	80007de <__aeabi_dmul+0x222>
 80007d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007dc:	d113      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007de:	ea95 0f0c 	teq	r5, ip
 80007e2:	d105      	bne.n	80007f0 <__aeabi_dmul+0x234>
 80007e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e8:	bf1c      	itt	ne
 80007ea:	4610      	movne	r0, r2
 80007ec:	4619      	movne	r1, r3
 80007ee:	d10a      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800080a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080e:	bd70      	pop	{r4, r5, r6, pc}

08000810 <__aeabi_ddiv>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000816:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800081a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081e:	bf1d      	ittte	ne
 8000820:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000824:	ea94 0f0c 	teqne	r4, ip
 8000828:	ea95 0f0c 	teqne	r5, ip
 800082c:	f000 f8a7 	bleq	800097e <__aeabi_ddiv+0x16e>
 8000830:	eba4 0405 	sub.w	r4, r4, r5
 8000834:	ea81 0e03 	eor.w	lr, r1, r3
 8000838:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800083c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000840:	f000 8088 	beq.w	8000954 <__aeabi_ddiv+0x144>
 8000844:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000848:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800084c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000850:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000854:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000858:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800085c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000860:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000864:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000868:	429d      	cmp	r5, r3
 800086a:	bf08      	it	eq
 800086c:	4296      	cmpeq	r6, r2
 800086e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000872:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000876:	d202      	bcs.n	800087e <__aeabi_ddiv+0x6e>
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	1ab6      	subs	r6, r6, r2
 8000880:	eb65 0503 	sbc.w	r5, r5, r3
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f0:	d018      	beq.n	8000924 <__aeabi_ddiv+0x114>
 80008f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000902:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000906:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090e:	d1c0      	bne.n	8000892 <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	d10b      	bne.n	800092e <__aeabi_ddiv+0x11e>
 8000916:	ea41 0100 	orr.w	r1, r1, r0
 800091a:	f04f 0000 	mov.w	r0, #0
 800091e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000922:	e7b6      	b.n	8000892 <__aeabi_ddiv+0x82>
 8000924:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000928:	bf04      	itt	eq
 800092a:	4301      	orreq	r1, r0
 800092c:	2000      	moveq	r0, #0
 800092e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000932:	bf88      	it	hi
 8000934:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000938:	f63f aeaf 	bhi.w	800069a <__aeabi_dmul+0xde>
 800093c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000940:	bf04      	itt	eq
 8000942:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094a:	f150 0000 	adcs.w	r0, r0, #0
 800094e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000958:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800095c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000960:	bfc2      	ittt	gt
 8000962:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096a:	bd70      	popgt	{r4, r5, r6, pc}
 800096c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000970:	f04f 0e00 	mov.w	lr, #0
 8000974:	3c01      	subs	r4, #1
 8000976:	e690      	b.n	800069a <__aeabi_dmul+0xde>
 8000978:	ea45 0e06 	orr.w	lr, r5, r6
 800097c:	e68d      	b.n	800069a <__aeabi_dmul+0xde>
 800097e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000982:	ea94 0f0c 	teq	r4, ip
 8000986:	bf08      	it	eq
 8000988:	ea95 0f0c 	teqeq	r5, ip
 800098c:	f43f af3b 	beq.w	8000806 <__aeabi_dmul+0x24a>
 8000990:	ea94 0f0c 	teq	r4, ip
 8000994:	d10a      	bne.n	80009ac <__aeabi_ddiv+0x19c>
 8000996:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099a:	f47f af34 	bne.w	8000806 <__aeabi_dmul+0x24a>
 800099e:	ea95 0f0c 	teq	r5, ip
 80009a2:	f47f af25 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e72c      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009ac:	ea95 0f0c 	teq	r5, ip
 80009b0:	d106      	bne.n	80009c0 <__aeabi_ddiv+0x1b0>
 80009b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b6:	f43f aefd 	beq.w	80007b4 <__aeabi_dmul+0x1f8>
 80009ba:	4610      	mov	r0, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	e722      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c4:	bf18      	it	ne
 80009c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ca:	f47f aec5 	bne.w	8000758 <__aeabi_dmul+0x19c>
 80009ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d2:	f47f af0d 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009da:	f47f aeeb 	bne.w	80007b4 <__aeabi_dmul+0x1f8>
 80009de:	e712      	b.n	8000806 <__aeabi_dmul+0x24a>

080009e0 <__gedf2>:
 80009e0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009e4:	e006      	b.n	80009f4 <__cmpdf2+0x4>
 80009e6:	bf00      	nop

080009e8 <__ledf2>:
 80009e8:	f04f 0c01 	mov.w	ip, #1
 80009ec:	e002      	b.n	80009f4 <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__cmpdf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	bf18      	it	ne
 8000a06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0a:	d01b      	beq.n	8000a44 <__cmpdf2+0x54>
 8000a0c:	b001      	add	sp, #4
 8000a0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a12:	bf0c      	ite	eq
 8000a14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a18:	ea91 0f03 	teqne	r1, r3
 8000a1c:	bf02      	ittt	eq
 8000a1e:	ea90 0f02 	teqeq	r0, r2
 8000a22:	2000      	moveq	r0, #0
 8000a24:	4770      	bxeq	lr
 8000a26:	f110 0f00 	cmn.w	r0, #0
 8000a2a:	ea91 0f03 	teq	r1, r3
 8000a2e:	bf58      	it	pl
 8000a30:	4299      	cmppl	r1, r3
 8000a32:	bf08      	it	eq
 8000a34:	4290      	cmpeq	r0, r2
 8000a36:	bf2c      	ite	cs
 8000a38:	17d8      	asrcs	r0, r3, #31
 8000a3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3e:	f040 0001 	orr.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__cmpdf2+0x64>
 8000a4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a52:	d107      	bne.n	8000a64 <__cmpdf2+0x74>
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d1d6      	bne.n	8000a0c <__cmpdf2+0x1c>
 8000a5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a62:	d0d3      	beq.n	8000a0c <__cmpdf2+0x1c>
 8000a64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdrcmple>:
 8000a6c:	4684      	mov	ip, r0
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4662      	mov	r2, ip
 8000a72:	468c      	mov	ip, r1
 8000a74:	4619      	mov	r1, r3
 8000a76:	4663      	mov	r3, ip
 8000a78:	e000      	b.n	8000a7c <__aeabi_cdcmpeq>
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdcmpeq>:
 8000a7c:	b501      	push	{r0, lr}
 8000a7e:	f7ff ffb7 	bl	80009f0 <__cmpdf2>
 8000a82:	2800      	cmp	r0, #0
 8000a84:	bf48      	it	mi
 8000a86:	f110 0f00 	cmnmi.w	r0, #0
 8000a8a:	bd01      	pop	{r0, pc}

08000a8c <__aeabi_dcmpeq>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff fff4 	bl	8000a7c <__aeabi_cdcmpeq>
 8000a94:	bf0c      	ite	eq
 8000a96:	2001      	moveq	r0, #1
 8000a98:	2000      	movne	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmplt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffea 	bl	8000a7c <__aeabi_cdcmpeq>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmple>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffe0 	bl	8000a7c <__aeabi_cdcmpeq>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpge>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffce 	bl	8000a6c <__aeabi_cdrcmple>
 8000ad0:	bf94      	ite	ls
 8000ad2:	2001      	movls	r0, #1
 8000ad4:	2000      	movhi	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpgt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffc4 	bl	8000a6c <__aeabi_cdrcmple>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmpun>:
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__aeabi_dcmpun+0x10>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d10a      	bne.n	8000b16 <__aeabi_dcmpun+0x26>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x20>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_dcmpun+0x26>
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0001 	mov.w	r0, #1
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b80:	f000 b80c 	b.w	8000b9c <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f00f faac 	bl	80100e8 <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__do_global_dtors_aux>:
 8000ba0:	b510      	push	{r4, lr}
 8000ba2:	4c05      	ldr	r4, [pc, #20]	@ (8000bb8 <__do_global_dtors_aux+0x18>)
 8000ba4:	7823      	ldrb	r3, [r4, #0]
 8000ba6:	b933      	cbnz	r3, 8000bb6 <__do_global_dtors_aux+0x16>
 8000ba8:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <__do_global_dtors_aux+0x1c>)
 8000baa:	b113      	cbz	r3, 8000bb2 <__do_global_dtors_aux+0x12>
 8000bac:	4804      	ldr	r0, [pc, #16]	@ (8000bc0 <__do_global_dtors_aux+0x20>)
 8000bae:	f3af 8000 	nop.w
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	7023      	strb	r3, [r4, #0]
 8000bb6:	bd10      	pop	{r4, pc}
 8000bb8:	20000288 	.word	0x20000288
 8000bbc:	00000000 	.word	0x00000000
 8000bc0:	080103a4 	.word	0x080103a4

08000bc4 <frame_dummy>:
 8000bc4:	b508      	push	{r3, lr}
 8000bc6:	4b03      	ldr	r3, [pc, #12]	@ (8000bd4 <frame_dummy+0x10>)
 8000bc8:	b11b      	cbz	r3, 8000bd2 <frame_dummy+0xe>
 8000bca:	4903      	ldr	r1, [pc, #12]	@ (8000bd8 <frame_dummy+0x14>)
 8000bcc:	4803      	ldr	r0, [pc, #12]	@ (8000bdc <frame_dummy+0x18>)
 8000bce:	f3af 8000 	nop.w
 8000bd2:	bd08      	pop	{r3, pc}
 8000bd4:	00000000 	.word	0x00000000
 8000bd8:	2000028c 	.word	0x2000028c
 8000bdc:	080103a4 	.word	0x080103a4

08000be0 <ApplicationInit>:
void lcd_display_task(void* arg);
void green_led_task(void* arg);
void red_led_task(void* arg);


void ApplicationInit(RNG_HandleTypeDef* hrng){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	initialise_monitor_handles(); // Allows printf functionality
 8000be8:	f003 fd18 	bl	800461c <initialise_monitor_handles>
    LTCD__Init();
 8000bec:	f002 fa16 	bl	800301c <LTCD__Init>
    LTCD_Layer_Init(0);
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f002 fa71 	bl	80030d8 <LTCD_Layer_Init>
    LCD_Clear(0, LCD_COLOR_WHITE);
 8000bf6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f002 fd08 	bl	8003610 <LCD_Clear>
    Gyro_Init();
 8000c00:	f001 ff86 	bl	8002b10 <Gyro_Init>

    hrng_ptr = hrng;
 8000c04:	4a75      	ldr	r2, [pc, #468]	@ (8000ddc <ApplicationInit+0x1fc>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
    disruptor_energy = drone.energy_store->max_energy;
 8000c0a:	4b75      	ldr	r3, [pc, #468]	@ (8000de0 <ApplicationInit+0x200>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a74      	ldr	r2, [pc, #464]	@ (8000de4 <ApplicationInit+0x204>)
 8000c12:	6013      	str	r3, [r2, #0]
    game_score = 0;
 8000c14:	4b74      	ldr	r3, [pc, #464]	@ (8000de8 <ApplicationInit+0x208>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
    maze = NULL;
 8000c1a:	4b74      	ldr	r3, [pc, #464]	@ (8000dec <ApplicationInit+0x20c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]

    // ITC init
    event_group_id = osEventFlagsNew(NULL);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f006 fc80 	bl	8007526 <osEventFlagsNew>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a71      	ldr	r2, [pc, #452]	@ (8000df0 <ApplicationInit+0x210>)
 8000c2a:	6013      	str	r3, [r2, #0]
    if(event_group_id == NULL) while(1);
 8000c2c:	4b70      	ldr	r3, [pc, #448]	@ (8000df0 <ApplicationInit+0x210>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d101      	bne.n	8000c38 <ApplicationInit+0x58>
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <ApplicationInit+0x54>

    disruptor_start_sem_id = osSemaphoreNew(1, 0, NULL);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f006 feb8 	bl	80079b2 <osSemaphoreNew>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4a6b      	ldr	r2, [pc, #428]	@ (8000df4 <ApplicationInit+0x214>)
 8000c46:	6013      	str	r3, [r2, #0]
    if(disruptor_start_sem_id == NULL) while(1);
 8000c48:	4b6a      	ldr	r3, [pc, #424]	@ (8000df4 <ApplicationInit+0x214>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d101      	bne.n	8000c54 <ApplicationInit+0x74>
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <ApplicationInit+0x70>

    disruptor_stop_sem_id = osSemaphoreNew(1, 0, NULL);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2100      	movs	r1, #0
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f006 feaa 	bl	80079b2 <osSemaphoreNew>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4a65      	ldr	r2, [pc, #404]	@ (8000df8 <ApplicationInit+0x218>)
 8000c62:	6013      	str	r3, [r2, #0]
    if(disruptor_stop_sem_id == NULL) while(1);
 8000c64:	4b64      	ldr	r3, [pc, #400]	@ (8000df8 <ApplicationInit+0x218>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d101      	bne.n	8000c70 <ApplicationInit+0x90>
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <ApplicationInit+0x8c>

    xy_pos_dif_mutex_id = osMutexNew(NULL);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f006 fd90 	bl	8007796 <osMutexNew>
 8000c76:	4603      	mov	r3, r0
 8000c78:	4a60      	ldr	r2, [pc, #384]	@ (8000dfc <ApplicationInit+0x21c>)
 8000c7a:	6013      	str	r3, [r2, #0]
    if(xy_pos_dif_mutex_id == NULL) while(1);
 8000c7c:	4b5f      	ldr	r3, [pc, #380]	@ (8000dfc <ApplicationInit+0x21c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d101      	bne.n	8000c88 <ApplicationInit+0xa8>
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <ApplicationInit+0xa4>

    xy_pos_mutex_id = osMutexNew(NULL);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f006 fd84 	bl	8007796 <osMutexNew>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a5b      	ldr	r2, [pc, #364]	@ (8000e00 <ApplicationInit+0x220>)
 8000c92:	6013      	str	r3, [r2, #0]
    if(xy_pos_mutex_id == NULL) while(1);
 8000c94:	4b5a      	ldr	r3, [pc, #360]	@ (8000e00 <ApplicationInit+0x220>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <ApplicationInit+0xc0>
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <ApplicationInit+0xbc>

    disruptor_eng_id = osMutexNew(NULL);
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f006 fd78 	bl	8007796 <osMutexNew>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	4a56      	ldr	r2, [pc, #344]	@ (8000e04 <ApplicationInit+0x224>)
 8000caa:	6013      	str	r3, [r2, #0]
    if(disruptor_eng_id == NULL) while(1);
 8000cac:	4b55      	ldr	r3, [pc, #340]	@ (8000e04 <ApplicationInit+0x224>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d101      	bne.n	8000cb8 <ApplicationInit+0xd8>
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <ApplicationInit+0xd4>

    game_time_mutex_id = osMutexNew(NULL);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f006 fd6c 	bl	8007796 <osMutexNew>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4a51      	ldr	r2, [pc, #324]	@ (8000e08 <ApplicationInit+0x228>)
 8000cc2:	6013      	str	r3, [r2, #0]
    if(game_time_mutex_id == NULL) while(1);
 8000cc4:	4b50      	ldr	r3, [pc, #320]	@ (8000e08 <ApplicationInit+0x228>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d101      	bne.n	8000cd0 <ApplicationInit+0xf0>
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <ApplicationInit+0xec>

    // timer init
    disruptor_usage_timer_id = osTimerNew(disruptor_timer_end, osTimerOnce, (void*)0, NULL);
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	484d      	ldr	r0, [pc, #308]	@ (8000e0c <ApplicationInit+0x22c>)
 8000cd8:	f006 fb28 	bl	800732c <osTimerNew>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	4a4c      	ldr	r2, [pc, #304]	@ (8000e10 <ApplicationInit+0x230>)
 8000ce0:	6013      	str	r3, [r2, #0]
    if(disruptor_usage_timer_id == NULL) while(1);
 8000ce2:	4b4b      	ldr	r3, [pc, #300]	@ (8000e10 <ApplicationInit+0x230>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <ApplicationInit+0x10e>
 8000cea:	bf00      	nop
 8000cec:	e7fd      	b.n	8000cea <ApplicationInit+0x10a>

    disruptor_recharge_timer_id = osTimerNew(disruptor_recharge, osTimerPeriodic, (void*)0, NULL);
 8000cee:	2300      	movs	r3, #0
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	4847      	ldr	r0, [pc, #284]	@ (8000e14 <ApplicationInit+0x234>)
 8000cf6:	f006 fb19 	bl	800732c <osTimerNew>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4a46      	ldr	r2, [pc, #280]	@ (8000e18 <ApplicationInit+0x238>)
 8000cfe:	6013      	str	r3, [r2, #0]
    if(disruptor_recharge_timer_id == NULL) while(1);
 8000d00:	4b45      	ldr	r3, [pc, #276]	@ (8000e18 <ApplicationInit+0x238>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <ApplicationInit+0x12c>
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <ApplicationInit+0x128>

    game_timer_id = osTimerNew(game_time_decrement, osTimerPeriodic, (void*)0, NULL);
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2101      	movs	r1, #1
 8000d12:	4842      	ldr	r0, [pc, #264]	@ (8000e1c <ApplicationInit+0x23c>)
 8000d14:	f006 fb0a 	bl	800732c <osTimerNew>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4a41      	ldr	r2, [pc, #260]	@ (8000e20 <ApplicationInit+0x240>)
 8000d1c:	6013      	str	r3, [r2, #0]
    if(game_timer_id == NULL) while(1);
 8000d1e:	4b40      	ldr	r3, [pc, #256]	@ (8000e20 <ApplicationInit+0x240>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <ApplicationInit+0x14a>
 8000d26:	bf00      	nop
 8000d28:	e7fd      	b.n	8000d26 <ApplicationInit+0x146>

    // task init
    disruptor_task_id = osThreadNew(disruptor_task, (void*)0, &disruptor_task_attr);
 8000d2a:	4a3e      	ldr	r2, [pc, #248]	@ (8000e24 <ApplicationInit+0x244>)
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	483e      	ldr	r0, [pc, #248]	@ (8000e28 <ApplicationInit+0x248>)
 8000d30:	f006 fa39 	bl	80071a6 <osThreadNew>
 8000d34:	4603      	mov	r3, r0
 8000d36:	4a3d      	ldr	r2, [pc, #244]	@ (8000e2c <ApplicationInit+0x24c>)
 8000d38:	6013      	str	r3, [r2, #0]
    if(disruptor_task_id == NULL) while(1);
 8000d3a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e2c <ApplicationInit+0x24c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <ApplicationInit+0x166>
 8000d42:	bf00      	nop
 8000d44:	e7fd      	b.n	8000d42 <ApplicationInit+0x162>

    gyro_polling_task_id = osThreadNew(gyro_polling_task, (void*)0, &gyro_polling_task_attr);
 8000d46:	4a3a      	ldr	r2, [pc, #232]	@ (8000e30 <ApplicationInit+0x250>)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	483a      	ldr	r0, [pc, #232]	@ (8000e34 <ApplicationInit+0x254>)
 8000d4c:	f006 fa2b 	bl	80071a6 <osThreadNew>
 8000d50:	4603      	mov	r3, r0
 8000d52:	4a39      	ldr	r2, [pc, #228]	@ (8000e38 <ApplicationInit+0x258>)
 8000d54:	6013      	str	r3, [r2, #0]
    if(gyro_polling_task_id == NULL) while(1);
 8000d56:	4b38      	ldr	r3, [pc, #224]	@ (8000e38 <ApplicationInit+0x258>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <ApplicationInit+0x182>
 8000d5e:	bf00      	nop
 8000d60:	e7fd      	b.n	8000d5e <ApplicationInit+0x17e>

    game_comp_task_id = osThreadNew(game_comp_task, (void*)0, &game_comp_task_attr);
 8000d62:	4a36      	ldr	r2, [pc, #216]	@ (8000e3c <ApplicationInit+0x25c>)
 8000d64:	2100      	movs	r1, #0
 8000d66:	4836      	ldr	r0, [pc, #216]	@ (8000e40 <ApplicationInit+0x260>)
 8000d68:	f006 fa1d 	bl	80071a6 <osThreadNew>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	4a35      	ldr	r2, [pc, #212]	@ (8000e44 <ApplicationInit+0x264>)
 8000d70:	6013      	str	r3, [r2, #0]
    if(game_comp_task_id == NULL) while(1);
 8000d72:	4b34      	ldr	r3, [pc, #208]	@ (8000e44 <ApplicationInit+0x264>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <ApplicationInit+0x19e>
 8000d7a:	bf00      	nop
 8000d7c:	e7fd      	b.n	8000d7a <ApplicationInit+0x19a>

    lcd_display_task_id = osThreadNew(lcd_display_task, (void*)0, &lcd_display_task_attr);
 8000d7e:	4a32      	ldr	r2, [pc, #200]	@ (8000e48 <ApplicationInit+0x268>)
 8000d80:	2100      	movs	r1, #0
 8000d82:	4832      	ldr	r0, [pc, #200]	@ (8000e4c <ApplicationInit+0x26c>)
 8000d84:	f006 fa0f 	bl	80071a6 <osThreadNew>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	4a31      	ldr	r2, [pc, #196]	@ (8000e50 <ApplicationInit+0x270>)
 8000d8c:	6013      	str	r3, [r2, #0]
    if(lcd_display_task_id == NULL) while(1);
 8000d8e:	4b30      	ldr	r3, [pc, #192]	@ (8000e50 <ApplicationInit+0x270>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <ApplicationInit+0x1ba>
 8000d96:	bf00      	nop
 8000d98:	e7fd      	b.n	8000d96 <ApplicationInit+0x1b6>

    green_led_task_id = osThreadNew(green_led_task, (void*)0, &green_led_task_attr);
 8000d9a:	4a2e      	ldr	r2, [pc, #184]	@ (8000e54 <ApplicationInit+0x274>)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	482e      	ldr	r0, [pc, #184]	@ (8000e58 <ApplicationInit+0x278>)
 8000da0:	f006 fa01 	bl	80071a6 <osThreadNew>
 8000da4:	4603      	mov	r3, r0
 8000da6:	4a2d      	ldr	r2, [pc, #180]	@ (8000e5c <ApplicationInit+0x27c>)
 8000da8:	6013      	str	r3, [r2, #0]
    if(green_led_task_id == NULL) while(1);
 8000daa:	4b2c      	ldr	r3, [pc, #176]	@ (8000e5c <ApplicationInit+0x27c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <ApplicationInit+0x1d6>
 8000db2:	bf00      	nop
 8000db4:	e7fd      	b.n	8000db2 <ApplicationInit+0x1d2>

    red_led_task_id = osThreadNew(red_led_task, (void*)0, &red_led_task_attr);
 8000db6:	4a2a      	ldr	r2, [pc, #168]	@ (8000e60 <ApplicationInit+0x280>)
 8000db8:	2100      	movs	r1, #0
 8000dba:	482a      	ldr	r0, [pc, #168]	@ (8000e64 <ApplicationInit+0x284>)
 8000dbc:	f006 f9f3 	bl	80071a6 <osThreadNew>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a29      	ldr	r2, [pc, #164]	@ (8000e68 <ApplicationInit+0x288>)
 8000dc4:	6013      	str	r3, [r2, #0]
    if(red_led_task_id == NULL) while(1);
 8000dc6:	4b28      	ldr	r3, [pc, #160]	@ (8000e68 <ApplicationInit+0x288>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <ApplicationInit+0x1f2>
 8000dce:	bf00      	nop
 8000dd0:	e7fd      	b.n	8000dce <ApplicationInit+0x1ee>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200002e4 	.word	0x200002e4
 8000de0:	20000024 	.word	0x20000024
 8000de4:	2000031c 	.word	0x2000031c
 8000de8:	20000320 	.word	0x20000320
 8000dec:	20000318 	.word	0x20000318
 8000df0:	200002bc 	.word	0x200002bc
 8000df4:	200002c0 	.word	0x200002c0
 8000df8:	200002c4 	.word	0x200002c4
 8000dfc:	200002c8 	.word	0x200002c8
 8000e00:	200002cc 	.word	0x200002cc
 8000e04:	200002d0 	.word	0x200002d0
 8000e08:	200002d4 	.word	0x200002d4
 8000e0c:	0800112d 	.word	0x0800112d
 8000e10:	200002d8 	.word	0x200002d8
 8000e14:	080010d5 	.word	0x080010d5
 8000e18:	200002dc 	.word	0x200002dc
 8000e1c:	08001aed 	.word	0x08001aed
 8000e20:	200002e0 	.word	0x200002e0
 8000e24:	2000007c 	.word	0x2000007c
 8000e28:	0800114d 	.word	0x0800114d
 8000e2c:	200002a4 	.word	0x200002a4
 8000e30:	200000a0 	.word	0x200000a0
 8000e34:	08001261 	.word	0x08001261
 8000e38:	200002a8 	.word	0x200002a8
 8000e3c:	200000c4 	.word	0x200000c4
 8000e40:	08001c51 	.word	0x08001c51
 8000e44:	200002ac 	.word	0x200002ac
 8000e48:	200000e8 	.word	0x200000e8
 8000e4c:	0800274d 	.word	0x0800274d
 8000e50:	200002b0 	.word	0x200002b0
 8000e54:	2000010c 	.word	0x2000010c
 8000e58:	080029e5 	.word	0x080029e5
 8000e5c:	200002b4 	.word	0x200002b4
 8000e60:	20000130 	.word	0x20000130
 8000e64:	08002a85 	.word	0x08002a85
 8000e68:	200002b8 	.word	0x200002b8

08000e6c <read_xy_pos_dif>:

void read_xy_pos_dif(double* xy){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	osMutexAcquire(xy_pos_dif_mutex_id, osWaitForever);
 8000e74:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <read_xy_pos_dif+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f006 fd10 	bl	80078a2 <osMutexAcquire>

	xy[0] = xy_pos_dif.x;
 8000e82:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <read_xy_pos_dif+0x68>)
 8000e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	e9c1 2300 	strd	r2, r3, [r1]
	xy[1] = xy_pos_dif.y;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f103 0108 	add.w	r1, r3, #8
 8000e94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <read_xy_pos_dif+0x68>)
 8000e96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e9a:	e9c1 2300 	strd	r2, r3, [r1]
	xy[2] = xy_pos_dif.x_vel;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f103 0110 	add.w	r1, r3, #16
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <read_xy_pos_dif+0x68>)
 8000ea6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000eaa:	e9c1 2300 	strd	r2, r3, [r1]
	xy[3] = xy_pos_dif.y_vel;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f103 0118 	add.w	r1, r3, #24
 8000eb4:	4b07      	ldr	r3, [pc, #28]	@ (8000ed4 <read_xy_pos_dif+0x68>)
 8000eb6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000eba:	e9c1 2300 	strd	r2, r3, [r1]

	osMutexRelease(xy_pos_dif_mutex_id);
 8000ebe:	4b04      	ldr	r3, [pc, #16]	@ (8000ed0 <read_xy_pos_dif+0x64>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f006 fd38 	bl	8007938 <osMutexRelease>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200002c8 	.word	0x200002c8
 8000ed4:	200002e8 	.word	0x200002e8

08000ed8 <write_xy_pos_dif>:

void write_xy_pos_dif(double* xy){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	osMutexAcquire(xy_pos_dif_mutex_id, osWaitForever);
 8000ee0:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <write_xy_pos_dif+0x58>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f006 fcda 	bl	80078a2 <osMutexAcquire>

	xy_pos_dif.x = xy[0];
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef4:	490f      	ldr	r1, [pc, #60]	@ (8000f34 <write_xy_pos_dif+0x5c>)
 8000ef6:	e9c1 2300 	strd	r2, r3, [r1]
	xy_pos_dif.y = xy[1];
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f00:	490c      	ldr	r1, [pc, #48]	@ (8000f34 <write_xy_pos_dif+0x5c>)
 8000f02:	e9c1 2302 	strd	r2, r3, [r1, #8]
	xy_pos_dif.x_vel = xy[2];
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f0c:	4909      	ldr	r1, [pc, #36]	@ (8000f34 <write_xy_pos_dif+0x5c>)
 8000f0e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	xy_pos_dif.y_vel = xy[3];
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000f18:	4906      	ldr	r1, [pc, #24]	@ (8000f34 <write_xy_pos_dif+0x5c>)
 8000f1a:	e9c1 2306 	strd	r2, r3, [r1, #24]

	osMutexRelease(xy_pos_dif_mutex_id);
 8000f1e:	4b04      	ldr	r3, [pc, #16]	@ (8000f30 <write_xy_pos_dif+0x58>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f006 fd08 	bl	8007938 <osMutexRelease>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200002c8 	.word	0x200002c8
 8000f34:	200002e8 	.word	0x200002e8

08000f38 <read_xy_position>:

void read_xy_position(double* xy){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	osMutexAcquire(xy_pos_mutex_id, osWaitForever);
 8000f40:	4b0e      	ldr	r3, [pc, #56]	@ (8000f7c <read_xy_position+0x44>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f006 fcaa 	bl	80078a2 <osMutexAcquire>

	xy[0] = xy_position.x;
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <read_xy_position+0x48>)
 8000f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	e9c1 2300 	strd	r2, r3, [r1]
	xy[1] = xy_position.y;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f103 0108 	add.w	r1, r3, #8
 8000f60:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <read_xy_position+0x48>)
 8000f62:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f66:	e9c1 2300 	strd	r2, r3, [r1]

	osMutexRelease(xy_pos_mutex_id);
 8000f6a:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <read_xy_position+0x44>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f006 fce2 	bl	8007938 <osMutexRelease>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200002cc 	.word	0x200002cc
 8000f80:	20000308 	.word	0x20000308

08000f84 <write_xy_position>:

void write_xy_position(double* xy){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	osMutexAcquire(xy_pos_mutex_id, osWaitForever);
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <write_xy_position+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f94:	4618      	mov	r0, r3
 8000f96:	f006 fc84 	bl	80078a2 <osMutexAcquire>

	xy_position.x = xy[0];
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	4909      	ldr	r1, [pc, #36]	@ (8000fc8 <write_xy_position+0x44>)
 8000fa2:	e9c1 2300 	strd	r2, r3, [r1]
	xy_position.y = xy[1];
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000fac:	4906      	ldr	r1, [pc, #24]	@ (8000fc8 <write_xy_position+0x44>)
 8000fae:	e9c1 2302 	strd	r2, r3, [r1, #8]

	osMutexRelease(xy_pos_mutex_id);
 8000fb2:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <write_xy_position+0x40>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f006 fcbe 	bl	8007938 <osMutexRelease>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200002cc 	.word	0x200002cc
 8000fc8:	20000308 	.word	0x20000308

08000fcc <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000fd2:	2006      	movs	r0, #6
 8000fd4:	f003 fd37 	bl	8004a46 <HAL_NVIC_DisableIRQ>
	int btn_state = HAL_GPIO_ReadPin(USR_BTN_PORT, USR_BTN_PIN);
 8000fd8:	2101      	movs	r1, #1
 8000fda:	4814      	ldr	r0, [pc, #80]	@ (800102c <EXTI0_IRQHandler+0x60>)
 8000fdc:	f004 f806 	bl	8004fec <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	607b      	str	r3, [r7, #4]
	if(btn_state){
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <EXTI0_IRQHandler+0x2a>
		// rising edge
		osSemaphoreRelease(disruptor_start_sem_id);
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <EXTI0_IRQHandler+0x64>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f006 fdba 	bl	8007b68 <osSemaphoreRelease>
 8000ff4:	e010      	b.n	8001018 <EXTI0_IRQHandler+0x4c>


	}else{
		// falling edge
		uint32_t flags = osEventFlagsGet(event_group_id);
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <EXTI0_IRQHandler+0x68>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f006 fb45 	bl	800768a <osEventFlagsGet>
 8001000:	6038      	str	r0, [r7, #0]
		if(flags & DISRUPTOR_STATE) osEventFlagsSet(event_group_id, DISRUPTOR_END);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	f003 0310 	and.w	r3, r3, #16
 8001008:	2b00      	cmp	r3, #0
 800100a:	d005      	beq.n	8001018 <EXTI0_IRQHandler+0x4c>
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <EXTI0_IRQHandler+0x68>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2120      	movs	r1, #32
 8001012:	4618      	mov	r0, r3
 8001014:	f006 fac6 	bl	80075a4 <osEventFlagsSet>
//		disruptor_stop((void*)0);
	}

	__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 8001018:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <EXTI0_IRQHandler+0x6c>)
 800101a:	2201      	movs	r2, #1
 800101c:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800101e:	2006      	movs	r0, #6
 8001020:	f003 fd03 	bl	8004a2a <HAL_NVIC_EnableIRQ>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40020000 	.word	0x40020000
 8001030:	200002c0 	.word	0x200002c0
 8001034:	200002bc 	.word	0x200002bc
 8001038:	40013c00 	.word	0x40013c00

0800103c <read_disruptor_energy>:

void read_disruptor_energy(int* energy){
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	osMutexAcquire(disruptor_eng_id, osWaitForever);
 8001044:	4b09      	ldr	r3, [pc, #36]	@ (800106c <read_disruptor_energy+0x30>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800104c:	4618      	mov	r0, r3
 800104e:	f006 fc28 	bl	80078a2 <osMutexAcquire>

	*energy = disruptor_energy;
 8001052:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <read_disruptor_energy+0x34>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	601a      	str	r2, [r3, #0]

	osMutexRelease(disruptor_eng_id);
 800105a:	4b04      	ldr	r3, [pc, #16]	@ (800106c <read_disruptor_energy+0x30>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f006 fc6a 	bl	8007938 <osMutexRelease>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200002d0 	.word	0x200002d0
 8001070:	2000031c 	.word	0x2000031c

08001074 <write_disruptor_energy>:

void write_disruptor_energy(int energy){
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	osMutexAcquire(disruptor_eng_id, osWaitForever);
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <write_disruptor_energy+0x54>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001084:	4618      	mov	r0, r3
 8001086:	f006 fc0c 	bl	80078a2 <osMutexAcquire>

//	disruptor_energy = energy;
	if(energy >= drone.energy_store->max_energy){
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <write_disruptor_energy+0x58>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	429a      	cmp	r2, r3
 8001094:	db05      	blt.n	80010a2 <write_disruptor_energy+0x2e>
		disruptor_energy = drone.energy_store->max_energy;
 8001096:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <write_disruptor_energy+0x58>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <write_disruptor_energy+0x5c>)
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e009      	b.n	80010b6 <write_disruptor_energy+0x42>
	}else if(energy <= 0){
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dc03      	bgt.n	80010b0 <write_disruptor_energy+0x3c>
		disruptor_energy = 0;
 80010a8:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <write_disruptor_energy+0x5c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	e002      	b.n	80010b6 <write_disruptor_energy+0x42>
	}else{
		disruptor_energy = energy;
 80010b0:	4a07      	ldr	r2, [pc, #28]	@ (80010d0 <write_disruptor_energy+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
	}

	osMutexRelease(disruptor_eng_id);
 80010b6:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <write_disruptor_energy+0x54>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f006 fc3c 	bl	8007938 <osMutexRelease>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200002d0 	.word	0x200002d0
 80010cc:	20000024 	.word	0x20000024
 80010d0:	2000031c 	.word	0x2000031c

080010d4 <disruptor_recharge>:

void disruptor_recharge(void* arg){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	int energy;
	uint32_t flags = osEventFlagsGet(event_group_id);
 80010dc:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <disruptor_recharge+0x4c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f006 fad2 	bl	800768a <osEventFlagsGet>
 80010e6:	60f8      	str	r0, [r7, #12]
	if(!(flags & DISRUPTOR_STATE)){
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0310 	and.w	r3, r3, #16
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d112      	bne.n	8001118 <disruptor_recharge+0x44>
		read_disruptor_energy(&energy);
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ffa0 	bl	800103c <read_disruptor_energy>
		write_disruptor_energy(energy + drone.energy_store->recharge_rate/10);
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <disruptor_recharge+0x50>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4a09      	ldr	r2, [pc, #36]	@ (8001128 <disruptor_recharge+0x54>)
 8001104:	fb82 1203 	smull	r1, r2, r2, r3
 8001108:	1092      	asrs	r2, r2, #2
 800110a:	17db      	asrs	r3, r3, #31
 800110c:	1ad2      	subs	r2, r2, r3
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ffae 	bl	8001074 <write_disruptor_energy>
	}
}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200002bc 	.word	0x200002bc
 8001124:	20000024 	.word	0x20000024
 8001128:	66666667 	.word	0x66666667

0800112c <disruptor_timer_end>:

void disruptor_timer_end(void* arg){
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	(void) &arg;
	osEventFlagsSet(event_group_id, DISRUPTOR_END);
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <disruptor_timer_end+0x1c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2120      	movs	r1, #32
 800113a:	4618      	mov	r0, r3
 800113c:	f006 fa32 	bl	80075a4 <osEventFlagsSet>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200002bc 	.word	0x200002bc

0800114c <disruptor_task>:

void disruptor_task(void* arg){
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	(void) &arg;
	// start timer when button is pushed, with varying length
	int energy;
	uint32_t flags, start, stop;
	write_disruptor_energy(drone.energy_store->max_energy); //mJ
 8001154:	4b3d      	ldr	r3, [pc, #244]	@ (800124c <disruptor_task+0x100>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff8a 	bl	8001074 <write_disruptor_energy>
	osTimerStart(disruptor_recharge_timer_id, 100);
 8001160:	4b3b      	ldr	r3, [pc, #236]	@ (8001250 <disruptor_task+0x104>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2164      	movs	r1, #100	@ 0x64
 8001166:	4618      	mov	r0, r3
 8001168:	f006 f95c 	bl	8007424 <osTimerStart>
	while(1){
		osSemaphoreAcquire(disruptor_start_sem_id, osWaitForever);
 800116c:	4b39      	ldr	r3, [pc, #228]	@ (8001254 <disruptor_task+0x108>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001174:	4618      	mov	r0, r3
 8001176:	f006 fca5 	bl	8007ac4 <osSemaphoreAcquire>
		while(1){
			flags = osEventFlagsGet(event_group_id);
 800117a:	4b37      	ldr	r3, [pc, #220]	@ (8001258 <disruptor_task+0x10c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f006 fa83 	bl	800768a <osEventFlagsGet>
 8001184:	61b8      	str	r0, [r7, #24]
			if(!(flags & DISRUPTOR_STATE)){
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	f003 0310 	and.w	r3, r3, #16
 800118c:	2b00      	cmp	r3, #0
 800118e:	d126      	bne.n	80011de <disruptor_task+0x92>
				// button pushed down
				read_disruptor_energy(&energy);
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff51 	bl	800103c <read_disruptor_energy>
				int ticks_to_run = (energy / drone.energy_store->recharge_rate)*1000;
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	4b2b      	ldr	r3, [pc, #172]	@ (800124c <disruptor_task+0x100>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80011a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011aa:	fb02 f303 	mul.w	r3, r2, r3
 80011ae:	613b      	str	r3, [r7, #16]
				if(ticks_to_run >= drone.disruptor->min_activation_energy){
 80011b0:	4b26      	ldr	r3, [pc, #152]	@ (800124c <disruptor_task+0x100>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	db45      	blt.n	8001248 <disruptor_task+0xfc>
					start = osKernelGetTickCount();
 80011bc:	f005 ffde 	bl	800717c <osKernelGetTickCount>
 80011c0:	61f8      	str	r0, [r7, #28]
					osTimerStart(disruptor_usage_timer_id, ticks_to_run);
 80011c2:	4b26      	ldr	r3, [pc, #152]	@ (800125c <disruptor_task+0x110>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4611      	mov	r1, r2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f006 f92a 	bl	8007424 <osTimerStart>
					osEventFlagsSet(event_group_id, DISRUPTOR_STATE);
 80011d0:	4b21      	ldr	r3, [pc, #132]	@ (8001258 <disruptor_task+0x10c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2110      	movs	r1, #16
 80011d6:	4618      	mov	r0, r3
 80011d8:	f006 f9e4 	bl	80075a4 <osEventFlagsSet>
 80011dc:	e030      	b.n	8001240 <disruptor_task+0xf4>
					break;
				}

			}else{
				// check for event flag WAIT
				if(flags & DISRUPTOR_END){
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	f003 0320 	and.w	r3, r3, #32
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d02b      	beq.n	8001240 <disruptor_task+0xf4>
					if(osTimerIsRunning(disruptor_usage_timer_id)) osTimerStop(disruptor_usage_timer_id);
 80011e8:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <disruptor_task+0x110>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f006 f97e 	bl	80074ee <osTimerIsRunning>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d004      	beq.n	8001202 <disruptor_task+0xb6>
 80011f8:	4b18      	ldr	r3, [pc, #96]	@ (800125c <disruptor_task+0x110>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f006 f93f 	bl	8007480 <osTimerStop>
					stop = osKernelGetTickCount();
 8001202:	f005 ffbb 	bl	800717c <osKernelGetTickCount>
 8001206:	6178      	str	r0, [r7, #20]
					osEventFlagsClear(event_group_id, DISRUPTOR_END);
 8001208:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <disruptor_task+0x10c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2120      	movs	r1, #32
 800120e:	4618      	mov	r0, r3
 8001210:	f006 fa0a 	bl	8007628 <osEventFlagsClear>
					read_disruptor_energy(&energy);
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff0f 	bl	800103c <read_disruptor_energy>
					energy -= (stop - start); // subtract total ticks ran from disruptor energy
 800121e:	69fa      	ldr	r2, [r7, #28]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
					write_disruptor_energy(energy);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff21 	bl	8001074 <write_disruptor_energy>
					osEventFlagsClear(event_group_id, DISRUPTOR_STATE);
 8001232:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <disruptor_task+0x10c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2110      	movs	r1, #16
 8001238:	4618      	mov	r0, r3
 800123a:	f006 f9f5 	bl	8007628 <osEventFlagsClear>
					break;
 800123e:	e004      	b.n	800124a <disruptor_task+0xfe>
				}
			}
			osDelay(100);
 8001240:	2064      	movs	r0, #100	@ 0x64
 8001242:	f006 f842 	bl	80072ca <osDelay>
			flags = osEventFlagsGet(event_group_id);
 8001246:	e798      	b.n	800117a <disruptor_task+0x2e>
					break;
 8001248:	bf00      	nop
		osSemaphoreAcquire(disruptor_start_sem_id, osWaitForever);
 800124a:	e78f      	b.n	800116c <disruptor_task+0x20>
 800124c:	20000024 	.word	0x20000024
 8001250:	200002dc 	.word	0x200002dc
 8001254:	200002c0 	.word	0x200002c0
 8001258:	200002bc 	.word	0x200002bc
 800125c:	200002d8 	.word	0x200002d8

08001260 <gyro_polling_task>:
		}
	}
}

void gyro_polling_task(void* arg){
 8001260:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001264:	b0ba      	sub	sp, #232	@ 0xe8
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
	(void) &arg;

	const double EXCESSIVE_ANGLE = 1.57;
 800126a:	a349      	add	r3, pc, #292	@ (adr r3, 8001390 <gyro_polling_task+0x130>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	int zero_range = 40;
 8001274:	2328      	movs	r3, #40	@ 0x28
 8001276:	67fb      	str	r3, [r7, #124]	@ 0x7c
	double T = 0.02;
 8001278:	a347      	add	r3, pc, #284	@ (adr r3, 8001398 <gyro_polling_task+0x138>)
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	float rads_ratio = 0.017453;
 8001282:	4b3f      	ldr	r3, [pc, #252]	@ (8001380 <gyro_polling_task+0x120>)
 8001284:	66fb      	str	r3, [r7, #108]	@ 0x6c
	double gyro_sensitivity = 17.50;
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	4b3e      	ldr	r3, [pc, #248]	@ (8001384 <gyro_polling_task+0x124>)
 800128c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	double conversion_const = (rads_ratio * gyro_sensitivity)/1000;
 8001290:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001292:	f7ff f93b 	bl	800050c <__aeabi_f2d>
 8001296:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800129a:	f7ff f98f 	bl	80005bc <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	4b37      	ldr	r3, [pc, #220]	@ (8001388 <gyro_polling_task+0x128>)
 80012ac:	f7ff fab0 	bl	8000810 <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

	double xy_dif[4];

	int16_t x_read;
	double x_rads_per_sec = 0;
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double x_rads = 0;
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
	double x_accel = 0;
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
	double x_velocity = 0;
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
	double x_pos = 0;
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0

	int16_t y_read;
	double y_rads_per_sec = 0;
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double y_rads = 0;
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	double y_accel = 0;
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
	double y_velocity = 0;
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
	double y_pos = 0;
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98

	double x_prev = 0;
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	double y_prev = 0;
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	double x_dif = 0;
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double y_dif = 0;
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	while(1){
		// no idea why this is functional when backwards
		uint32_t flags = osEventFlagsGet(event_group_id);
 8001360:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <gyro_polling_task+0x12c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f006 f990 	bl	800768a <osEventFlagsGet>
 800136a:	6378      	str	r0, [r7, #52]	@ 0x34
		if(flags & DISRUPTOR_STATE){
 800136c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	2b00      	cmp	r3, #0
 8001374:	d014      	beq.n	80013a0 <gyro_polling_task+0x140>
			osDelay(100);
 8001376:	2064      	movs	r0, #100	@ 0x64
 8001378:	f005 ffa7 	bl	80072ca <osDelay>
			continue;
 800137c:	e195      	b.n	80016aa <gyro_polling_task+0x44a>
 800137e:	bf00      	nop
 8001380:	3c8ef998 	.word	0x3c8ef998
 8001384:	40318000 	.word	0x40318000
 8001388:	408f4000 	.word	0x408f4000
 800138c:	200002bc 	.word	0x200002bc
 8001390:	51eb851f 	.word	0x51eb851f
 8001394:	3ff91eb8 	.word	0x3ff91eb8
 8001398:	47ae147b 	.word	0x47ae147b
 800139c:	3f947ae1 	.word	0x3f947ae1
		}

		y_read = Gyro_Get_X_Velocity();
 80013a0:	f001 fc7a 	bl	8002c98 <Gyro_Get_X_Velocity>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
		x_read = Gyro_Get_Y_Velocity();
 80013aa:	f001 fc41 	bl	8002c30 <Gyro_Get_Y_Velocity>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6

		if(x_read <= zero_range && x_read >= -zero_range) x_read = 0;
 80013b4:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	@ 0xe6
 80013b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80013ba:	429a      	cmp	r2, r3
 80013bc:	db08      	blt.n	80013d0 <gyro_polling_task+0x170>
 80013be:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	@ 0xe6
 80013c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80013c4:	425b      	negs	r3, r3
 80013c6:	429a      	cmp	r2, r3
 80013c8:	db02      	blt.n	80013d0 <gyro_polling_task+0x170>
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
		if(y_read <= zero_range && y_read >= -zero_range) y_read = 0;
 80013d0:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 80013d4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80013d6:	429a      	cmp	r2, r3
 80013d8:	db08      	blt.n	80013ec <gyro_polling_task+0x18c>
 80013da:	f9b7 20be 	ldrsh.w	r2, [r7, #190]	@ 0xbe
 80013de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80013e0:	425b      	negs	r3, r3
 80013e2:	429a      	cmp	r2, r3
 80013e4:	db02      	blt.n	80013ec <gyro_polling_task+0x18c>
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe

		x_rads_per_sec = x_read * conversion_const;
 80013ec:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	@ 0xe6
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f879 	bl	80004e8 <__aeabi_i2d>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80013fe:	f7ff f8dd 	bl	80005bc <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		y_rads_per_sec = y_read * conversion_const;
 800140a:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f86a 	bl	80004e8 <__aeabi_i2d>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800141c:	f7ff f8ce 	bl	80005bc <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

		x_rads += x_rads_per_sec * T;
 8001428:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800142c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001430:	f7ff f8c4 	bl	80005bc <__aeabi_dmul>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 800143c:	f7fe ff08 	bl	8000250 <__adddf3>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
		y_rads += y_rads_per_sec * T;
 8001448:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800144c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001450:	f7ff f8b4 	bl	80005bc <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800145c:	f7fe fef8 	bl	8000250 <__adddf3>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0

		if(x_rads > EXCESSIVE_ANGLE || x_rads < -EXCESSIVE_ANGLE || y_rads > EXCESSIVE_ANGLE || y_rads < -EXCESSIVE_ANGLE){
 8001468:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800146c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001470:	f7ff fb34 	bl	8000adc <__aeabi_dcmpgt>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d128      	bne.n	80014cc <gyro_polling_task+0x26c>
 800147a:	f8d7 4080 	ldr.w	r4, [r7, #128]	@ 0x80
 800147e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001482:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001486:	4622      	mov	r2, r4
 8001488:	462b      	mov	r3, r5
 800148a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 800148e:	f7ff fb07 	bl	8000aa0 <__aeabi_dcmplt>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d119      	bne.n	80014cc <gyro_polling_task+0x26c>
 8001498:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800149c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80014a0:	f7ff fb1c 	bl	8000adc <__aeabi_dcmpgt>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d110      	bne.n	80014cc <gyro_polling_task+0x26c>
 80014aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014b4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80014c2:	f7ff faed 	bl	8000aa0 <__aeabi_dcmplt>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <gyro_polling_task+0x278>
			osEventFlagsSet(event_group_id, GAME_OVER_LOSS);
 80014cc:	4b77      	ldr	r3, [pc, #476]	@ (80016ac <gyro_polling_task+0x44c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2140      	movs	r1, #64	@ 0x40
 80014d2:	4618      	mov	r0, r3
 80014d4:	f006 f866 	bl	80075a4 <osEventFlagsSet>
		}

		x_accel = physics.gravity * sin(x_rads);
 80014d8:	4b75      	ldr	r3, [pc, #468]	@ (80016b0 <gyro_polling_task+0x450>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f803 	bl	80004e8 <__aeabi_i2d>
 80014e2:	4680      	mov	r8, r0
 80014e4:	4689      	mov	r9, r1
 80014e6:	ed97 0b36 	vldr	d0, [r7, #216]	@ 0xd8
 80014ea:	f00c faf5 	bl	800dad8 <sin>
 80014ee:	ec53 2b10 	vmov	r2, r3, d0
 80014f2:	4640      	mov	r0, r8
 80014f4:	4649      	mov	r1, r9
 80014f6:	f7ff f861 	bl	80005bc <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
		y_accel = physics.gravity * sin(y_rads);
 8001502:	4b6b      	ldr	r3, [pc, #428]	@ (80016b0 <gyro_polling_task+0x450>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe ffee 	bl	80004e8 <__aeabi_i2d>
 800150c:	4680      	mov	r8, r0
 800150e:	4689      	mov	r9, r1
 8001510:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8001514:	f00c fae0 	bl	800dad8 <sin>
 8001518:	ec53 2b10 	vmov	r2, r3, d0
 800151c:	4640      	mov	r0, r8
 800151e:	4649      	mov	r1, r9
 8001520:	f7ff f84c 	bl	80005bc <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

		// if x or y collides with an object, reset its velocity. TRY ACCELL INSTEAD?
		if(flags & COLLISION_X){
 800152c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	2b00      	cmp	r3, #0
 8001534:	d011      	beq.n	800155a <gyro_polling_task+0x2fa>
			osEventFlagsClear(event_group_id, COLLISION_X);
 8001536:	4b5d      	ldr	r3, [pc, #372]	@ (80016ac <gyro_polling_task+0x44c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2104      	movs	r1, #4
 800153c:	4618      	mov	r0, r3
 800153e:	f006 f873 	bl	8007628 <osEventFlagsClear>
			x_velocity = 0;
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
			x_accel = 0;
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
		}

		if(flags & COLLISION_Y){
 800155a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d011      	beq.n	8001588 <gyro_polling_task+0x328>
			osEventFlagsClear(event_group_id, COLLISION_Y);
 8001564:	4b51      	ldr	r3, [pc, #324]	@ (80016ac <gyro_polling_task+0x44c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2108      	movs	r1, #8
 800156a:	4618      	mov	r0, r3
 800156c:	f006 f85c 	bl	8007628 <osEventFlagsClear>
			y_velocity = 0;
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
			y_accel = 0;
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
		}

		if(flags & GAME_RESET){
 8001588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800158a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158e:	2b00      	cmp	r3, #0
 8001590:	d017      	beq.n	80015c2 <gyro_polling_task+0x362>
//			osEventFlagsClear(event_group_id, GAME_RESET);
			x_velocity = 0;
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
			x_accel = 0;
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
			y_velocity = 0;
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
			y_accel = 0;
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
		}

		x_velocity += x_accel * T;
 80015c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015c6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80015ca:	f7fe fff7 	bl	80005bc <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80015d6:	f7fe fe3b 	bl	8000250 <__adddf3>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
		y_velocity += y_accel * T;
 80015e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015e6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80015ea:	f7fe ffe7 	bl	80005bc <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80015f6:	f7fe fe2b 	bl	8000250 <__adddf3>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

		x_pos += x_velocity * T;
 8001602:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001606:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800160a:	f7fe ffd7 	bl	80005bc <__aeabi_dmul>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001616:	f7fe fe1b 	bl	8000250 <__adddf3>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
		y_pos += y_velocity * T;
 8001622:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001626:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800162a:	f7fe ffc7 	bl	80005bc <__aeabi_dmul>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001636:	f7fe fe0b 	bl	8000250 <__adddf3>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98

		x_dif = x_pos - x_prev;
 8001642:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001646:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800164a:	f7fe fdff 	bl	800024c <__aeabi_dsub>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		y_dif = y_pos - y_prev;
 8001656:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800165a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800165e:	f7fe fdf5 	bl	800024c <__aeabi_dsub>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

		xy_dif[0] = x_dif;
 800166a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800166e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		xy_dif[1] = y_dif;
 8001672:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001676:	e9c7 2306 	strd	r2, r3, [r7, #24]
		xy_dif[2] = x_velocity;
 800167a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800167e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		xy_dif[3] = y_velocity;
 8001682:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001686:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

		write_xy_pos_dif(xy_dif);
 800168a:	f107 0310 	add.w	r3, r7, #16
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fc22 	bl	8000ed8 <write_xy_pos_dif>

		x_prev = x_pos;
 8001694:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001698:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
		y_prev = y_pos;
 800169c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80016a0:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88

		osDelay(20);
 80016a4:	2014      	movs	r0, #20
 80016a6:	f005 fe10 	bl	80072ca <osDelay>
	while(1){
 80016aa:	e659      	b.n	8001360 <gyro_polling_task+0x100>
 80016ac:	200002bc 	.word	0x200002bc
 80016b0:	20000000 	.word	0x20000000

080016b4 <generate_maze>:
	}
}

void generate_maze(void){
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
	//only malloc maze once at first init
	if(maze == NULL){
 80016ba:	4b40      	ldr	r3, [pc, #256]	@ (80017bc <generate_maze+0x108>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d124      	bne.n	800170c <generate_maze+0x58>
		maze = malloc(sizeof(Cell*) * maze_config.size->width);
 80016c2:	4b3f      	ldr	r3, [pc, #252]	@ (80017c0 <generate_maze+0x10c>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00b ff20 	bl	800d510 <malloc>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b39      	ldr	r3, [pc, #228]	@ (80017bc <generate_maze+0x108>)
 80016d6:	601a      	str	r2, [r3, #0]

		for(int i=0; i<maze_config.size->width; i++) {
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	e010      	b.n	8001700 <generate_maze+0x4c>
			maze[i] = malloc(sizeof(Cell) * maze_config.size->height);
 80016de:	4b38      	ldr	r3, [pc, #224]	@ (80017c0 <generate_maze+0x10c>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	0059      	lsls	r1, r3, #1
 80016e6:	4b35      	ldr	r3, [pc, #212]	@ (80017bc <generate_maze+0x108>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	18d4      	adds	r4, r2, r3
 80016f0:	4608      	mov	r0, r1
 80016f2:	f00b ff0d 	bl	800d510 <malloc>
 80016f6:	4603      	mov	r3, r0
 80016f8:	6023      	str	r3, [r4, #0]
		for(int i=0; i<maze_config.size->width; i++) {
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	4b2f      	ldr	r3, [pc, #188]	@ (80017c0 <generate_maze+0x10c>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbe8      	blt.n	80016de <generate_maze+0x2a>
		}
	}
//	bool hard_edged = maze_config.hard_edged;
	uint32_t rand;
	for(int i=0; i<maze_config.size->width; i++){
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	e048      	b.n	80017a4 <generate_maze+0xf0>
		for(int j=0; j<maze_config.size->height; j++){
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	e03c      	b.n	8001792 <generate_maze+0xde>

			osStatus_t status = HAL_RNG_GenerateRandomNumber(hrng_ptr, &rand);
 8001718:	4b2a      	ldr	r3, [pc, #168]	@ (80017c4 <generate_maze+0x110>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	1d3a      	adds	r2, r7, #4
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f004 fd89 	bl	8006238 <HAL_RNG_GenerateRandomNumber>
 8001726:	4603      	mov	r3, r0
 8001728:	60bb      	str	r3, [r7, #8]
			if(status != osOK) while(1);
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <generate_maze+0x80>
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <generate_maze+0x7c>
			maze[i][j].top = rand % 2;
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4b21      	ldr	r3, [pc, #132]	@ (80017bc <generate_maze+0x108>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	460a      	mov	r2, r1
 800174a:	f002 0201 	and.w	r2, r2, #1
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]

			// eventually crash here, unsure why
			status = HAL_RNG_GenerateRandomNumber(hrng_ptr, &rand);
 8001752:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <generate_maze+0x110>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	1d3a      	adds	r2, r7, #4
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f004 fd6c 	bl	8006238 <HAL_RNG_GenerateRandomNumber>
 8001760:	4603      	mov	r3, r0
 8001762:	60bb      	str	r3, [r7, #8]
			if(status != osOK) while(1);
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <generate_maze+0xba>
 800176a:	bf00      	nop
 800176c:	e7fd      	b.n	800176a <generate_maze+0xb6>
			maze[i][j].right = rand % 2;
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <generate_maze+0x108>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	460a      	mov	r2, r1
 8001784:	f002 0201 	and.w	r2, r2, #1
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	705a      	strb	r2, [r3, #1]
		for(int j=0; j<maze_config.size->height; j++){
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3301      	adds	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <generate_maze+0x10c>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	429a      	cmp	r2, r3
 800179c:	dbbc      	blt.n	8001718 <generate_maze+0x64>
	for(int i=0; i<maze_config.size->width; i++){
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	3301      	adds	r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <generate_maze+0x10c>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	dbb0      	blt.n	8001712 <generate_maze+0x5e>
		}
	}
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	371c      	adds	r7, #28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd90      	pop	{r4, r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000318 	.word	0x20000318
 80017c0:	2000005c 	.word	0x2000005c
 80017c4:	200002e4 	.word	0x200002e4

080017c8 <get_nearby_walls>:

void get_nearby_walls(int x, int y, bool* walls){
 80017c8:	b480      	push	{r7}
 80017ca:	b087      	sub	sp, #28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
	if(x < 0 || y < 0 || x >= maze_config.size->width || y >= maze_config.size->height){
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0e      	blt.n	80017f8 <get_nearby_walls+0x30>
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	db0b      	blt.n	80017f8 <get_nearby_walls+0x30>
 80017e0:	4b49      	ldr	r3, [pc, #292]	@ (8001908 <get_nearby_walls+0x140>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	da05      	bge.n	80017f8 <get_nearby_walls+0x30>
 80017ec:	4b46      	ldr	r3, [pc, #280]	@ (8001908 <get_nearby_walls+0x140>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	db0f      	blt.n	8001818 <get_nearby_walls+0x50>
		walls[0] = false;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
		walls[1] = false;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3301      	adds	r3, #1
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
		walls[2] = false;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3302      	adds	r3, #2
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
		walls[3] = false;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3303      	adds	r3, #3
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
		return;
 8001816:	e071      	b.n	80018fc <get_nearby_walls+0x134>
	}

	bool left, right, top, bottom;
	bool h_e = maze_config.hard_edged;
 8001818:	4b3b      	ldr	r3, [pc, #236]	@ (8001908 <get_nearby_walls+0x140>)
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf14      	ite	ne
 8001820:	2301      	movne	r3, #1
 8001822:	2300      	moveq	r3, #0
 8001824:	74fb      	strb	r3, [r7, #19]
	//left
	if(h_e && x == 0){
 8001826:	7cfb      	ldrb	r3, [r7, #19]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <get_nearby_walls+0x70>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d102      	bne.n	8001838 <get_nearby_walls+0x70>
		left = true;
 8001832:	2301      	movs	r3, #1
 8001834:	75fb      	strb	r3, [r7, #23]
 8001836:	e00d      	b.n	8001854 <get_nearby_walls+0x8c>
	}else{
		left = maze[x-1][y].right;
 8001838:	4b34      	ldr	r3, [pc, #208]	@ (800190c <get_nearby_walls+0x144>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001842:	3b01      	subs	r3, #1
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	785b      	ldrb	r3, [r3, #1]
 8001852:	75fb      	strb	r3, [r7, #23]
	}

	//right
	if(h_e && x == (maze_config.size->width - 1)){
 8001854:	7cfb      	ldrb	r3, [r7, #19]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d009      	beq.n	800186e <get_nearby_walls+0xa6>
 800185a:	4b2b      	ldr	r3, [pc, #172]	@ (8001908 <get_nearby_walls+0x140>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3b01      	subs	r3, #1
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	429a      	cmp	r2, r3
 8001866:	d102      	bne.n	800186e <get_nearby_walls+0xa6>
		right = true;
 8001868:	2301      	movs	r3, #1
 800186a:	75bb      	strb	r3, [r7, #22]
 800186c:	e00a      	b.n	8001884 <get_nearby_walls+0xbc>
	}else{
		right = maze[x][y].right;
 800186e:	4b27      	ldr	r3, [pc, #156]	@ (800190c <get_nearby_walls+0x144>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	785b      	ldrb	r3, [r3, #1]
 8001882:	75bb      	strb	r3, [r7, #22]
	}

	//top
	if(h_e && y == 0){
 8001884:	7cfb      	ldrb	r3, [r7, #19]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <get_nearby_walls+0xce>
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <get_nearby_walls+0xce>
		top = true;
 8001890:	2301      	movs	r3, #1
 8001892:	757b      	strb	r3, [r7, #21]
 8001894:	e00a      	b.n	80018ac <get_nearby_walls+0xe4>
	}else{
		top = maze[x][y].top;
 8001896:	4b1d      	ldr	r3, [pc, #116]	@ (800190c <get_nearby_walls+0x144>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	757b      	strb	r3, [r7, #21]
	}

	//bottom
	if(h_e && y == (maze_config.size->height - 1)){
 80018ac:	7cfb      	ldrb	r3, [r7, #19]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <get_nearby_walls+0xfe>
 80018b2:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <get_nearby_walls+0x140>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d102      	bne.n	80018c6 <get_nearby_walls+0xfe>
		bottom = true;
 80018c0:	2301      	movs	r3, #1
 80018c2:	753b      	strb	r3, [r7, #20]
 80018c4:	e00b      	b.n	80018de <get_nearby_walls+0x116>
	}else{
		bottom = maze[x][y+1].top;
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <get_nearby_walls+0x144>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	3301      	adds	r3, #1
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	753b      	strb	r3, [r7, #20]
	}

	walls[0] = left;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7dfa      	ldrb	r2, [r7, #23]
 80018e2:	701a      	strb	r2, [r3, #0]
	walls[1] = right;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3301      	adds	r3, #1
 80018e8:	7dba      	ldrb	r2, [r7, #22]
 80018ea:	701a      	strb	r2, [r3, #0]
	walls[2] = top;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3302      	adds	r3, #2
 80018f0:	7d7a      	ldrb	r2, [r7, #21]
 80018f2:	701a      	strb	r2, [r3, #0]
	walls[3] = bottom;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3303      	adds	r3, #3
 80018f8:	7d3a      	ldrb	r2, [r7, #20]
 80018fa:	701a      	strb	r2, [r3, #0]
}
 80018fc:	371c      	adds	r7, #28
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	2000005c 	.word	0x2000005c
 800190c:	20000318 	.word	0x20000318

08001910 <generate_features>:

void generate_features(void){
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
	uint32_t rand;
	maze_config.waypoints->locations_list = malloc(sizeof(xy_pair) * maze_config.waypoints->number);
 8001916:	4b73      	ldr	r3, [pc, #460]	@ (8001ae4 <generate_features+0x1d4>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	461a      	mov	r2, r3
 8001928:	4b6e      	ldr	r3, [pc, #440]	@ (8001ae4 <generate_features+0x1d4>)
 800192a:	699c      	ldr	r4, [r3, #24]
 800192c:	4610      	mov	r0, r2
 800192e:	f00b fdef 	bl	800d510 <malloc>
 8001932:	4603      	mov	r3, r0
 8001934:	60e3      	str	r3, [r4, #12]
	for(int i=0; i<maze_config.waypoints->number;i++){
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e057      	b.n	80019ec <generate_features+0xdc>
		HAL_RNG_GenerateRandomNumber(hrng_ptr, &rand);
 800193c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ae8 <generate_features+0x1d8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	1d3a      	adds	r2, r7, #4
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f004 fc77 	bl	8006238 <HAL_RNG_GenerateRandomNumber>
		maze_config.waypoints->locations_list[i].x = (rand % maze_config.size->width)*maze_config.cell_size + maze_config.cell_size/2;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a65      	ldr	r2, [pc, #404]	@ (8001ae4 <generate_features+0x1d4>)
 800194e:	6892      	ldr	r2, [r2, #8]
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	fbb3 f1f2 	udiv	r1, r3, r2
 8001956:	fb01 f202 	mul.w	r2, r1, r2
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	4a61      	ldr	r2, [pc, #388]	@ (8001ae4 <generate_features+0x1d4>)
 800195e:	6852      	ldr	r2, [r2, #4]
 8001960:	fb03 f202 	mul.w	r2, r3, r2
 8001964:	4b5f      	ldr	r3, [pc, #380]	@ (8001ae4 <generate_features+0x1d4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	0fd9      	lsrs	r1, r3, #31
 800196a:	440b      	add	r3, r1
 800196c:	105b      	asrs	r3, r3, #1
 800196e:	18d0      	adds	r0, r2, r3
 8001970:	4b5c      	ldr	r3, [pc, #368]	@ (8001ae4 <generate_features+0x1d4>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	68d9      	ldr	r1, [r3, #12]
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	4602      	mov	r2, r0
 8001984:	601a      	str	r2, [r3, #0]

		HAL_RNG_GenerateRandomNumber(hrng_ptr, &rand);
 8001986:	4b58      	ldr	r3, [pc, #352]	@ (8001ae8 <generate_features+0x1d8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	1d3a      	adds	r2, r7, #4
 800198c:	4611      	mov	r1, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f004 fc52 	bl	8006238 <HAL_RNG_GenerateRandomNumber>
		maze_config.waypoints->locations_list[i].y = (rand % maze_config.size->height)*maze_config.cell_size + maze_config.cell_size/2;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a53      	ldr	r2, [pc, #332]	@ (8001ae4 <generate_features+0x1d4>)
 8001998:	6892      	ldr	r2, [r2, #8]
 800199a:	6852      	ldr	r2, [r2, #4]
 800199c:	fbb3 f1f2 	udiv	r1, r3, r2
 80019a0:	fb01 f202 	mul.w	r2, r1, r2
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	4a4f      	ldr	r2, [pc, #316]	@ (8001ae4 <generate_features+0x1d4>)
 80019a8:	6852      	ldr	r2, [r2, #4]
 80019aa:	fb03 f202 	mul.w	r2, r3, r2
 80019ae:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae4 <generate_features+0x1d4>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	0fd9      	lsrs	r1, r3, #31
 80019b4:	440b      	add	r3, r1
 80019b6:	105b      	asrs	r3, r3, #1
 80019b8:	18d0      	adds	r0, r2, r3
 80019ba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae4 <generate_features+0x1d4>)
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	68d9      	ldr	r1, [r3, #12]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	4602      	mov	r2, r0
 80019ce:	605a      	str	r2, [r3, #4]
		maze_config.waypoints->locations_list[i].collected = false;
 80019d0:	4b44      	ldr	r3, [pc, #272]	@ (8001ae4 <generate_features+0x1d4>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	68d9      	ldr	r1, [r3, #12]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	2200      	movs	r2, #0
 80019e4:	721a      	strb	r2, [r3, #8]
	for(int i=0; i<maze_config.waypoints->number;i++){
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3301      	adds	r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae4 <generate_features+0x1d4>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dba1      	blt.n	800193c <generate_features+0x2c>
	}

	maze_config.holes->locations_list = malloc(sizeof(xy_pair) * maze_config.holes->number);
 80019f8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae4 <generate_features+0x1d4>)
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b36      	ldr	r3, [pc, #216]	@ (8001ae4 <generate_features+0x1d4>)
 8001a0c:	69dc      	ldr	r4, [r3, #28]
 8001a0e:	4610      	mov	r0, r2
 8001a10:	f00b fd7e 	bl	800d510 <malloc>
 8001a14:	4603      	mov	r3, r0
 8001a16:	60a3      	str	r3, [r4, #8]
	for(int i=0; i<maze_config.holes->number;i++){
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	e057      	b.n	8001ace <generate_features+0x1be>
		HAL_RNG_GenerateRandomNumber(hrng_ptr, &rand);
 8001a1e:	4b32      	ldr	r3, [pc, #200]	@ (8001ae8 <generate_features+0x1d8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	1d3a      	adds	r2, r7, #4
 8001a24:	4611      	mov	r1, r2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f004 fc06 	bl	8006238 <HAL_RNG_GenerateRandomNumber>
		maze_config.holes->locations_list[i].x = (rand % maze_config.size->width)*maze_config.cell_size + maze_config.cell_size/2;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae4 <generate_features+0x1d4>)
 8001a30:	6892      	ldr	r2, [r2, #8]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a38:	fb01 f202 	mul.w	r2, r1, r2
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	4a29      	ldr	r2, [pc, #164]	@ (8001ae4 <generate_features+0x1d4>)
 8001a40:	6852      	ldr	r2, [r2, #4]
 8001a42:	fb03 f202 	mul.w	r2, r3, r2
 8001a46:	4b27      	ldr	r3, [pc, #156]	@ (8001ae4 <generate_features+0x1d4>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	0fd9      	lsrs	r1, r3, #31
 8001a4c:	440b      	add	r3, r1
 8001a4e:	105b      	asrs	r3, r3, #1
 8001a50:	18d0      	adds	r0, r2, r3
 8001a52:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <generate_features+0x1d4>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	6899      	ldr	r1, [r3, #8]
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	4602      	mov	r2, r0
 8001a66:	601a      	str	r2, [r3, #0]

		HAL_RNG_GenerateRandomNumber(hrng_ptr, &rand);
 8001a68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae8 <generate_features+0x1d8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	1d3a      	adds	r2, r7, #4
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f004 fbe1 	bl	8006238 <HAL_RNG_GenerateRandomNumber>
		maze_config.holes->locations_list[i].y = (rand % maze_config.size->height)*maze_config.cell_size + maze_config.cell_size/2;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae4 <generate_features+0x1d4>)
 8001a7a:	6892      	ldr	r2, [r2, #8]
 8001a7c:	6852      	ldr	r2, [r2, #4]
 8001a7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a82:	fb01 f202 	mul.w	r2, r1, r2
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	4a16      	ldr	r2, [pc, #88]	@ (8001ae4 <generate_features+0x1d4>)
 8001a8a:	6852      	ldr	r2, [r2, #4]
 8001a8c:	fb03 f202 	mul.w	r2, r3, r2
 8001a90:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <generate_features+0x1d4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	0fd9      	lsrs	r1, r3, #31
 8001a96:	440b      	add	r3, r1
 8001a98:	105b      	asrs	r3, r3, #1
 8001a9a:	18d0      	adds	r0, r2, r3
 8001a9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <generate_features+0x1d4>)
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	6899      	ldr	r1, [r3, #8]
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	4602      	mov	r2, r0
 8001ab0:	605a      	str	r2, [r3, #4]
		maze_config.holes->locations_list[i].collected = false;
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <generate_features+0x1d4>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	6899      	ldr	r1, [r3, #8]
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	721a      	strb	r2, [r3, #8]
	for(int i=0; i<maze_config.holes->number;i++){
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	3301      	adds	r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <generate_features+0x1d4>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	dba1      	blt.n	8001a1e <generate_features+0x10e>
	}
}
 8001ada:	bf00      	nop
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd90      	pop	{r4, r7, pc}
 8001ae4:	2000005c 	.word	0x2000005c
 8001ae8:	200002e4 	.word	0x200002e4

08001aec <game_time_decrement>:

void game_time_decrement(void* arg){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	osMutexAcquire(game_time_mutex_id, osWaitForever);
 8001af4:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <game_time_decrement+0x58>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001afc:	4618      	mov	r0, r3
 8001afe:	f005 fed0 	bl	80078a2 <osMutexAcquire>

	game_time -= TICKRATE;
 8001b02:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <game_time_decrement+0x5c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3b64      	subs	r3, #100	@ 0x64
 8001b08:	4a0f      	ldr	r2, [pc, #60]	@ (8001b48 <game_time_decrement+0x5c>)
 8001b0a:	6013      	str	r3, [r2, #0]
	if(game_time <= 0){
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <game_time_decrement+0x5c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	dc0d      	bgt.n	8001b30 <game_time_decrement+0x44>
		game_time = 0;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <game_time_decrement+0x5c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
		osTimerStop(game_timer_id);
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <game_time_decrement+0x60>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f005 fcae 	bl	8007480 <osTimerStop>
		osEventFlagsSet(event_group_id, GAME_OVER_LOSS);
 8001b24:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <game_time_decrement+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2140      	movs	r1, #64	@ 0x40
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f005 fd3a 	bl	80075a4 <osEventFlagsSet>
	}

	osMutexRelease(game_time_mutex_id);
 8001b30:	4b04      	ldr	r3, [pc, #16]	@ (8001b44 <game_time_decrement+0x58>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f005 feff 	bl	8007938 <osMutexRelease>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200002d4 	.word	0x200002d4
 8001b48:	20000324 	.word	0x20000324
 8001b4c:	200002e0 	.word	0x200002e0
 8001b50:	200002bc 	.word	0x200002bc

08001b54 <read_game_time>:

void read_game_time(int* time){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	osMutexAcquire(game_time_mutex_id, osWaitForever);
 8001b5c:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <read_game_time+0x30>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b64:	4618      	mov	r0, r3
 8001b66:	f005 fe9c 	bl	80078a2 <osMutexAcquire>

	*time = game_time;
 8001b6a:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <read_game_time+0x34>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	601a      	str	r2, [r3, #0]

	osMutexRelease(game_time_mutex_id);
 8001b72:	4b04      	ldr	r3, [pc, #16]	@ (8001b84 <read_game_time+0x30>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f005 fede 	bl	8007938 <osMutexRelease>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200002d4 	.word	0x200002d4
 8001b88:	20000324 	.word	0x20000324

08001b8c <write_game_time>:

void write_game_time(int time){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	osMutexAcquire(game_time_mutex_id, osWaitForever);
 8001b94:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <write_game_time+0x30>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f005 fe80 	bl	80078a2 <osMutexAcquire>

	game_time = time;
 8001ba2:	4a07      	ldr	r2, [pc, #28]	@ (8001bc0 <write_game_time+0x34>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6013      	str	r3, [r2, #0]

	osMutexRelease(game_time_mutex_id);
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <write_game_time+0x30>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f005 fec3 	bl	8007938 <osMutexRelease>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200002d4 	.word	0x200002d4
 8001bc0:	20000324 	.word	0x20000324

08001bc4 <game_end>:

void game_end(bool win){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
	osTimerStop(game_timer_id);
 8001bce:	4b1c      	ldr	r3, [pc, #112]	@ (8001c40 <game_end+0x7c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f005 fc54 	bl	8007480 <osTimerStop>
	if(win){
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d006      	beq.n	8001bec <game_end+0x28>
		osEventFlagsSet(event_group_id, GAME_OVER_WIN);
 8001bde:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <game_end+0x80>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2180      	movs	r1, #128	@ 0x80
 8001be4:	4618      	mov	r0, r3
 8001be6:	f005 fcdd 	bl	80075a4 <osEventFlagsSet>
 8001bea:	e005      	b.n	8001bf8 <game_end+0x34>
	}else{
		osEventFlagsSet(event_group_id, GAME_OVER_LOSS);
 8001bec:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <game_end+0x80>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2140      	movs	r1, #64	@ 0x40
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f005 fcd6 	bl	80075a4 <osEventFlagsSet>
	}
	osEventFlagsClear(event_group_id, MAZE_GENERATED);
 8001bf8:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <game_end+0x80>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f005 fd12 	bl	8007628 <osEventFlagsClear>
	// graphic

	osDelay(3000);
 8001c04:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001c08:	f005 fb5f 	bl	80072ca <osDelay>
	if(!win) game_score = 0;
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f083 0301 	eor.w	r3, r3, #1
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <game_end+0x5a>
 8001c18:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <game_end+0x84>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
	write_disruptor_energy(drone.energy_store->max_energy);
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <game_end+0x88>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fa25 	bl	8001074 <write_disruptor_energy>
	osEventFlagsSet(event_group_id, GAME_RESET);
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <game_end+0x80>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c32:	4618      	mov	r0, r3
 8001c34:	f005 fcb6 	bl	80075a4 <osEventFlagsSet>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200002e0 	.word	0x200002e0
 8001c44:	200002bc 	.word	0x200002bc
 8001c48:	20000320 	.word	0x20000320
 8001c4c:	20000024 	.word	0x20000024

08001c50 <game_comp_task>:

void game_comp_task(void* arg){
 8001c50:	b5b0      	push	{r4, r5, r7, lr}
 8001c52:	ed2d 8b02 	vpush	{d8}
 8001c56:	b0aa      	sub	sp, #168	@ 0xa8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	(void) &arg;

	while(1){
		osEventFlagsClear(event_group_id, GAME_OVER_LOSS | GAME_OVER_WIN | GAME_RESET);
 8001c5c:	4b73      	ldr	r3, [pc, #460]	@ (8001e2c <game_comp_task+0x1dc>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f005 fcdf 	bl	8007628 <osEventFlagsClear>

		// generate maze first
		generate_maze();
 8001c6a:	f7ff fd23 	bl	80016b4 <generate_maze>
		generate_features();
 8001c6e:	f7ff fe4f 	bl	8001910 <generate_features>
		double xy_dif[4];
		double xy_pos[2];

		// random ball spawn location, checking for spawning on a hole
		uint32_t rand;
		bool invalid_spawn_pos = true;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		while(invalid_spawn_pos){
 8001c78:	e083      	b.n	8001d82 <game_comp_task+0x132>
			invalid_spawn_pos = false;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			HAL_RNG_GenerateRandomNumber(hrng_ptr, &rand);
 8001c80:	4b6b      	ldr	r3, [pc, #428]	@ (8001e30 <game_comp_task+0x1e0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001c88:	4611      	mov	r1, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f004 fad4 	bl	8006238 <HAL_RNG_GenerateRandomNumber>
			xy_pos[0] = (rand % maze_config.size->width)*maze_config.cell_size + maze_config.cell_size/2;
 8001c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c92:	4a68      	ldr	r2, [pc, #416]	@ (8001e34 <game_comp_task+0x1e4>)
 8001c94:	6892      	ldr	r2, [r2, #8]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c9c:	fb01 f202 	mul.w	r2, r1, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	4a64      	ldr	r2, [pc, #400]	@ (8001e34 <game_comp_task+0x1e4>)
 8001ca4:	6852      	ldr	r2, [r2, #4]
 8001ca6:	fb03 f202 	mul.w	r2, r3, r2
 8001caa:	4b62      	ldr	r3, [pc, #392]	@ (8001e34 <game_comp_task+0x1e4>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	0fd9      	lsrs	r1, r3, #31
 8001cb0:	440b      	add	r3, r1
 8001cb2:	105b      	asrs	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc06 	bl	80004c8 <__aeabi_ui2d>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			HAL_RNG_GenerateRandomNumber(hrng_ptr, &rand);
 8001cc4:	4b5a      	ldr	r3, [pc, #360]	@ (8001e30 <game_comp_task+0x1e0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f004 fab2 	bl	8006238 <HAL_RNG_GenerateRandomNumber>
			xy_pos[1] = (rand % maze_config.size->width)*maze_config.cell_size + maze_config.cell_size/2;
 8001cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cd6:	4a57      	ldr	r2, [pc, #348]	@ (8001e34 <game_comp_task+0x1e4>)
 8001cd8:	6892      	ldr	r2, [r2, #8]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ce0:	fb01 f202 	mul.w	r2, r1, r2
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	4a53      	ldr	r2, [pc, #332]	@ (8001e34 <game_comp_task+0x1e4>)
 8001ce8:	6852      	ldr	r2, [r2, #4]
 8001cea:	fb03 f202 	mul.w	r2, r3, r2
 8001cee:	4b51      	ldr	r3, [pc, #324]	@ (8001e34 <game_comp_task+0x1e4>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	0fd9      	lsrs	r1, r3, #31
 8001cf4:	440b      	add	r3, r1
 8001cf6:	105b      	asrs	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fbe4 	bl	80004c8 <__aeabi_ui2d>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

			for(int i=0; i<maze_config.holes->number; i++){
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001d0e:	e031      	b.n	8001d74 <game_comp_task+0x124>
				if(maze_config.holes->locations_list[i].x == xy_pos[0] && maze_config.holes->locations_list[i].y == xy_pos[1]){
 8001d10:	4b48      	ldr	r3, [pc, #288]	@ (8001e34 <game_comp_task+0x1e4>)
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	6899      	ldr	r1, [r3, #8]
 8001d16:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fbde 	bl	80004e8 <__aeabi_i2d>
 8001d2c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d30:	f7fe feac 	bl	8000a8c <__aeabi_dcmpeq>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d017      	beq.n	8001d6a <game_comp_task+0x11a>
 8001d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e34 <game_comp_task+0x1e4>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	6899      	ldr	r1, [r3, #8]
 8001d40:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fbc9 	bl	80004e8 <__aeabi_i2d>
 8001d56:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d5a:	f7fe fe97 	bl	8000a8c <__aeabi_dcmpeq>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <game_comp_task+0x11a>
					invalid_spawn_pos = true;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			for(int i=0; i<maze_config.holes->number; i++){
 8001d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001d74:	4b2f      	ldr	r3, [pc, #188]	@ (8001e34 <game_comp_task+0x1e4>)
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	dbc6      	blt.n	8001d10 <game_comp_task+0xc0>
		while(invalid_spawn_pos){
 8001d82:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f47f af77 	bne.w	8001c7a <game_comp_task+0x2a>
				}
			}
		}
		write_xy_position(xy_pos);
 8001d8c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff f8f7 	bl	8000f84 <write_xy_position>
		write_game_time(TOTAL_TIME);
 8001d96:	f247 5030 	movw	r0, #30000	@ 0x7530
 8001d9a:	f7ff fef7 	bl	8001b8c <write_game_time>
		osTimerStart(game_timer_id, TICKRATE);
 8001d9e:	4b26      	ldr	r3, [pc, #152]	@ (8001e38 <game_comp_task+0x1e8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2164      	movs	r1, #100	@ 0x64
 8001da4:	4618      	mov	r0, r3
 8001da6:	f005 fb3d 	bl	8007424 <osTimerStart>
		osEventFlagsSet(event_group_id, MAZE_GENERATED);
 8001daa:	4b20      	ldr	r3, [pc, #128]	@ (8001e2c <game_comp_task+0x1dc>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2102      	movs	r1, #2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f005 fbf7 	bl	80075a4 <osEventFlagsSet>

		bool walls[4];
		int x_collision, y_collision;
		int radius = drone.diameter/2;
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <game_comp_task+0x1ec>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0fda      	lsrs	r2, r3, #31
 8001dbc:	4413      	add	r3, r2
 8001dbe:	105b      	asrs	r3, r3, #1
 8001dc0:	677b      	str	r3, [r7, #116]	@ 0x74
		int cell_size = maze_config.cell_size;
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e34 <game_comp_task+0x1e4>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	673b      	str	r3, [r7, #112]	@ 0x70
		double x_sub_pos, y_sub_pos;
		double x_prev_pos_dif = 0;
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
		double y_prev_pos_dif = 0;
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
		uint32_t flags;
		bool disruptor_activated = false;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
		while(1){
			flags = osEventFlagsGet(event_group_id);
 8001de6:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <game_comp_task+0x1dc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f005 fc4d 	bl	800768a <osEventFlagsGet>
 8001df0:	66f8      	str	r0, [r7, #108]	@ 0x6c
			if(flags & DISRUPTOR_STATE){
 8001df2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d021      	beq.n	8001e40 <game_comp_task+0x1f0>
				xy_pos[0] += x_prev_pos_dif;
 8001dfc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001e00:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001e04:	f7fe fa24 	bl	8000250 <__adddf3>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
				xy_pos[1] += y_prev_pos_dif;
 8001e10:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001e14:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001e18:	f7fe fa1a 	bl	8000250 <__adddf3>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

				disruptor_activated = true;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001e2a:	e222      	b.n	8002272 <game_comp_task+0x622>
 8001e2c:	200002bc 	.word	0x200002bc
 8001e30:	200002e4 	.word	0x200002e4
 8001e34:	2000005c 	.word	0x2000005c
 8001e38:	200002e0 	.word	0x200002e0
 8001e3c:	20000024 	.word	0x20000024
			}else{
				x_collision = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
				y_collision = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				read_xy_pos_dif(xy_dif);
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f80b 	bl	8000e6c <read_xy_pos_dif>
				read_xy_position(xy_pos);
 8001e56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f86c 	bl	8000f38 <read_xy_position>

				x_prev_pos_dif = xy_dif[0];
 8001e60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e64:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
				y_prev_pos_dif = xy_dif[1];
 8001e68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e6c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88

				int cur_x_cell = xy_pos[0]/cell_size;
 8001e70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e74:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001e76:	f7fe fb37 	bl	80004e8 <__aeabi_i2d>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4629      	mov	r1, r5
 8001e82:	f7fe fcc5 	bl	8000810 <__aeabi_ddiv>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f7fe fe45 	bl	8000b1c <__aeabi_d2iz>
 8001e92:	4603      	mov	r3, r0
 8001e94:	66bb      	str	r3, [r7, #104]	@ 0x68
				int cur_y_cell = xy_pos[1]/cell_size;
 8001e96:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001e9a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001e9c:	f7fe fb24 	bl	80004e8 <__aeabi_i2d>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	4629      	mov	r1, r5
 8001ea8:	f7fe fcb2 	bl	8000810 <__aeabi_ddiv>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7fe fe32 	bl	8000b1c <__aeabi_d2iz>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	667b      	str	r3, [r7, #100]	@ 0x64

				if(cur_x_cell < 0 || cur_x_cell > maze_config.size->width-1 || cur_y_cell < 0 || cur_y_cell > maze_config.size->height-1){
 8001ebc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db0e      	blt.n	8001ee0 <game_comp_task+0x290>
 8001ec2:	4b84      	ldr	r3, [pc, #528]	@ (80020d4 <game_comp_task+0x484>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	da08      	bge.n	8001ee0 <game_comp_task+0x290>
 8001ece:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db05      	blt.n	8001ee0 <game_comp_task+0x290>
 8001ed4:	4b7f      	ldr	r3, [pc, #508]	@ (80020d4 <game_comp_task+0x484>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001edc:	429a      	cmp	r2, r3
 8001ede:	db05      	blt.n	8001eec <game_comp_task+0x29c>
					osEventFlagsSet(event_group_id, GAME_OVER_LOSS);
 8001ee0:	4b7d      	ldr	r3, [pc, #500]	@ (80020d8 <game_comp_task+0x488>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2140      	movs	r1, #64	@ 0x40
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f005 fb5c 	bl	80075a4 <osEventFlagsSet>
				}

				// left, right, top, bottom
				get_nearby_walls(cur_x_cell, cur_y_cell, walls);
 8001eec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001ef4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001ef6:	f7ff fc67 	bl	80017c8 <get_nearby_walls>

				// future optimization: dont do calculations for cells that dont have walls
				// OR if we are not headed in the direction of the wall (use +- velocity)
				x_sub_pos = fmod(xy_pos[0], cell_size);
 8001efa:	ed97 8b0c 	vldr	d8, [r7, #48]	@ 0x30
 8001efe:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001f00:	f7fe faf2 	bl	80004e8 <__aeabi_i2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	ec43 2b11 	vmov	d1, r2, r3
 8001f0c:	eeb0 0a48 	vmov.f32	s0, s16
 8001f10:	eef0 0a68 	vmov.f32	s1, s17
 8001f14:	f00b fcfe 	bl	800d914 <fmod>
 8001f18:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58
				y_sub_pos = fmod(xy_pos[1], cell_size);
 8001f1c:	ed97 8b0e 	vldr	d8, [r7, #56]	@ 0x38
 8001f20:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001f22:	f7fe fae1 	bl	80004e8 <__aeabi_i2d>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	ec43 2b11 	vmov	d1, r2, r3
 8001f2e:	eeb0 0a48 	vmov.f32	s0, s16
 8001f32:	eef0 0a68 	vmov.f32	s1, s17
 8001f36:	f00b fced 	bl	800d914 <fmod>
 8001f3a:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50

				if(disruptor_activated){
 8001f3e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 808c 	beq.w	8002060 <game_comp_task+0x410>
					// do something to teleport out of walls
					if(walls[0] && x_sub_pos < radius){
 8001f48:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01a      	beq.n	8001f86 <game_comp_task+0x336>
 8001f50:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001f52:	f7fe fac9 	bl	80004e8 <__aeabi_i2d>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001f5e:	f7fe fd9f 	bl	8000aa0 <__aeabi_dcmplt>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00e      	beq.n	8001f86 <game_comp_task+0x336>
						xy_pos[0] = (int)(cur_x_cell*maze_config.cell_size) + radius;
 8001f68:	4b5a      	ldr	r3, [pc, #360]	@ (80020d4 <game_comp_task+0x484>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001f6e:	fb03 f202 	mul.w	r2, r3, r2
 8001f72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f74:	4413      	add	r3, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fab6 	bl	80004e8 <__aeabi_i2d>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8001f84:	e022      	b.n	8001fcc <game_comp_task+0x37c>
					}else if(walls[1] && x_sub_pos > (cell_size - radius)){
 8001f86:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d01e      	beq.n	8001fcc <game_comp_task+0x37c>
 8001f8e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe faa7 	bl	80004e8 <__aeabi_i2d>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001fa2:	f7fe fd9b 	bl	8000adc <__aeabi_dcmpgt>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00f      	beq.n	8001fcc <game_comp_task+0x37c>
						xy_pos[0] = (int)((cur_x_cell)*maze_config.cell_size) + (cell_size - radius);
 8001fac:	4b49      	ldr	r3, [pc, #292]	@ (80020d4 <game_comp_task+0x484>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001fb2:	fb03 f202 	mul.w	r2, r3, r2
 8001fb6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001fb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fba:	1acb      	subs	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fa92 	bl	80004e8 <__aeabi_i2d>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
					}

					if(walls[2] && y_sub_pos < radius){
 8001fcc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01a      	beq.n	800200a <game_comp_task+0x3ba>
 8001fd4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001fd6:	f7fe fa87 	bl	80004e8 <__aeabi_i2d>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001fe2:	f7fe fd5d 	bl	8000aa0 <__aeabi_dcmplt>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00e      	beq.n	800200a <game_comp_task+0x3ba>
						xy_pos[1] = (int)(cur_y_cell*maze_config.cell_size) + radius;
 8001fec:	4b39      	ldr	r3, [pc, #228]	@ (80020d4 <game_comp_task+0x484>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001ff2:	fb03 f202 	mul.w	r2, r3, r2
 8001ff6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fa74 	bl	80004e8 <__aeabi_i2d>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8002008:	e022      	b.n	8002050 <game_comp_task+0x400>
					}else if(walls[3] && y_sub_pos > (cell_size - radius)){
 800200a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800200e:	2b00      	cmp	r3, #0
 8002010:	d01e      	beq.n	8002050 <game_comp_task+0x400>
 8002012:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002014:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fa65 	bl	80004e8 <__aeabi_i2d>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002026:	f7fe fd59 	bl	8000adc <__aeabi_dcmpgt>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00f      	beq.n	8002050 <game_comp_task+0x400>
						xy_pos[1] = (int)((cur_y_cell)*maze_config.cell_size) + (cell_size - radius);
 8002030:	4b28      	ldr	r3, [pc, #160]	@ (80020d4 <game_comp_task+0x484>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002036:	fb03 f202 	mul.w	r2, r3, r2
 800203a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800203c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800203e:	1acb      	subs	r3, r1, r3
 8002040:	4413      	add	r3, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fa50 	bl	80004e8 <__aeabi_i2d>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
					}

					write_xy_position(xy_pos);
 8002050:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe ff95 	bl	8000f84 <write_xy_position>
					disruptor_activated = false;
 800205a:	2300      	movs	r3, #0
 800205c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
				}

				if(xy_dif[2] < 0 && walls[0]){
 8002060:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	f7fe fd18 	bl	8000aa0 <__aeabi_dcmplt>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d032      	beq.n	80020dc <game_comp_task+0x48c>
 8002076:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800207a:	2b00      	cmp	r3, #0
 800207c:	d02e      	beq.n	80020dc <game_comp_task+0x48c>
					// negative x velocity
					if(x_sub_pos + xy_dif[0] - radius < 0){
 800207e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002082:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002086:	f7fe f8e3 	bl	8000250 <__adddf3>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4614      	mov	r4, r2
 8002090:	461d      	mov	r5, r3
 8002092:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002094:	f7fe fa28 	bl	80004e8 <__aeabi_i2d>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4620      	mov	r0, r4
 800209e:	4629      	mov	r1, r5
 80020a0:	f7fe f8d4 	bl	800024c <__aeabi_dsub>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	f7fe fcf4 	bl	8000aa0 <__aeabi_dcmplt>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d049      	beq.n	8002152 <game_comp_task+0x502>
						// x left wall collision
						osEventFlagsSet(event_group_id, COLLISION_X);
 80020be:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <game_comp_task+0x488>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2104      	movs	r1, #4
 80020c4:	4618      	mov	r0, r3
 80020c6:	f005 fa6d 	bl	80075a4 <osEventFlagsSet>
						x_collision = 1;
 80020ca:	2301      	movs	r3, #1
 80020cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
					if(x_sub_pos + xy_dif[0] - radius < 0){
 80020d0:	e03f      	b.n	8002152 <game_comp_task+0x502>
 80020d2:	bf00      	nop
 80020d4:	2000005c 	.word	0x2000005c
 80020d8:	200002bc 	.word	0x200002bc
					}

				}else if(xy_dif[2] > 0 && walls[1]){
 80020dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	f7fe fcf8 	bl	8000adc <__aeabi_dcmpgt>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d02f      	beq.n	8002152 <game_comp_task+0x502>
 80020f2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d02b      	beq.n	8002152 <game_comp_task+0x502>
					// positive x velocity
					if(x_sub_pos + xy_dif[0] + radius > cell_size){
 80020fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002102:	f7fe f8a5 	bl	8000250 <__adddf3>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4614      	mov	r4, r2
 800210c:	461d      	mov	r5, r3
 800210e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002110:	f7fe f9ea 	bl	80004e8 <__aeabi_i2d>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4620      	mov	r0, r4
 800211a:	4629      	mov	r1, r5
 800211c:	f7fe f898 	bl	8000250 <__adddf3>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4614      	mov	r4, r2
 8002126:	461d      	mov	r5, r3
 8002128:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800212a:	f7fe f9dd 	bl	80004e8 <__aeabi_i2d>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4620      	mov	r0, r4
 8002134:	4629      	mov	r1, r5
 8002136:	f7fe fcd1 	bl	8000adc <__aeabi_dcmpgt>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <game_comp_task+0x502>
						// x right wall collision
						// in this case, ignore any more positive position changes in x direction?
						// until something happens....?
						// until x becomes negative velocity, OR Y leaves this cell?
						osEventFlagsSet(event_group_id, COLLISION_X);
 8002140:	4bb5      	ldr	r3, [pc, #724]	@ (8002418 <game_comp_task+0x7c8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2104      	movs	r1, #4
 8002146:	4618      	mov	r0, r3
 8002148:	f005 fa2c 	bl	80075a4 <osEventFlagsSet>
						x_collision = 1;
 800214c:	2301      	movs	r3, #1
 800214e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
					}
				}

				if(xy_dif[3] < 0 && walls[2]){
 8002152:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	f7fe fc9f 	bl	8000aa0 <__aeabi_dcmplt>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d02d      	beq.n	80021c4 <game_comp_task+0x574>
 8002168:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800216c:	2b00      	cmp	r3, #0
 800216e:	d029      	beq.n	80021c4 <game_comp_task+0x574>
					// negative y velocity
					if(y_sub_pos + xy_dif[1] - radius < 0){
 8002170:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002174:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002178:	f7fe f86a 	bl	8000250 <__adddf3>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4614      	mov	r4, r2
 8002182:	461d      	mov	r5, r3
 8002184:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002186:	f7fe f9af 	bl	80004e8 <__aeabi_i2d>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4620      	mov	r0, r4
 8002190:	4629      	mov	r1, r5
 8002192:	f7fe f85b 	bl	800024c <__aeabi_dsub>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	f7fe fc7b 	bl	8000aa0 <__aeabi_dcmplt>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d044      	beq.n	800223a <game_comp_task+0x5ea>
						// y top wall collision
						osEventFlagsSet(event_group_id, COLLISION_Y);
 80021b0:	4b99      	ldr	r3, [pc, #612]	@ (8002418 <game_comp_task+0x7c8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2108      	movs	r1, #8
 80021b6:	4618      	mov	r0, r3
 80021b8:	f005 f9f4 	bl	80075a4 <osEventFlagsSet>
						y_collision = 1;
 80021bc:	2301      	movs	r3, #1
 80021be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
					if(y_sub_pos + xy_dif[1] - radius < 0){
 80021c2:	e03a      	b.n	800223a <game_comp_task+0x5ea>
					}

				}else if(xy_dif[3] > 0 && walls[3]){
 80021c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	f7fe fc84 	bl	8000adc <__aeabi_dcmpgt>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d02f      	beq.n	800223a <game_comp_task+0x5ea>
 80021da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d02b      	beq.n	800223a <game_comp_task+0x5ea>
					// positive y velocity
					if(y_sub_pos + xy_dif[1] + radius > cell_size){
 80021e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021e6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80021ea:	f7fe f831 	bl	8000250 <__adddf3>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4614      	mov	r4, r2
 80021f4:	461d      	mov	r5, r3
 80021f6:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80021f8:	f7fe f976 	bl	80004e8 <__aeabi_i2d>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4620      	mov	r0, r4
 8002202:	4629      	mov	r1, r5
 8002204:	f7fe f824 	bl	8000250 <__adddf3>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4614      	mov	r4, r2
 800220e:	461d      	mov	r5, r3
 8002210:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002212:	f7fe f969 	bl	80004e8 <__aeabi_i2d>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4620      	mov	r0, r4
 800221c:	4629      	mov	r1, r5
 800221e:	f7fe fc5d 	bl	8000adc <__aeabi_dcmpgt>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <game_comp_task+0x5ea>
						// y bottom wall collision
						osEventFlagsSet(event_group_id, COLLISION_Y);
 8002228:	4b7b      	ldr	r3, [pc, #492]	@ (8002418 <game_comp_task+0x7c8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2108      	movs	r1, #8
 800222e:	4618      	mov	r0, r3
 8002230:	f005 f9b8 	bl	80075a4 <osEventFlagsSet>
						y_collision = 1;
 8002234:	2301      	movs	r3, #1
 8002236:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
					}
				}

				if(!x_collision) xy_pos[0] += xy_dif[0];
 800223a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <game_comp_task+0x606>
 8002242:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002246:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800224a:	f7fe f801 	bl	8000250 <__adddf3>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
				if(!y_collision) xy_pos[1] += xy_dif[1];
 8002256:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <game_comp_task+0x622>
 800225e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002262:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002266:	f7fd fff3 	bl	8000250 <__adddf3>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38


			}

			write_xy_position(xy_pos);
 8002272:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fe84 	bl	8000f84 <write_xy_position>
			// euclidean distance of each waypoint to determine if collected.
			bool win = false;
 800227c:	2300      	movs	r3, #0
 800227e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
			double distance;
			xy_pair* loc_list = maze_config.waypoints->locations_list;
 8002282:	4b66      	ldr	r3, [pc, #408]	@ (800241c <game_comp_task+0x7cc>)
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	64fb      	str	r3, [r7, #76]	@ 0x4c
			for(int i=0; i<maze_config.waypoints->number; i++){
 800228a:	2300      	movs	r3, #0
 800228c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002290:	e098      	b.n	80023c4 <game_comp_task+0x774>
				if(!loc_list[i].collected){
 8002292:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	461a      	mov	r2, r3
 80022a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022a2:	4413      	add	r3, r2
 80022a4:	7a1b      	ldrb	r3, [r3, #8]
 80022a6:	f083 0301 	eor.w	r3, r3, #1
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d06d      	beq.n	800238c <game_comp_task+0x73c>
					distance = sqrt(pow(loc_list[i].x - xy_pos[0], 2) + pow(loc_list[i].y - xy_pos[1], 2));
 80022b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	461a      	mov	r2, r3
 80022be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022c0:	4413      	add	r3, r2
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f90f 	bl	80004e8 <__aeabi_i2d>
 80022ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80022ce:	f7fd ffbd 	bl	800024c <__aeabi_dsub>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	ec43 2b17 	vmov	d7, r2, r3
 80022da:	ed9f 1b4d 	vldr	d1, [pc, #308]	@ 8002410 <game_comp_task+0x7c0>
 80022de:	eeb0 0a47 	vmov.f32	s0, s14
 80022e2:	eef0 0a67 	vmov.f32	s1, s15
 80022e6:	f00b fb4b 	bl	800d980 <pow>
 80022ea:	ec55 4b10 	vmov	r4, r5, d0
 80022ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80022f2:	4613      	mov	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	461a      	mov	r2, r3
 80022fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022fe:	4413      	add	r3, r2
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f8f0 	bl	80004e8 <__aeabi_i2d>
 8002308:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800230c:	f7fd ff9e 	bl	800024c <__aeabi_dsub>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	ec43 2b17 	vmov	d7, r2, r3
 8002318:	ed9f 1b3d 	vldr	d1, [pc, #244]	@ 8002410 <game_comp_task+0x7c0>
 800231c:	eeb0 0a47 	vmov.f32	s0, s14
 8002320:	eef0 0a67 	vmov.f32	s1, s15
 8002324:	f00b fb2c 	bl	800d980 <pow>
 8002328:	ec53 2b10 	vmov	r2, r3, d0
 800232c:	4620      	mov	r0, r4
 800232e:	4629      	mov	r1, r5
 8002330:	f7fd ff8e 	bl	8000250 <__adddf3>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	ec43 2b17 	vmov	d7, r2, r3
 800233c:	eeb0 0a47 	vmov.f32	s0, s14
 8002340:	eef0 0a67 	vmov.f32	s1, s15
 8002344:	f00b fb94 	bl	800da70 <sqrt>
 8002348:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
					if(distance < radius + 1){
 800234c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800234e:	3301      	adds	r3, #1
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe f8c9 	bl	80004e8 <__aeabi_i2d>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800235e:	f7fe fb9f 	bl	8000aa0 <__aeabi_dcmplt>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d100      	bne.n	800236a <game_comp_task+0x71a>
						loc_list[i].collected = true;
						game_score += 1;
					}
					break;
 8002368:	e034      	b.n	80023d4 <game_comp_task+0x784>
						loc_list[i].collected = true;
 800236a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	461a      	mov	r2, r3
 8002378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800237a:	4413      	add	r3, r2
 800237c:	2201      	movs	r2, #1
 800237e:	721a      	strb	r2, [r3, #8]
						game_score += 1;
 8002380:	4b27      	ldr	r3, [pc, #156]	@ (8002420 <game_comp_task+0x7d0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	4a26      	ldr	r2, [pc, #152]	@ (8002420 <game_comp_task+0x7d0>)
 8002388:	6013      	str	r3, [r2, #0]
					break;
 800238a:	e023      	b.n	80023d4 <game_comp_task+0x784>
				}
				if(i == maze_config.waypoints->number-1 && loc_list[i].collected){
 800238c:	4b23      	ldr	r3, [pc, #140]	@ (800241c <game_comp_task+0x7cc>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	3b01      	subs	r3, #1
 8002394:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002398:	429a      	cmp	r2, r3
 800239a:	d10e      	bne.n	80023ba <game_comp_task+0x76a>
 800239c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	461a      	mov	r2, r3
 80023aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023ac:	4413      	add	r3, r2
 80023ae:	7a1b      	ldrb	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <game_comp_task+0x76a>
					win = true;
 80023b4:	2301      	movs	r3, #1
 80023b6:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
			for(int i=0; i<maze_config.waypoints->number; i++){
 80023ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023be:	3301      	adds	r3, #1
 80023c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80023c4:	4b15      	ldr	r3, [pc, #84]	@ (800241c <game_comp_task+0x7cc>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80023ce:	429a      	cmp	r2, r3
 80023d0:	f6ff af5f 	blt.w	8002292 <game_comp_task+0x642>
				}
			}

			if(win){
 80023d4:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <game_comp_task+0x794>
				game_end(true);
 80023dc:	2001      	movs	r0, #1
 80023de:	f7ff fbf1 	bl	8001bc4 <game_end>
				break;
 80023e2:	e09a      	b.n	800251a <game_comp_task+0x8ca>
			}

			if(!(osEventFlagsGet(event_group_id) & DISRUPTOR_STATE)){
 80023e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <game_comp_task+0x7c8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f005 f94e 	bl	800768a <osEventFlagsGet>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f040 808c 	bne.w	8002512 <game_comp_task+0x8c2>
				bool hole_traversed = false;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				loc_list = maze_config.holes->locations_list;
 8002400:	4b06      	ldr	r3, [pc, #24]	@ (800241c <game_comp_task+0x7cc>)
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	64fb      	str	r3, [r7, #76]	@ 0x4c
				for(int i=0; i<maze_config.holes->number; i++){
 8002408:	2300      	movs	r3, #0
 800240a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800240c:	e069      	b.n	80024e2 <game_comp_task+0x892>
 800240e:	bf00      	nop
 8002410:	00000000 	.word	0x00000000
 8002414:	40000000 	.word	0x40000000
 8002418:	200002bc 	.word	0x200002bc
 800241c:	2000005c 	.word	0x2000005c
 8002420:	20000320 	.word	0x20000320
					distance = sqrt(pow(loc_list[i].x - xy_pos[0], 2) + pow(loc_list[i].y - xy_pos[1], 2));
 8002424:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	461a      	mov	r2, r3
 8002430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002432:	4413      	add	r3, r2
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe f856 	bl	80004e8 <__aeabi_i2d>
 800243c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002440:	f7fd ff04 	bl	800024c <__aeabi_dsub>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	ec43 2b17 	vmov	d7, r2, r3
 800244c:	ed9f 1b34 	vldr	d1, [pc, #208]	@ 8002520 <game_comp_task+0x8d0>
 8002450:	eeb0 0a47 	vmov.f32	s0, s14
 8002454:	eef0 0a67 	vmov.f32	s1, s15
 8002458:	f00b fa92 	bl	800d980 <pow>
 800245c:	ec55 4b10 	vmov	r4, r5, d0
 8002460:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	461a      	mov	r2, r3
 800246c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800246e:	4413      	add	r3, r2
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe f838 	bl	80004e8 <__aeabi_i2d>
 8002478:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800247c:	f7fd fee6 	bl	800024c <__aeabi_dsub>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	ec43 2b17 	vmov	d7, r2, r3
 8002488:	ed9f 1b25 	vldr	d1, [pc, #148]	@ 8002520 <game_comp_task+0x8d0>
 800248c:	eeb0 0a47 	vmov.f32	s0, s14
 8002490:	eef0 0a67 	vmov.f32	s1, s15
 8002494:	f00b fa74 	bl	800d980 <pow>
 8002498:	ec53 2b10 	vmov	r2, r3, d0
 800249c:	4620      	mov	r0, r4
 800249e:	4629      	mov	r1, r5
 80024a0:	f7fd fed6 	bl	8000250 <__adddf3>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	ec43 2b17 	vmov	d7, r2, r3
 80024ac:	eeb0 0a47 	vmov.f32	s0, s14
 80024b0:	eef0 0a67 	vmov.f32	s1, s15
 80024b4:	f00b fadc 	bl	800da70 <sqrt>
 80024b8:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
					if(distance < radius){
 80024bc:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80024be:	f7fe f813 	bl	80004e8 <__aeabi_i2d>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80024ca:	f7fe fae9 	bl	8000aa0 <__aeabi_dcmplt>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <game_comp_task+0x88c>
						hole_traversed = true;
 80024d4:	2301      	movs	r3, #1
 80024d6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						break;
 80024da:	e008      	b.n	80024ee <game_comp_task+0x89e>
				for(int i=0; i<maze_config.holes->number; i++){
 80024dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024de:	3301      	adds	r3, #1
 80024e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024e2:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <game_comp_task+0x8d8>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80024ea:	429a      	cmp	r2, r3
 80024ec:	db9a      	blt.n	8002424 <game_comp_task+0x7d4>
					}
				}

				if((osEventFlagsGet(event_group_id) & GAME_OVER_LOSS) || hole_traversed){
 80024ee:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <game_comp_task+0x8dc>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f005 f8c9 	bl	800768a <osEventFlagsGet>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d103      	bne.n	800250a <game_comp_task+0x8ba>
 8002502:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <game_comp_task+0x8c2>
					// game fail
					game_end(false);
 800250a:	2000      	movs	r0, #0
 800250c:	f7ff fb5a 	bl	8001bc4 <game_end>
					break;
 8002510:	e003      	b.n	800251a <game_comp_task+0x8ca>
				}
			}

			osDelay(100);
 8002512:	2064      	movs	r0, #100	@ 0x64
 8002514:	f004 fed9 	bl	80072ca <osDelay>
		while(1){
 8002518:	e465      	b.n	8001de6 <game_comp_task+0x196>
	while(1){
 800251a:	f7ff bb9f 	b.w	8001c5c <game_comp_task+0xc>
 800251e:	bf00      	nop
 8002520:	00000000 	.word	0x00000000
 8002524:	40000000 	.word	0x40000000
 8002528:	2000005c 	.word	0x2000005c
 800252c:	200002bc 	.word	0x200002bc

08002530 <lcd_draw_maze>:
		}
	}
}

void lcd_draw_maze(bool disruptor_active){
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	@ 0x28
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
	int color = disruptor_active ? LCD_COLOR_GREY : LCD_COLOR_BLACK;
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <lcd_draw_maze+0x16>
 8002540:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8002544:	e000      	b.n	8002548 <lcd_draw_maze+0x18>
 8002546:	2300      	movs	r3, #0
 8002548:	627b      	str	r3, [r7, #36]	@ 0x24
	int cell_size = maze_config.cell_size;
 800254a:	4b7e      	ldr	r3, [pc, #504]	@ (8002744 <lcd_draw_maze+0x214>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	613b      	str	r3, [r7, #16]
	for(int i=0; i<maze_config.size->width; i++){
 8002550:	2300      	movs	r3, #0
 8002552:	623b      	str	r3, [r7, #32]
 8002554:	e050      	b.n	80025f8 <lcd_draw_maze+0xc8>
		for(int j=0; j<maze_config.size->height; j++){
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	e044      	b.n	80025e6 <lcd_draw_maze+0xb6>
			if(maze[i][j].top){
 800255c:	4b7a      	ldr	r3, [pc, #488]	@ (8002748 <lcd_draw_maze+0x218>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <lcd_draw_maze+0x6c>
				LCD_Draw_Horizontal_Line(i*cell_size, j*cell_size, cell_size, color);
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	b29a      	uxth	r2, r3
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	b29b      	uxth	r3, r3
 800257c:	fb12 f303 	smulbb	r3, r2, r3
 8002580:	b298      	uxth	r0, r3
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	b29a      	uxth	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	b29b      	uxth	r3, r3
 800258a:	fb12 f303 	smulbb	r3, r2, r3
 800258e:	b299      	uxth	r1, r3
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	b29a      	uxth	r2, r3
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	b29b      	uxth	r3, r3
 8002598:	f001 f813 	bl	80035c2 <LCD_Draw_Horizontal_Line>
			}

			if(maze[i][j].right){
 800259c:	4b6a      	ldr	r3, [pc, #424]	@ (8002748 <lcd_draw_maze+0x218>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	785b      	ldrb	r3, [r3, #1]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d015      	beq.n	80025e0 <lcd_draw_maze+0xb0>
				LCD_Draw_Vertical_Line(i*cell_size + cell_size, j*cell_size, cell_size, color);
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3301      	adds	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	fb12 f303 	smulbb	r3, r2, r3
 80025c4:	b298      	uxth	r0, r3
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	fb12 f303 	smulbb	r3, r2, r3
 80025d2:	b299      	uxth	r1, r3
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	b29b      	uxth	r3, r3
 80025dc:	f000 ffca 	bl	8003574 <LCD_Draw_Vertical_Line>
		for(int j=0; j<maze_config.size->height; j++){
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	3301      	adds	r3, #1
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	4b57      	ldr	r3, [pc, #348]	@ (8002744 <lcd_draw_maze+0x214>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	dbb4      	blt.n	800255c <lcd_draw_maze+0x2c>
	for(int i=0; i<maze_config.size->width; i++){
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	3301      	adds	r3, #1
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	4b52      	ldr	r3, [pc, #328]	@ (8002744 <lcd_draw_maze+0x214>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6a3a      	ldr	r2, [r7, #32]
 8002600:	429a      	cmp	r2, r3
 8002602:	dba8      	blt.n	8002556 <lcd_draw_maze+0x26>
			}
		}
	}

	if(maze_config.hard_edged){
 8002604:	4b4f      	ldr	r3, [pc, #316]	@ (8002744 <lcd_draw_maze+0x214>)
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d023      	beq.n	8002654 <lcd_draw_maze+0x124>
		LCD_Draw_Vertical_Line(0, 0, cell_size*maze_config.size->height, LCD_COLOR_BLACK);
 800260c:	4b4d      	ldr	r3, [pc, #308]	@ (8002744 <lcd_draw_maze+0x214>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	b29a      	uxth	r2, r3
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	b29b      	uxth	r3, r3
 8002618:	fb12 f303 	smulbb	r3, r2, r3
 800261c:	b29a      	uxth	r2, r3
 800261e:	2300      	movs	r3, #0
 8002620:	2100      	movs	r1, #0
 8002622:	2000      	movs	r0, #0
 8002624:	f000 ffa6 	bl	8003574 <LCD_Draw_Vertical_Line>
		LCD_Draw_Horizontal_Line(0, cell_size*maze_config.size->height, cell_size*maze_config.size->width, LCD_COLOR_BLACK);
 8002628:	4b46      	ldr	r3, [pc, #280]	@ (8002744 <lcd_draw_maze+0x214>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	b29a      	uxth	r2, r3
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	b29b      	uxth	r3, r3
 8002634:	fb12 f303 	smulbb	r3, r2, r3
 8002638:	b299      	uxth	r1, r3
 800263a:	4b42      	ldr	r3, [pc, #264]	@ (8002744 <lcd_draw_maze+0x214>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	b29a      	uxth	r2, r3
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	b29b      	uxth	r3, r3
 8002646:	fb12 f303 	smulbb	r3, r2, r3
 800264a:	b29a      	uxth	r2, r3
 800264c:	2300      	movs	r3, #0
 800264e:	2000      	movs	r0, #0
 8002650:	f000 ffb7 	bl	80035c2 <LCD_Draw_Horizontal_Line>
	}

	// draw features
	color = LCD_COLOR_RED;
 8002654:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002658:	627b      	str	r3, [r7, #36]	@ 0x24
	xy_pair* loc_list = maze_config.waypoints->locations_list;
 800265a:	4b3a      	ldr	r3, [pc, #232]	@ (8002744 <lcd_draw_maze+0x214>)
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<maze_config.waypoints->number; i++){
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	e033      	b.n	80026d0 <lcd_draw_maze+0x1a0>
		if(!maze_config.waypoints->locations_list[i].collected){
 8002668:	4b36      	ldr	r3, [pc, #216]	@ (8002744 <lcd_draw_maze+0x214>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	68d9      	ldr	r1, [r3, #12]
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	7a1b      	ldrb	r3, [r3, #8]
 800267c:	f083 0301 	eor.w	r3, r3, #1
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d021      	beq.n	80026ca <lcd_draw_maze+0x19a>
			LCD_Draw_Circle_Fill(loc_list[i].x, loc_list[i].y, maze_config.waypoints->diameter/2, color);
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	461a      	mov	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4413      	add	r3, r2
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	b298      	uxth	r0, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	461a      	mov	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4413      	add	r3, r2
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	b299      	uxth	r1, r3
 80026ae:	4b25      	ldr	r3, [pc, #148]	@ (8002744 <lcd_draw_maze+0x214>)
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	0fda      	lsrs	r2, r3, #31
 80026b6:	4413      	add	r3, r2
 80026b8:	105b      	asrs	r3, r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026be:	b29b      	uxth	r3, r3
 80026c0:	f000 fede 	bl	8003480 <LCD_Draw_Circle_Fill>
			color = LCD_COLOR_GREY;
 80026c4:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i=0; i<maze_config.waypoints->number; i++){
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	3301      	adds	r3, #1
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002744 <lcd_draw_maze+0x214>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	429a      	cmp	r2, r3
 80026da:	dbc5      	blt.n	8002668 <lcd_draw_maze+0x138>
		}
	}

	loc_list = maze_config.holes->locations_list;
 80026dc:	4b19      	ldr	r3, [pc, #100]	@ (8002744 <lcd_draw_maze+0x214>)
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<maze_config.holes->number; i++){
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	e020      	b.n	800272c <lcd_draw_maze+0x1fc>
		LCD_Draw_Circle_Fill(loc_list[i].x, loc_list[i].y, maze_config.holes->diameter/2, LCD_COLOR_BLACK);
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	461a      	mov	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4413      	add	r3, r2
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	b298      	uxth	r0, r3
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	461a      	mov	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4413      	add	r3, r2
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	b299      	uxth	r1, r3
 8002712:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <lcd_draw_maze+0x214>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	0fda      	lsrs	r2, r3, #31
 800271a:	4413      	add	r3, r2
 800271c:	105b      	asrs	r3, r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	2300      	movs	r3, #0
 8002722:	f000 fead 	bl	8003480 <LCD_Draw_Circle_Fill>
	for(int i=0; i<maze_config.holes->number; i++){
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	3301      	adds	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <lcd_draw_maze+0x214>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	429a      	cmp	r2, r3
 8002736:	dbd8      	blt.n	80026ea <lcd_draw_maze+0x1ba>
	}
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3728      	adds	r7, #40	@ 0x28
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	2000005c 	.word	0x2000005c
 8002748:	20000318 	.word	0x20000318

0800274c <lcd_display_task>:

void lcd_display_task(void* arg){
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b093      	sub	sp, #76	@ 0x4c
 8002750:	af02      	add	r7, sp, #8
 8002752:	6078      	str	r0, [r7, #4]
	(void) &arg;
	LCD_Clear(0, LCD_COLOR_WHITE);
 8002754:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002758:	2000      	movs	r0, #0
 800275a:	f000 ff59 	bl	8003610 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800275e:	2000      	movs	r0, #0
 8002760:	f000 fe6e 	bl	8003440 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8002764:	4896      	ldr	r0, [pc, #600]	@ (80029c0 <lcd_display_task+0x274>)
 8002766:	f000 fe7b 	bl	8003460 <LCD_SetFont>

	int radius = drone.diameter/2;
 800276a:	4b96      	ldr	r3, [pc, #600]	@ (80029c4 <lcd_display_task+0x278>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	0fda      	lsrs	r2, r3, #31
 8002770:	4413      	add	r3, r2
 8002772:	105b      	asrs	r3, r3, #1
 8002774:	63fb      	str	r3, [r7, #60]	@ 0x3c
	double xy_pos[2];
	char time_str[8];
	int game_time;
	int menu_x_offset = 10;
 8002776:	230a      	movs	r3, #10
 8002778:	63bb      	str	r3, [r7, #56]	@ 0x38
	int menu_y_offset = (LCD_PIXEL_HEIGHT/2)-20;
 800277a:	238c      	movs	r3, #140	@ 0x8c
 800277c:	637b      	str	r3, [r7, #52]	@ 0x34
	while(1){
		uint32_t flags = osEventFlagsGet(event_group_id);
 800277e:	4b92      	ldr	r3, [pc, #584]	@ (80029c8 <lcd_display_task+0x27c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f004 ff81 	bl	800768a <osEventFlagsGet>
 8002788:	6338      	str	r0, [r7, #48]	@ 0x30
		bool disruptor_active = flags & DISRUPTOR_STATE;
 800278a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf14      	ite	ne
 8002794:	2301      	movne	r3, #1
 8002796:	2300      	moveq	r3, #0
 8002798:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		lcd_draw_maze(disruptor_active);
 800279c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fec5 	bl	8002530 <lcd_draw_maze>

		// game timer display
		read_game_time(&game_time);
 80027a6:	f107 030c 	add.w	r3, r7, #12
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff f9d2 	bl	8001b54 <read_game_time>
		game_time = (int)game_time/1000;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4a86      	ldr	r2, [pc, #536]	@ (80029cc <lcd_display_task+0x280>)
 80027b4:	fb82 1203 	smull	r1, r2, r2, r3
 80027b8:	1192      	asrs	r2, r2, #6
 80027ba:	17db      	asrs	r3, r3, #31
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	60fb      	str	r3, [r7, #12]
		itoa(game_time, time_str, 10);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f107 0110 	add.w	r1, r7, #16
 80027c6:	220a      	movs	r2, #10
 80027c8:	4618      	mov	r0, r3
 80027ca:	f00a fe9e 	bl	800d50a <itoa>
		if(xy_pos[0] > 1 && xy_pos[0] < 35 && xy_pos[1] > 1 && xy_pos[1] < 25){
 80027ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	4b7e      	ldr	r3, [pc, #504]	@ (80029d0 <lcd_display_task+0x284>)
 80027d8:	f7fe f980 	bl	8000adc <__aeabi_dcmpgt>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d030      	beq.n	8002844 <lcd_display_task+0xf8>
 80027e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	4b7a      	ldr	r3, [pc, #488]	@ (80029d4 <lcd_display_task+0x288>)
 80027ec:	f7fe f958 	bl	8000aa0 <__aeabi_dcmplt>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d026      	beq.n	8002844 <lcd_display_task+0xf8>
 80027f6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	4b74      	ldr	r3, [pc, #464]	@ (80029d0 <lcd_display_task+0x284>)
 8002800:	f7fe f96c 	bl	8000adc <__aeabi_dcmpgt>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d01c      	beq.n	8002844 <lcd_display_task+0xf8>
 800280a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	4b71      	ldr	r3, [pc, #452]	@ (80029d8 <lcd_display_task+0x28c>)
 8002814:	f7fe f944 	bl	8000aa0 <__aeabi_dcmplt>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d012      	beq.n	8002844 <lcd_display_task+0xf8>
			LCD_Draw_Rectangle_Fill(1, LCD_PIXEL_HEIGHT-25, 35, 25, LCD_COLOR_WHITE);
 800281e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	2319      	movs	r3, #25
 8002826:	2223      	movs	r2, #35	@ 0x23
 8002828:	f240 1127 	movw	r1, #295	@ 0x127
 800282c:	2001      	movs	r0, #1
 800282e:	f000 fe7a 	bl	8003526 <LCD_Draw_Rectangle_Fill>
			LCD_DisplayString(5, LCD_PIXEL_HEIGHT-20, time_str);
 8002832:	f107 0310 	add.w	r3, r7, #16
 8002836:	461a      	mov	r2, r3
 8002838:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800283c:	2005      	movs	r0, #5
 800283e:	f000 fd43 	bl	80032c8 <LCD_DisplayString>
 8002842:	e00f      	b.n	8002864 <lcd_display_task+0x118>
		}else{
			LCD_Draw_Rectangle_Fill(1, 1, 35, 25, LCD_COLOR_WHITE);
 8002844:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2319      	movs	r3, #25
 800284c:	2223      	movs	r2, #35	@ 0x23
 800284e:	2101      	movs	r1, #1
 8002850:	2001      	movs	r0, #1
 8002852:	f000 fe68 	bl	8003526 <LCD_Draw_Rectangle_Fill>
			LCD_DisplayString(5, 5, time_str);
 8002856:	f107 0310 	add.w	r3, r7, #16
 800285a:	461a      	mov	r2, r3
 800285c:	2105      	movs	r1, #5
 800285e:	2005      	movs	r0, #5
 8002860:	f000 fd32 	bl	80032c8 <LCD_DisplayString>
		}

		if(flags & GAME_OVER_LOSS || flags & GAME_OVER_WIN){
 8002864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d104      	bne.n	8002878 <lcd_display_task+0x12c>
 800286e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002874:	2b00      	cmp	r3, #0
 8002876:	d051      	beq.n	800291c <lcd_display_task+0x1d0>
			bool win = flags & GAME_OVER_WIN;
 8002878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287e:	2b00      	cmp	r3, #0
 8002880:	bf14      	ite	ne
 8002882:	2301      	movne	r3, #1
 8002884:	2300      	moveq	r3, #0
 8002886:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
			LCD_Draw_Rectangle_Fill(menu_x_offset, menu_y_offset, 220, 69, LCD_COLOR_BLACK); // background frame
 800288a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800288c:	b298      	uxth	r0, r3
 800288e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002890:	b299      	uxth	r1, r3
 8002892:	2300      	movs	r3, #0
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2345      	movs	r3, #69	@ 0x45
 8002898:	22dc      	movs	r2, #220	@ 0xdc
 800289a:	f000 fe44 	bl	8003526 <LCD_Draw_Rectangle_Fill>
			LCD_Draw_Rectangle_Fill(menu_x_offset+2, menu_y_offset+2, 216, 65, LCD_COLOR_WHITE); // foreground white
 800289e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3302      	adds	r3, #2
 80028a4:	b298      	uxth	r0, r3
 80028a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3302      	adds	r3, #2
 80028ac:	b299      	uxth	r1, r3
 80028ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	2341      	movs	r3, #65	@ 0x41
 80028b6:	22d8      	movs	r2, #216	@ 0xd8
 80028b8:	f000 fe35 	bl	8003526 <LCD_Draw_Rectangle_Fill>
			LCD_DisplayString(menu_x_offset+50, menu_y_offset+4, *game_end_status[!win]); // win/lose
 80028bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3332      	adds	r3, #50	@ 0x32
 80028c2:	b298      	uxth	r0, r3
 80028c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3304      	adds	r3, #4
 80028ca:	b299      	uxth	r1, r3
 80028cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80028d0:	f083 0301 	eor.w	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	4a41      	ldr	r2, [pc, #260]	@ (80029dc <lcd_display_task+0x290>)
 80028d8:	019b      	lsls	r3, r3, #6
 80028da:	4413      	add	r3, r2
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	f000 fcf2 	bl	80032c8 <LCD_DisplayString>
			LCD_DisplayString(menu_x_offset+14, menu_y_offset+24, *game_end_status[2]); // score
 80028e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	330e      	adds	r3, #14
 80028ea:	b298      	uxth	r0, r3
 80028ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3318      	adds	r3, #24
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	4a39      	ldr	r2, [pc, #228]	@ (80029dc <lcd_display_task+0x290>)
 80028f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80028fa:	4619      	mov	r1, r3
 80028fc:	f000 fce4 	bl	80032c8 <LCD_DisplayString>
			LCD_DisplayNumber(menu_x_offset+194, menu_y_offset+24, game_score);
 8002900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002902:	b29b      	uxth	r3, r3
 8002904:	33c2      	adds	r3, #194	@ 0xc2
 8002906:	b298      	uxth	r0, r3
 8002908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800290a:	b29b      	uxth	r3, r3
 800290c:	3318      	adds	r3, #24
 800290e:	b29b      	uxth	r3, r3
 8002910:	4a33      	ldr	r2, [pc, #204]	@ (80029e0 <lcd_display_task+0x294>)
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	b292      	uxth	r2, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f000 fcfe 	bl	8003318 <LCD_DisplayNumber>
		}
		osEventFlagsWait(event_group_id, MAZE_GENERATED, osFlagsNoClear, osWaitForever);
 800291c:	4b2a      	ldr	r3, [pc, #168]	@ (80029c8 <lcd_display_task+0x27c>)
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002924:	2202      	movs	r2, #2
 8002926:	2102      	movs	r1, #2
 8002928:	f004 fed0 	bl	80076cc <osEventFlagsWait>

		read_xy_position(xy_pos);
 800292c:	f107 0318 	add.w	r3, r7, #24
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fb01 	bl	8000f38 <read_xy_position>
		if(!(flags & GAME_OVER_LOSS || flags & GAME_OVER_WIN)){
 8002936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	d136      	bne.n	80029ae <lcd_display_task+0x262>
 8002940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002946:	2b00      	cmp	r3, #0
 8002948:	d131      	bne.n	80029ae <lcd_display_task+0x262>
			if(disruptor_active){
 800294a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800294e:	2b00      	cmp	r3, #0
 8002950:	d017      	beq.n	8002982 <lcd_display_task+0x236>
				LCD_Draw_Circle_Fill((int)xy_pos[0], (int)xy_pos[1], radius, LCD_COLOR_MAGENTA);
 8002952:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f7fe f8df 	bl	8000b1c <__aeabi_d2iz>
 800295e:	4603      	mov	r3, r0
 8002960:	b29c      	uxth	r4, r3
 8002962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f7fe f8d7 	bl	8000b1c <__aeabi_d2iz>
 800296e:	4603      	mov	r3, r0
 8002970:	b299      	uxth	r1, r3
 8002972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002974:	b29a      	uxth	r2, r3
 8002976:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800297a:	4620      	mov	r0, r4
 800297c:	f000 fd80 	bl	8003480 <LCD_Draw_Circle_Fill>
 8002980:	e015      	b.n	80029ae <lcd_display_task+0x262>
			}else{
				LCD_Draw_Circle_Fill((int)xy_pos[0], (int)xy_pos[1], radius, LCD_COLOR_BLUE);
 8002982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002986:	4610      	mov	r0, r2
 8002988:	4619      	mov	r1, r3
 800298a:	f7fe f8c7 	bl	8000b1c <__aeabi_d2iz>
 800298e:	4603      	mov	r3, r0
 8002990:	b29c      	uxth	r4, r3
 8002992:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	f7fe f8bf 	bl	8000b1c <__aeabi_d2iz>
 800299e:	4603      	mov	r3, r0
 80029a0:	b299      	uxth	r1, r3
 80029a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	231f      	movs	r3, #31
 80029a8:	4620      	mov	r0, r4
 80029aa:	f000 fd69 	bl	8003480 <LCD_Draw_Circle_Fill>
			}
		}

		osDelay(100);
 80029ae:	2064      	movs	r0, #100	@ 0x64
 80029b0:	f004 fc8b 	bl	80072ca <osDelay>
		LCD_Clear(0, LCD_COLOR_WHITE);
 80029b4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80029b8:	2000      	movs	r0, #0
 80029ba:	f000 fe29 	bl	8003610 <LCD_Clear>
	while(1){
 80029be:	e6de      	b.n	800277e <lcd_display_task+0x32>
 80029c0:	2000021c 	.word	0x2000021c
 80029c4:	20000024 	.word	0x20000024
 80029c8:	200002bc 	.word	0x200002bc
 80029cc:	10624dd3 	.word	0x10624dd3
 80029d0:	3ff00000 	.word	0x3ff00000
 80029d4:	40418000 	.word	0x40418000
 80029d8:	40390000 	.word	0x40390000
 80029dc:	20000154 	.word	0x20000154
 80029e0:	20000320 	.word	0x20000320

080029e4 <green_led_task>:
	}
}

void green_led_task(void* arg){
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	(void) &arg;
	int max_energy = drone.energy_store->max_energy;
 80029ec:	4b23      	ldr	r3, [pc, #140]	@ (8002a7c <green_led_task+0x98>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	617b      	str	r3, [r7, #20]
	int on_time_ms, energy;
	const int TOTAL_PERIOD = 20;
 80029f4:	2314      	movs	r3, #20
 80029f6:	613b      	str	r3, [r7, #16]
	while(1){
        read_disruptor_energy(&energy);
 80029f8:	f107 0308 	add.w	r3, r7, #8
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fb1d 	bl	800103c <read_disruptor_energy>

        if(energy < max_energy){
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	dd2e      	ble.n	8002a68 <green_led_task+0x84>
			// Calculate the ON time based on the energy percentage
			on_time_ms = (int)((float)energy / max_energy * TOTAL_PERIOD); // 20ms is the total period (ON + OFF)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	ee07 3a90 	vmov	s15, r3
 8002a10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	ee07 3a90 	vmov	s15, r3
 8002a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	ee07 3a90 	vmov	s15, r3
 8002a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a34:	ee17 3a90 	vmov	r3, s15
 8002a38:	60fb      	str	r3, [r7, #12]

			// Turn ON the LED
			HAL_GPIO_WritePin(LED_PORT, GRN_LED_PIN, GPIO_PIN_SET);
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a40:	480f      	ldr	r0, [pc, #60]	@ (8002a80 <green_led_task+0x9c>)
 8002a42:	f002 faeb 	bl	800501c <HAL_GPIO_WritePin>
			osDelay(on_time_ms);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f004 fc3e 	bl	80072ca <osDelay>

			// Turn OFF the LED
			HAL_GPIO_WritePin(LED_PORT, GRN_LED_PIN, GPIO_PIN_RESET);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a54:	480a      	ldr	r0, [pc, #40]	@ (8002a80 <green_led_task+0x9c>)
 8002a56:	f002 fae1 	bl	800501c <HAL_GPIO_WritePin>
			osDelay(TOTAL_PERIOD - on_time_ms); // Subtract ON time from total period to get OFF time
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	4618      	mov	r0, r3
 8002a62:	f004 fc32 	bl	80072ca <osDelay>
 8002a66:	e7c7      	b.n	80029f8 <green_led_task+0x14>
        }else{
        	HAL_GPIO_WritePin(LED_PORT, GRN_LED_PIN, GPIO_PIN_SET);
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a6e:	4804      	ldr	r0, [pc, #16]	@ (8002a80 <green_led_task+0x9c>)
 8002a70:	f002 fad4 	bl	800501c <HAL_GPIO_WritePin>
        	osDelay(100);
 8002a74:	2064      	movs	r0, #100	@ 0x64
 8002a76:	f004 fc28 	bl	80072ca <osDelay>
        read_disruptor_energy(&energy);
 8002a7a:	e7bd      	b.n	80029f8 <green_led_task+0x14>
 8002a7c:	20000024 	.word	0x20000024
 8002a80:	40021800 	.word	0x40021800

08002a84 <red_led_task>:
        }
	}
}

void red_led_task(void* arg){
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	(void) &arg;
	int min_energy = drone.disruptor->min_activation_energy;
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b04 <red_led_task+0x80>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	613b      	str	r3, [r7, #16]
	int half_period, energy;
	while(1){
        read_disruptor_energy(&energy);
 8002a94:	f107 030c 	add.w	r3, r7, #12
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe facf 	bl	800103c <read_disruptor_energy>

        if(energy < min_energy){
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	dd23      	ble.n	8002aee <red_led_task+0x6a>
        	half_period = (min_energy - energy)/20;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	4a16      	ldr	r2, [pc, #88]	@ (8002b08 <red_led_task+0x84>)
 8002aae:	fb82 1203 	smull	r1, r2, r2, r3
 8002ab2:	10d2      	asrs	r2, r2, #3
 8002ab4:	17db      	asrs	r3, r3, #31
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	617b      	str	r3, [r7, #20]
        	if(half_period < 2) half_period = 2;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	dc01      	bgt.n	8002ac4 <red_led_task+0x40>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	617b      	str	r3, [r7, #20]
			// Turn ON the LED
			HAL_GPIO_WritePin(LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002aca:	4810      	ldr	r0, [pc, #64]	@ (8002b0c <red_led_task+0x88>)
 8002acc:	f002 faa6 	bl	800501c <HAL_GPIO_WritePin>
			osDelay(half_period);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f004 fbf9 	bl	80072ca <osDelay>

			// Turn OFF the LED
			HAL_GPIO_WritePin(LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002ade:	480b      	ldr	r0, [pc, #44]	@ (8002b0c <red_led_task+0x88>)
 8002ae0:	f002 fa9c 	bl	800501c <HAL_GPIO_WritePin>
			osDelay(half_period); // Subtract ON time from total period to get OFF time
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f004 fbef 	bl	80072ca <osDelay>
 8002aec:	e7d2      	b.n	8002a94 <red_led_task+0x10>
        }else{
        	HAL_GPIO_WritePin(LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8002aee:	2200      	movs	r2, #0
 8002af0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002af4:	4805      	ldr	r0, [pc, #20]	@ (8002b0c <red_led_task+0x88>)
 8002af6:	f002 fa91 	bl	800501c <HAL_GPIO_WritePin>
        	osDelay(100);
 8002afa:	2064      	movs	r0, #100	@ 0x64
 8002afc:	f004 fbe5 	bl	80072ca <osDelay>
        read_disruptor_energy(&energy);
 8002b00:	e7c8      	b.n	8002a94 <red_led_task+0x10>
 8002b02:	bf00      	nop
 8002b04:	20000024 	.word	0x20000024
 8002b08:	66666667 	.word	0x66666667
 8002b0c:	40021800 	.word	0x40021800

08002b10 <Gyro_Init>:

/**
  * @brief Initialise the gyro for Lab2
  * @retval None
  */
void Gyro_Init(){
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
	Gyro_Power_On();
 8002b14:	f000 f80c 	bl	8002b30 <Gyro_Power_On>
	osDelay(100);
 8002b18:	2064      	movs	r0, #100	@ 0x64
 8002b1a:	f004 fbd6 	bl	80072ca <osDelay>
	Gyro_Config_Regs();
 8002b1e:	f000 f8ef 	bl	8002d00 <Gyro_Config_Regs>
	Gyro_Reboot();
 8002b22:	f000 f849 	bl	8002bb8 <Gyro_Reboot>
	osDelay(100);
 8002b26:	2064      	movs	r0, #100	@ 0x64
 8002b28:	f004 fbcf 	bl	80072ca <osDelay>


}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <Gyro_Power_On>:
/**
  * @brief Power on the Gyro
  * @retval None
  */

void Gyro_Power_On(){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
	//get data from register
	uint8_t cmd = (GYRO_READ | CTRL_REG1);
 8002b36:	23a0      	movs	r3, #160	@ 0xa0
 8002b38:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8002b3e:	f000 f959 	bl	8002df4 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002b42:	bf00      	nop
 8002b44:	2102      	movs	r1, #2
 8002b46:	481a      	ldr	r0, [pc, #104]	@ (8002bb0 <Gyro_Power_On+0x80>)
 8002b48:	f002 fa50 	bl	8004fec <HAL_GPIO_ReadPin>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f8      	bne.n	8002b44 <Gyro_Power_On+0x14>
	Gyro_Transmit_Data(&cmd);
 8002b52:	1dfb      	adds	r3, r7, #7
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 f97f 	bl	8002e58 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 8002b5a:	1dbb      	adds	r3, r7, #6
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 f961 	bl	8002e24 <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8002b62:	f000 f953 	bl	8002e0c <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG1);
 8002b66:	2320      	movs	r3, #32
 8002b68:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 3));
 8002b6a:	79bb      	ldrb	r3, [r7, #6]
 8002b6c:	f043 0308 	orr.w	r3, r3, #8
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 8002b74:	f000 f93e 	bl	8002df4 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002b78:	bf00      	nop
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	480c      	ldr	r0, [pc, #48]	@ (8002bb0 <Gyro_Power_On+0x80>)
 8002b7e:	f002 fa35 	bl	8004fec <HAL_GPIO_ReadPin>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f8      	bne.n	8002b7a <Gyro_Power_On+0x4a>
	Gyro_Transmit_Data(&cmd);
 8002b88:	1dfb      	adds	r3, r7, #7
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f964 	bl	8002e58 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 8002b90:	1d7b      	adds	r3, r7, #5
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 f960 	bl	8002e58 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8002b98:	f000 f938 	bl	8002e0c <Gyro_Slave_Disable>


	if(HAL_Status != HAL_OK)
 8002b9c:	4b05      	ldr	r3, [pc, #20]	@ (8002bb4 <Gyro_Power_On+0x84>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <Gyro_Power_On+0x78>
	{
		while(1);
 8002ba4:	bf00      	nop
 8002ba6:	e7fd      	b.n	8002ba4 <Gyro_Power_On+0x74>
	}
	}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40020800 	.word	0x40020800
 8002bb4:	20000328 	.word	0x20000328

08002bb8 <Gyro_Reboot>:
/**
  * @brief Perform a Reboot on the Gyro
  * @retval None
  */

void Gyro_Reboot(){
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
	uint8_t cmd = (GYRO_READ | CTRL_REG5);
 8002bbe:	23a4      	movs	r3, #164	@ 0xa4
 8002bc0:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8002bc6:	f000 f915 	bl	8002df4 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002bca:	bf00      	nop
 8002bcc:	2102      	movs	r1, #2
 8002bce:	4817      	ldr	r0, [pc, #92]	@ (8002c2c <Gyro_Reboot+0x74>)
 8002bd0:	f002 fa0c 	bl	8004fec <HAL_GPIO_ReadPin>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f8      	bne.n	8002bcc <Gyro_Reboot+0x14>
	Gyro_Transmit_Data(&cmd);
 8002bda:	1dfb      	adds	r3, r7, #7
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f93b 	bl	8002e58 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 8002be2:	1dbb      	adds	r3, r7, #6
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 f91d 	bl	8002e24 <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8002bea:	f000 f90f 	bl	8002e0c <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG5);
 8002bee:	2324      	movs	r3, #36	@ 0x24
 8002bf0:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 7));
 8002bf2:	79bb      	ldrb	r3, [r7, #6]
 8002bf4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 8002bfc:	f000 f8fa 	bl	8002df4 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002c00:	bf00      	nop
 8002c02:	2102      	movs	r1, #2
 8002c04:	4809      	ldr	r0, [pc, #36]	@ (8002c2c <Gyro_Reboot+0x74>)
 8002c06:	f002 f9f1 	bl	8004fec <HAL_GPIO_ReadPin>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f8      	bne.n	8002c02 <Gyro_Reboot+0x4a>
	Gyro_Transmit_Data(&cmd);
 8002c10:	1dfb      	adds	r3, r7, #7
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f920 	bl	8002e58 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 8002c18:	1d7b      	adds	r3, r7, #5
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f91c 	bl	8002e58 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8002c20:	f000 f8f4 	bl	8002e0c <Gyro_Slave_Disable>

}
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40020800 	.word	0x40020800

08002c30 <Gyro_Get_Y_Velocity>:
/**
  * @brief Sample the Velocity Rate of the Gyro and return
  * @retval 16 bit integer representing the velocity of the gyro
  */

int16_t Gyro_Get_Y_Velocity(){
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
	int16_t yval = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	80fb      	strh	r3, [r7, #6]

	uint8_t cmd = (GYRO_READ| MS_BIT | OUT_Y_L);
 8002c3a:	23ea      	movs	r3, #234	@ 0xea
 8002c3c:	717b      	strb	r3, [r7, #5]
	uint8_t rxbuff_yl = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	713b      	strb	r3, [r7, #4]
	uint8_t rxbuff_yh = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	70fb      	strb	r3, [r7, #3]

	Gyro_Slave_Enable();
 8002c46:	f000 f8d5 	bl	8002df4 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002c4a:	bf00      	nop
 8002c4c:	2102      	movs	r1, #2
 8002c4e:	4811      	ldr	r0, [pc, #68]	@ (8002c94 <Gyro_Get_Y_Velocity+0x64>)
 8002c50:	f002 f9cc 	bl	8004fec <HAL_GPIO_ReadPin>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f8      	bne.n	8002c4c <Gyro_Get_Y_Velocity+0x1c>
	Gyro_Transmit_Data(&cmd);
 8002c5a:	1d7b      	adds	r3, r7, #5
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 f8fb 	bl	8002e58 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rxbuff_yl);
 8002c62:	1d3b      	adds	r3, r7, #4
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 f8dd 	bl	8002e24 <Gyro_Receive_Data>
	Gyro_Receive_Data(&rxbuff_yh);
 8002c6a:	1cfb      	adds	r3, r7, #3
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 f8d9 	bl	8002e24 <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8002c72:	f000 f8cb 	bl	8002e0c <Gyro_Slave_Disable>


	yval = (int16_t) ((rxbuff_yh << 8) | rxbuff_yl);
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	b21b      	sxth	r3, r3
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	b21a      	sxth	r2, r3
 8002c7e:	793b      	ldrb	r3, [r7, #4]
 8002c80:	b21b      	sxth	r3, r3
 8002c82:	4313      	orrs	r3, r2
 8002c84:	80fb      	strh	r3, [r7, #6]

	return yval;
 8002c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]



}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40020800 	.word	0x40020800

08002c98 <Gyro_Get_X_Velocity>:
/**
  * @brief Sample the Velocity Rate of the Gyro and return
  * @retval 16 bit integer representing the velocity of the gyro
  */

int16_t Gyro_Get_X_Velocity(){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
	int16_t xval = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	80fb      	strh	r3, [r7, #6]

	uint8_t cmd = (GYRO_READ| MS_BIT | OUT_X_L);
 8002ca2:	23e8      	movs	r3, #232	@ 0xe8
 8002ca4:	717b      	strb	r3, [r7, #5]
	uint8_t rxbuff_xl = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	713b      	strb	r3, [r7, #4]
	uint8_t rxbuff_xh = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	70fb      	strb	r3, [r7, #3]

	Gyro_Slave_Enable();
 8002cae:	f000 f8a1 	bl	8002df4 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002cb2:	bf00      	nop
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	4811      	ldr	r0, [pc, #68]	@ (8002cfc <Gyro_Get_X_Velocity+0x64>)
 8002cb8:	f002 f998 	bl	8004fec <HAL_GPIO_ReadPin>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f8      	bne.n	8002cb4 <Gyro_Get_X_Velocity+0x1c>
	Gyro_Transmit_Data(&cmd);
 8002cc2:	1d7b      	adds	r3, r7, #5
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 f8c7 	bl	8002e58 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rxbuff_xl);
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 f8a9 	bl	8002e24 <Gyro_Receive_Data>
	Gyro_Receive_Data(&rxbuff_xh);
 8002cd2:	1cfb      	adds	r3, r7, #3
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 f8a5 	bl	8002e24 <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8002cda:	f000 f897 	bl	8002e0c <Gyro_Slave_Disable>


	xval = (int16_t) ((rxbuff_xh << 8) | rxbuff_xl);
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	b21b      	sxth	r3, r3
 8002ce2:	021b      	lsls	r3, r3, #8
 8002ce4:	b21a      	sxth	r2, r3
 8002ce6:	793b      	ldrb	r3, [r7, #4]
 8002ce8:	b21b      	sxth	r3, r3
 8002cea:	4313      	orrs	r3, r2
 8002cec:	80fb      	strh	r3, [r7, #6]

	return xval;
 8002cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]



}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40020800 	.word	0x40020800

08002d00 <Gyro_Config_Regs>:

/**
  * @brief Configure the registers for the gyro
  * @retval None
  */
void Gyro_Config_Regs(){
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0

	//CR1
	uint8_t addr_cmd = (GYRO_WRITE | CTRL_REG1);
 8002d06:	2320      	movs	r3, #32
 8002d08:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_cmd = 0x1B; // 0001 1011 - Gyro Data rate is 100hz, gyro enabled on y-axis and x-axis
 8002d0a:	231b      	movs	r3, #27
 8002d0c:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8002d0e:	f000 f871 	bl	8002df4 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002d12:	bf00      	nop
 8002d14:	2102      	movs	r1, #2
 8002d16:	482e      	ldr	r0, [pc, #184]	@ (8002dd0 <Gyro_Config_Regs+0xd0>)
 8002d18:	f002 f968 	bl	8004fec <HAL_GPIO_ReadPin>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f8      	bne.n	8002d14 <Gyro_Config_Regs+0x14>
	Gyro_Transmit_Data(&addr_cmd);
 8002d22:	1dfb      	adds	r3, r7, #7
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 f897 	bl	8002e58 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8002d2a:	1dbb      	adds	r3, r7, #6
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 f893 	bl	8002e58 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8002d32:	f000 f86b 	bl	8002e0c <Gyro_Slave_Disable>




	//CR4
	addr_cmd = (GYRO_WRITE | CTRL_REG4);
 8002d36:	2323      	movs	r3, #35	@ 0x23
 8002d38:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x10; //0001 0000 - Full scale rate of 500dps
 8002d3a:	2310      	movs	r3, #16
 8002d3c:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8002d3e:	f000 f859 	bl	8002df4 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002d42:	bf00      	nop
 8002d44:	2102      	movs	r1, #2
 8002d46:	4822      	ldr	r0, [pc, #136]	@ (8002dd0 <Gyro_Config_Regs+0xd0>)
 8002d48:	f002 f950 	bl	8004fec <HAL_GPIO_ReadPin>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f8      	bne.n	8002d44 <Gyro_Config_Regs+0x44>
	Gyro_Transmit_Data(&addr_cmd);
 8002d52:	1dfb      	adds	r3, r7, #7
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 f87f 	bl	8002e58 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8002d5a:	1dbb      	adds	r3, r7, #6
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 f87b 	bl	8002e58 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8002d62:	f000 f853 	bl	8002e0c <Gyro_Slave_Disable>


	//CR5
	addr_cmd = (GYRO_WRITE | CTRL_REG5);
 8002d66:	2324      	movs	r3, #36	@ 0x24
 8002d68:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0xC0; //1100 0000 - Reboot initially and enable FIFO
 8002d6a:	23c0      	movs	r3, #192	@ 0xc0
 8002d6c:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8002d6e:	f000 f841 	bl	8002df4 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002d72:	bf00      	nop
 8002d74:	2102      	movs	r1, #2
 8002d76:	4816      	ldr	r0, [pc, #88]	@ (8002dd0 <Gyro_Config_Regs+0xd0>)
 8002d78:	f002 f938 	bl	8004fec <HAL_GPIO_ReadPin>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f8      	bne.n	8002d74 <Gyro_Config_Regs+0x74>
	Gyro_Transmit_Data(&addr_cmd);
 8002d82:	1dfb      	adds	r3, r7, #7
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 f867 	bl	8002e58 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8002d8a:	1dbb      	adds	r3, r7, #6
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 f863 	bl	8002e58 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8002d92:	f000 f83b 	bl	8002e0c <Gyro_Slave_Disable>


	//FIFO_CTRL
	addr_cmd = (GYRO_WRITE | FIFO_CTRL_REG);
 8002d96:	232e      	movs	r3, #46	@ 0x2e
 8002d98:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x00; //0100 0000 FIFO in stream mode
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8002d9e:	f000 f829 	bl	8002df4 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8002da2:	bf00      	nop
 8002da4:	2102      	movs	r1, #2
 8002da6:	480a      	ldr	r0, [pc, #40]	@ (8002dd0 <Gyro_Config_Regs+0xd0>)
 8002da8:	f002 f920 	bl	8004fec <HAL_GPIO_ReadPin>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f8      	bne.n	8002da4 <Gyro_Config_Regs+0xa4>
	Gyro_Transmit_Data(&addr_cmd);
 8002db2:	1dfb      	adds	r3, r7, #7
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 f84f 	bl	8002e58 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8002dba:	1dbb      	adds	r3, r7, #6
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 f84b 	bl	8002e58 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8002dc2:	f000 f823 	bl	8002e0c <Gyro_Slave_Disable>




}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40020800 	.word	0x40020800

08002dd4 <Gyro_HAL_Check>:

/**
  * @brief Check the status of the HAL
  * @retval None
  */
void Gyro_HAL_Check(){
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
	if(HAL_Status != HAL_OK){
 8002dd8:	4b05      	ldr	r3, [pc, #20]	@ (8002df0 <Gyro_HAL_Check+0x1c>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <Gyro_HAL_Check+0x10>
		while(1);
 8002de0:	bf00      	nop
 8002de2:	e7fd      	b.n	8002de0 <Gyro_HAL_Check+0xc>
	}
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000328 	.word	0x20000328

08002df4 <Gyro_Slave_Enable>:

/**
  * @brief Enable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Enable(){
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_RESET);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	4802      	ldr	r0, [pc, #8]	@ (8002e08 <Gyro_Slave_Enable+0x14>)
 8002dfe:	f002 f90d 	bl	800501c <HAL_GPIO_WritePin>
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40020800 	.word	0x40020800

08002e0c <Gyro_Slave_Disable>:

/**
  * @brief Disable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Disable(){
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_SET);
 8002e10:	2201      	movs	r2, #1
 8002e12:	2102      	movs	r1, #2
 8002e14:	4802      	ldr	r0, [pc, #8]	@ (8002e20 <Gyro_Slave_Disable+0x14>)
 8002e16:	f002 f901 	bl	800501c <HAL_GPIO_WritePin>
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40020800 	.word	0x40020800

08002e24 <Gyro_Receive_Data>:
/**
  * @brief Recieve one bit of data from the Gyro
  * @param rx_buff- pointer to a data buffer, recieved data will appear here
  * @retval None
  */
void Gyro_Receive_Data(uint8_t *rx_buff){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Receive(&hspi5, rx_buff, 1, TIMEOUT);
 8002e2c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002e30:	2201      	movs	r2, #1
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4806      	ldr	r0, [pc, #24]	@ (8002e50 <Gyro_Receive_Data+0x2c>)
 8002e36:	f003 fc42 	bl	80066be <HAL_SPI_Receive>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <Gyro_Receive_Data+0x30>)
 8002e40:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 8002e42:	f7ff ffc7 	bl	8002dd4 <Gyro_HAL_Check>

}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20025d1c 	.word	0x20025d1c
 8002e54:	20000328 	.word	0x20000328

08002e58 <Gyro_Transmit_Data>:
/**
  * @brief Send one bit of data to the Gyro
  * @param tx_buff- pointer to a data buffer.
  * @retval None
  */
void Gyro_Transmit_Data(uint8_t *tx_buff){
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Transmit(&hspi5,tx_buff, 1, TIMEOUT);
 8002e60:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002e64:	2201      	movs	r2, #1
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4806      	ldr	r0, [pc, #24]	@ (8002e84 <Gyro_Transmit_Data+0x2c>)
 8002e6a:	f003 faec 	bl	8006446 <HAL_SPI_Transmit>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <Gyro_Transmit_Data+0x30>)
 8002e74:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 8002e76:	f7ff ffad 	bl	8002dd4 <Gyro_HAL_Check>
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20025d1c 	.word	0x20025d1c
 8002e88:	20000328 	.word	0x20000328

08002e8c <LCD_GPIO_Init>:
static void SPI_Error(void);

/* Provided Functions and API  - MOTIFY ONLY WITH EXTREME CAUTION!!! */

void LCD_GPIO_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08c      	sub	sp, #48	@ 0x30
 8002e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	4b5a      	ldr	r3, [pc, #360]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	4a59      	ldr	r2, [pc, #356]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002e9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ea0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ea2:	4b57      	ldr	r3, [pc, #348]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002eaa:	61bb      	str	r3, [r7, #24]
 8002eac:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	4b53      	ldr	r3, [pc, #332]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	4a52      	ldr	r2, [pc, #328]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ebe:	4b50      	ldr	r3, [pc, #320]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	4b4c      	ldr	r3, [pc, #304]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	4a4b      	ldr	r2, [pc, #300]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002ed4:	f043 0302 	orr.w	r3, r3, #2
 8002ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eda:	4b49      	ldr	r3, [pc, #292]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	4b45      	ldr	r3, [pc, #276]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	4a44      	ldr	r2, [pc, #272]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002ef0:	f043 0304 	orr.w	r3, r3, #4
 8002ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ef6:	4b42      	ldr	r3, [pc, #264]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	4b3e      	ldr	r3, [pc, #248]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	4a3d      	ldr	r2, [pc, #244]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002f0c:	f043 0308 	orr.w	r3, r3, #8
 8002f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f12:	4b3b      	ldr	r3, [pc, #236]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	607b      	str	r3, [r7, #4]
 8002f22:	4b37      	ldr	r3, [pc, #220]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	4a36      	ldr	r2, [pc, #216]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002f28:	f043 0320 	orr.w	r3, r3, #32
 8002f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f2e:	4b34      	ldr	r3, [pc, #208]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	603b      	str	r3, [r7, #0]
 8002f3e:	4b30      	ldr	r3, [pc, #192]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	4a2f      	ldr	r2, [pc, #188]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003000 <LCD_GPIO_Init+0x174>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002f56:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002f5a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002f64:	2302      	movs	r3, #2
 8002f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002f68:	230e      	movs	r3, #14
 8002f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002f6c:	f107 031c 	add.w	r3, r7, #28
 8002f70:	4619      	mov	r1, r3
 8002f72:	4824      	ldr	r0, [pc, #144]	@ (8003004 <LCD_GPIO_Init+0x178>)
 8002f74:	f001 fd82 	bl	8004a7c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002f78:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002f7c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002f7e:	f107 031c 	add.w	r3, r7, #28
 8002f82:	4619      	mov	r1, r3
 8002f84:	4820      	ldr	r0, [pc, #128]	@ (8003008 <LCD_GPIO_Init+0x17c>)
 8002f86:	f001 fd79 	bl	8004a7c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002f8a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002f8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002f90:	f107 031c 	add.w	r3, r7, #28
 8002f94:	4619      	mov	r1, r3
 8002f96:	481d      	ldr	r0, [pc, #116]	@ (800300c <LCD_GPIO_Init+0x180>)
 8002f98:	f001 fd70 	bl	8004a7c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002f9c:	2348      	movs	r3, #72	@ 0x48
 8002f9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002fa0:	f107 031c 	add.w	r3, r7, #28
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	481a      	ldr	r0, [pc, #104]	@ (8003010 <LCD_GPIO_Init+0x184>)
 8002fa8:	f001 fd68 	bl	8004a7c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002fac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002fb2:	f107 031c 	add.w	r3, r7, #28
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4816      	ldr	r0, [pc, #88]	@ (8003014 <LCD_GPIO_Init+0x188>)
 8002fba:	f001 fd5f 	bl	8004a7c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002fbe:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002fc2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002fc4:	f107 031c 	add.w	r3, r7, #28
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4813      	ldr	r0, [pc, #76]	@ (8003018 <LCD_GPIO_Init+0x18c>)
 8002fcc:	f001 fd56 	bl	8004a7c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002fd4:	2309      	movs	r3, #9
 8002fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002fd8:	f107 031c 	add.w	r3, r7, #28
 8002fdc:	4619      	mov	r1, r3
 8002fde:	480a      	ldr	r0, [pc, #40]	@ (8003008 <LCD_GPIO_Init+0x17c>)
 8002fe0:	f001 fd4c 	bl	8004a7c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002fe4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002fea:	f107 031c 	add.w	r3, r7, #28
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4809      	ldr	r0, [pc, #36]	@ (8003018 <LCD_GPIO_Init+0x18c>)
 8002ff2:	f001 fd43 	bl	8004a7c <HAL_GPIO_Init>
}
 8002ff6:	bf00      	nop
 8002ff8:	3730      	adds	r7, #48	@ 0x30
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800
 8003004:	40020000 	.word	0x40020000
 8003008:	40020400 	.word	0x40020400
 800300c:	40020800 	.word	0x40020800
 8003010:	40020c00 	.word	0x40020c00
 8003014:	40021400 	.word	0x40021400
 8003018:	40021800 	.word	0x40021800

0800301c <LTCD__Init>:


void LTCD__Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  	hltdc.Instance = LTDC;
 8003020:	4b2a      	ldr	r3, [pc, #168]	@ (80030cc <LTCD__Init+0xb0>)
 8003022:	4a2b      	ldr	r2, [pc, #172]	@ (80030d0 <LTCD__Init+0xb4>)
 8003024:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8003026:	4b29      	ldr	r3, [pc, #164]	@ (80030cc <LTCD__Init+0xb0>)
 8003028:	2209      	movs	r2, #9
 800302a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 800302c:	4b27      	ldr	r3, [pc, #156]	@ (80030cc <LTCD__Init+0xb0>)
 800302e:	2201      	movs	r2, #1
 8003030:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8003032:	4b26      	ldr	r3, [pc, #152]	@ (80030cc <LTCD__Init+0xb0>)
 8003034:	221d      	movs	r2, #29
 8003036:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8003038:	4b24      	ldr	r3, [pc, #144]	@ (80030cc <LTCD__Init+0xb0>)
 800303a:	2203      	movs	r2, #3
 800303c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800303e:	4b23      	ldr	r3, [pc, #140]	@ (80030cc <LTCD__Init+0xb0>)
 8003040:	f240 120d 	movw	r2, #269	@ 0x10d
 8003044:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8003046:	4b21      	ldr	r3, [pc, #132]	@ (80030cc <LTCD__Init+0xb0>)
 8003048:	f240 1243 	movw	r2, #323	@ 0x143
 800304c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800304e:	4b1f      	ldr	r3, [pc, #124]	@ (80030cc <LTCD__Init+0xb0>)
 8003050:	f240 1217 	movw	r2, #279	@ 0x117
 8003054:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8003056:	4b1d      	ldr	r3, [pc, #116]	@ (80030cc <LTCD__Init+0xb0>)
 8003058:	f240 1247 	movw	r2, #327	@ 0x147
 800305c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800305e:	4b1b      	ldr	r3, [pc, #108]	@ (80030cc <LTCD__Init+0xb0>)
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8003066:	4b19      	ldr	r3, [pc, #100]	@ (80030cc <LTCD__Init+0xb0>)
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800306e:	4b17      	ldr	r3, [pc, #92]	@ (80030cc <LTCD__Init+0xb0>)
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003076:	4b17      	ldr	r3, [pc, #92]	@ (80030d4 <LTCD__Init+0xb8>)
 8003078:	2208      	movs	r2, #8
 800307a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800307c:	4b15      	ldr	r3, [pc, #84]	@ (80030d4 <LTCD__Init+0xb8>)
 800307e:	22c0      	movs	r2, #192	@ 0xc0
 8003080:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003082:	4b14      	ldr	r3, [pc, #80]	@ (80030d4 <LTCD__Init+0xb8>)
 8003084:	2204      	movs	r2, #4
 8003086:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003088:	4b12      	ldr	r3, [pc, #72]	@ (80030d4 <LTCD__Init+0xb8>)
 800308a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800308e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003090:	4810      	ldr	r0, [pc, #64]	@ (80030d4 <LTCD__Init+0xb8>)
 8003092:	f002 fee7 	bl	8005e64 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003096:	4b0d      	ldr	r3, [pc, #52]	@ (80030cc <LTCD__Init+0xb0>)
 8003098:	2200      	movs	r2, #0
 800309a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800309c:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <LTCD__Init+0xb0>)
 800309e:	2200      	movs	r2, #0
 80030a0:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80030a2:	4b0a      	ldr	r3, [pc, #40]	@ (80030cc <LTCD__Init+0xb0>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80030a8:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <LTCD__Init+0xb0>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80030ae:	f7ff feed 	bl	8002e8c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80030b2:	4806      	ldr	r0, [pc, #24]	@ (80030cc <LTCD__Init+0xb0>)
 80030b4:	f001 ffcc 	bl	8005050 <HAL_LTDC_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80030be:	f000 fac9 	bl	8003654 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80030c2:	f000 facb 	bl	800365c <ili9341_Init>
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	2000032c 	.word	0x2000032c
 80030d0:	40016800 	.word	0x40016800
 80030d4:	200003d4 	.word	0x200003d4

080030d8 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b090      	sub	sp, #64	@ 0x40
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
  LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80030e6:	23f0      	movs	r3, #240	@ 0xf0
 80030e8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80030ee:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80030f2:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80030f4:	2302      	movs	r3, #2
 80030f6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80030f8:	23ff      	movs	r3, #255	@ 0xff
 80030fa:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003100:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003104:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003106:	2305      	movs	r3, #5
 8003108:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8003110:	4b0f      	ldr	r3, [pc, #60]	@ (8003150 <LTCD_Layer_Init+0x78>)
 8003112:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8003114:	23f0      	movs	r3, #240	@ 0xf0
 8003116:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8003118:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800311c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8003130:	79fa      	ldrb	r2, [r7, #7]
 8003132:	f107 030c 	add.w	r3, r7, #12
 8003136:	4619      	mov	r1, r3
 8003138:	4806      	ldr	r0, [pc, #24]	@ (8003154 <LTCD_Layer_Init+0x7c>)
 800313a:	f002 f859 	bl	80051f0 <HAL_LTDC_ConfigLayer>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8003144:	f000 fa86 	bl	8003654 <LCD_Error_Handler>
	}

}
 8003148:	bf00      	nop
 800314a:	3740      	adds	r7, #64	@ 0x40
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20000460 	.word	0x20000460
 8003154:	2000032c 	.word	0x2000032c

08003158 <LCD_Draw_Pixel>:

// using fb[y*W+x]
// Draws a single pixel, should be useds only within this fileset and should not be seen by external clients. 
int LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color){
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
 8003162:	460b      	mov	r3, r1
 8003164:	80bb      	strh	r3, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	807b      	strh	r3, [r7, #2]
	if(x < LCD_PIXEL_WIDTH && y < LCD_PIXEL_HEIGHT){
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	2bef      	cmp	r3, #239	@ 0xef
 800316e:	d811      	bhi.n	8003194 <LCD_Draw_Pixel+0x3c>
 8003170:	88bb      	ldrh	r3, [r7, #4]
 8003172:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003176:	d20d      	bcs.n	8003194 <LCD_Draw_Pixel+0x3c>
		frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8003178:	88ba      	ldrh	r2, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	461a      	mov	r2, r3
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	4413      	add	r3, r2
 8003188:	4906      	ldr	r1, [pc, #24]	@ (80031a4 <LCD_Draw_Pixel+0x4c>)
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		return 1; // normal draw
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <LCD_Draw_Pixel+0x3e>
	}else{
		return 0; // outside of region, failure
 8003194:	2300      	movs	r3, #0
	}
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000460 	.word	0x20000460

080031a8 <LCD_DrawChar>:


void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	603a      	str	r2, [r7, #0]
 80031b2:	80fb      	strh	r3, [r7, #6]
 80031b4:	460b      	mov	r3, r1
 80031b6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	e04c      	b.n	8003260 <LCD_DrawChar+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	e03f      	b.n	800324c <LCD_DrawChar+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	4413      	add	r3, r2
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	4619      	mov	r1, r3
 80031d8:	4b27      	ldr	r3, [pc, #156]	@ (8003278 <LCD_DrawChar+0xd0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	889b      	ldrh	r3, [r3, #4]
 80031de:	4a27      	ldr	r2, [pc, #156]	@ (800327c <LCD_DrawChar+0xd4>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	08db      	lsrs	r3, r3, #3
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	2280      	movs	r2, #128	@ 0x80
 80031ec:	409a      	lsls	r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	fa42 f303 	asr.w	r3, r2, r3
 80031f4:	400b      	ands	r3, r1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d104      	bne.n	8003204 <LCD_DrawChar+0x5c>
 80031fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003278 <LCD_DrawChar+0xd0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	889b      	ldrh	r3, [r3, #4]
 8003200:	2b0c      	cmp	r3, #12
 8003202:	d920      	bls.n	8003246 <LCD_DrawChar+0x9e>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	4413      	add	r3, r2
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	fa42 f303 	asr.w	r3, r2, r3
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d104      	bne.n	8003228 <LCD_DrawChar+0x80>
 800321e:	4b16      	ldr	r3, [pc, #88]	@ (8003278 <LCD_DrawChar+0xd0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	889b      	ldrh	r3, [r3, #4]
 8003224:	2b0c      	cmp	r3, #12
 8003226:	d80e      	bhi.n	8003246 <LCD_DrawChar+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	b29a      	uxth	r2, r3
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	4413      	add	r3, r2
 8003230:	b298      	uxth	r0, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	b29a      	uxth	r2, r3
 8003236:	88bb      	ldrh	r3, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	b29b      	uxth	r3, r3
 800323c:	4a10      	ldr	r2, [pc, #64]	@ (8003280 <LCD_DrawChar+0xd8>)
 800323e:	8812      	ldrh	r2, [r2, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	f7ff ff89 	bl	8003158 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	3301      	adds	r3, #1
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	4b0a      	ldr	r3, [pc, #40]	@ (8003278 <LCD_DrawChar+0xd0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	889b      	ldrh	r3, [r3, #4]
 8003252:	461a      	mov	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4293      	cmp	r3, r2
 8003258:	d3b8      	bcc.n	80031cc <LCD_DrawChar+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	3301      	adds	r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	4b05      	ldr	r3, [pc, #20]	@ (8003278 <LCD_DrawChar+0xd0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	88db      	ldrh	r3, [r3, #6]
 8003266:	461a      	mov	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4293      	cmp	r3, r2
 800326c:	d3ab      	bcc.n	80031c6 <LCD_DrawChar+0x1e>
      }
    }
  }
}
 800326e:	bf00      	nop
 8003270:	bf00      	nop
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20000404 	.word	0x20000404
 800327c:	aaaaaaab 	.word	0xaaaaaaab
 8003280:	20000214 	.word	0x20000214

08003284 <LCD_DisplayChar>:

// Displays Char
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	80fb      	strh	r3, [r7, #6]
 800328e:	460b      	mov	r3, r1
 8003290:	80bb      	strh	r3, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	3b20      	subs	r3, #32
 800329a:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 800329c:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <LCD_DisplayChar+0x40>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	4907      	ldr	r1, [pc, #28]	@ (80032c4 <LCD_DisplayChar+0x40>)
 80032a6:	6809      	ldr	r1, [r1, #0]
 80032a8:	88c9      	ldrh	r1, [r1, #6]
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	441a      	add	r2, r3
 80032b2:	88b9      	ldrh	r1, [r7, #4]
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ff76 	bl	80031a8 <LCD_DrawChar>
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20000404 	.word	0x20000404

080032c8 <LCD_DisplayString>:

void LCD_DisplayString(uint16_t Xpos, uint16_t Ypos, char *string){
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	603a      	str	r2, [r7, #0]
 80032d2:	80fb      	strh	r3, [r7, #6]
 80032d4:	460b      	mov	r3, r1
 80032d6:	80bb      	strh	r3, [r7, #4]
	if(string == NULL) return;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d017      	beq.n	800330e <LCD_DisplayString+0x46>
	uint16_t offset = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	81fb      	strh	r3, [r7, #14]
	while(*string != '\0'){
 80032e2:	e00f      	b.n	8003304 <LCD_DisplayString+0x3c>
		LCD_DisplayChar(Xpos+offset, Ypos, *string);
 80032e4:	88fa      	ldrh	r2, [r7, #6]
 80032e6:	89fb      	ldrh	r3, [r7, #14]
 80032e8:	4413      	add	r3, r2
 80032ea:	b298      	uxth	r0, r3
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	781a      	ldrb	r2, [r3, #0]
 80032f0:	88bb      	ldrh	r3, [r7, #4]
 80032f2:	4619      	mov	r1, r3
 80032f4:	f7ff ffc6 	bl	8003284 <LCD_DisplayChar>
		string++;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	3301      	adds	r3, #1
 80032fc:	603b      	str	r3, [r7, #0]
		offset+=15;
 80032fe:	89fb      	ldrh	r3, [r7, #14]
 8003300:	330f      	adds	r3, #15
 8003302:	81fb      	strh	r3, [r7, #14]
	while(*string != '\0'){
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1eb      	bne.n	80032e4 <LCD_DisplayString+0x1c>
 800330c:	e000      	b.n	8003310 <LCD_DisplayString+0x48>
	if(string == NULL) return;
 800330e:	bf00      	nop
	}
}
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <LCD_DisplayNumber>:

//Displays Number, size is the number of digits in the number you want to Display
void LCD_DisplayNumber(uint16_t Xpos, uint16_t Ypos, uint16_t Number){
 8003318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800331c:	b089      	sub	sp, #36	@ 0x24
 800331e:	af00      	add	r7, sp, #0
 8003320:	4603      	mov	r3, r0
 8003322:	80fb      	strh	r3, [r7, #6]
 8003324:	460b      	mov	r3, r1
 8003326:	80bb      	strh	r3, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	807b      	strh	r3, [r7, #2]
 800332c:	466b      	mov	r3, sp
 800332e:	461e      	mov	r6, r3

	uint8_t numDigits = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	77fb      	strb	r3, [r7, #31]
	if(Number == 0){
 8003334:	887b      	ldrh	r3, [r7, #2]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d107      	bne.n	800334a <LCD_DisplayNumber+0x32>
		LCD_DisplayChar(Xpos,Ypos,'0');
 800333a:	88b9      	ldrh	r1, [r7, #4]
 800333c:	88fb      	ldrh	r3, [r7, #6]
 800333e:	2230      	movs	r2, #48	@ 0x30
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff9f 	bl	8003284 <LCD_DisplayChar>
		return;
 8003346:	46b5      	mov	sp, r6
 8003348:	e074      	b.n	8003434 <LCD_DisplayNumber+0x11c>
	}
	else{
		uint16_t temp = Number;
 800334a:	887b      	ldrh	r3, [r7, #2]
 800334c:	83bb      	strh	r3, [r7, #28]
		while (temp > 0) {
 800334e:	e008      	b.n	8003362 <LCD_DisplayNumber+0x4a>
			temp /= 10;
 8003350:	8bbb      	ldrh	r3, [r7, #28]
 8003352:	4a3a      	ldr	r2, [pc, #232]	@ (800343c <LCD_DisplayNumber+0x124>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	08db      	lsrs	r3, r3, #3
 800335a:	83bb      	strh	r3, [r7, #28]
			numDigits++;
 800335c:	7ffb      	ldrb	r3, [r7, #31]
 800335e:	3301      	adds	r3, #1
 8003360:	77fb      	strb	r3, [r7, #31]
		while (temp > 0) {
 8003362:	8bbb      	ldrh	r3, [r7, #28]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f3      	bne.n	8003350 <LCD_DisplayNumber+0x38>
		}
	}



	uint8_t num_ascii[numDigits];
 8003368:	7ff9      	ldrb	r1, [r7, #31]
 800336a:	460b      	mov	r3, r1
 800336c:	3b01      	subs	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	b2cb      	uxtb	r3, r1
 8003372:	2200      	movs	r2, #0
 8003374:	4698      	mov	r8, r3
 8003376:	4691      	mov	r9, r2
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003384:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003388:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800338c:	b2cb      	uxtb	r3, r1
 800338e:	2200      	movs	r2, #0
 8003390:	461c      	mov	r4, r3
 8003392:	4615      	mov	r5, r2
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	00eb      	lsls	r3, r5, #3
 800339e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033a2:	00e2      	lsls	r2, r4, #3
 80033a4:	460b      	mov	r3, r1
 80033a6:	3307      	adds	r3, #7
 80033a8:	08db      	lsrs	r3, r3, #3
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	ebad 0d03 	sub.w	sp, sp, r3
 80033b0:	466b      	mov	r3, sp
 80033b2:	3300      	adds	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
	// Convert each digit to a character and print it with standard spacing.
	for (int i = numDigits - 1; i >= 0; i--) {
 80033b6:	7ffb      	ldrb	r3, [r7, #31]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	e01b      	b.n	80033f6 <LCD_DisplayNumber+0xde>
		num_ascii[i] = '0' + (Number % 10);
 80033be:	887a      	ldrh	r2, [r7, #2]
 80033c0:	4b1e      	ldr	r3, [pc, #120]	@ (800343c <LCD_DisplayNumber+0x124>)
 80033c2:	fba3 1302 	umull	r1, r3, r3, r2
 80033c6:	08d9      	lsrs	r1, r3, #3
 80033c8:	460b      	mov	r3, r1
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	3330      	adds	r3, #48	@ 0x30
 80033d8:	b2d9      	uxtb	r1, r3
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	4413      	add	r3, r2
 80033e0:	460a      	mov	r2, r1
 80033e2:	701a      	strb	r2, [r3, #0]

		Number /= 10;
 80033e4:	887b      	ldrh	r3, [r7, #2]
 80033e6:	4a15      	ldr	r2, [pc, #84]	@ (800343c <LCD_DisplayNumber+0x124>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	08db      	lsrs	r3, r3, #3
 80033ee:	807b      	strh	r3, [r7, #2]
	for (int i = numDigits - 1; i >= 0; i--) {
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	dae0      	bge.n	80033be <LCD_DisplayNumber+0xa6>
	}

	//print numbers with offset on x-axis
	uint16_t offset = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	82fb      	strh	r3, [r7, #22]
	for(int i =0; i<numDigits; i++){
 8003400:	2300      	movs	r3, #0
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	e011      	b.n	800342a <LCD_DisplayNumber+0x112>
		LCD_DisplayChar(Xpos+offset,Ypos,num_ascii[i]);
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	8afb      	ldrh	r3, [r7, #22]
 800340a:	4413      	add	r3, r2
 800340c:	b298      	uxth	r0, r3
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4413      	add	r3, r2
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	88bb      	ldrh	r3, [r7, #4]
 8003418:	4619      	mov	r1, r3
 800341a:	f7ff ff33 	bl	8003284 <LCD_DisplayChar>
		offset+=12;
 800341e:	8afb      	ldrh	r3, [r7, #22]
 8003420:	330c      	adds	r3, #12
 8003422:	82fb      	strh	r3, [r7, #22]
	for(int i =0; i<numDigits; i++){
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	3301      	adds	r3, #1
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	7ffb      	ldrb	r3, [r7, #31]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	429a      	cmp	r2, r3
 8003430:	dbe9      	blt.n	8003406 <LCD_DisplayNumber+0xee>
 8003432:	46b5      	mov	sp, r6
	}

}
 8003434:	3724      	adds	r7, #36	@ 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800343c:	cccccccd 	.word	0xcccccccd

08003440 <LCD_SetTextColor>:

void LCD_SetTextColor(uint16_t Color)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800344a:	4a04      	ldr	r2, [pc, #16]	@ (800345c <LCD_SetTextColor+0x1c>)
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	8013      	strh	r3, [r2, #0]
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	20000214 	.word	0x20000214

08003460 <LCD_SetFont>:

void LCD_SetFont(FONT_t *fonts)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8003468:	4a04      	ldr	r2, [pc, #16]	@ (800347c <LCD_SetFont+0x1c>)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6013      	str	r3, [r2, #0]
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000404 	.word	0x20000404

08003480 <LCD_Draw_Circle_Fill>:

// Draw Circle Filled
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	4604      	mov	r4, r0
 8003488:	4608      	mov	r0, r1
 800348a:	4611      	mov	r1, r2
 800348c:	461a      	mov	r2, r3
 800348e:	4623      	mov	r3, r4
 8003490:	80fb      	strh	r3, [r7, #6]
 8003492:	4603      	mov	r3, r0
 8003494:	80bb      	strh	r3, [r7, #4]
 8003496:	460b      	mov	r3, r1
 8003498:	807b      	strh	r3, [r7, #2]
 800349a:	4613      	mov	r3, r2
 800349c:	803b      	strh	r3, [r7, #0]
  for(int16_t y=-radius; y<=radius; y++)
 800349e:	887b      	ldrh	r3, [r7, #2]
 80034a0:	425b      	negs	r3, r3
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	81fb      	strh	r3, [r7, #14]
 80034a6:	e034      	b.n	8003512 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 80034a8:	887b      	ldrh	r3, [r7, #2]
 80034aa:	425b      	negs	r3, r3
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	81bb      	strh	r3, [r7, #12]
 80034b0:	e024      	b.n	80034fc <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 80034b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80034b6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80034ba:	fb03 f202 	mul.w	r2, r3, r2
 80034be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034c2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	441a      	add	r2, r3
 80034cc:	887b      	ldrh	r3, [r7, #2]
 80034ce:	8879      	ldrh	r1, [r7, #2]
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	429a      	cmp	r2, r3
 80034d6:	dc0b      	bgt.n	80034f0 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 80034d8:	89ba      	ldrh	r2, [r7, #12]
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	4413      	add	r3, r2
 80034de:	b298      	uxth	r0, r3
 80034e0:	89fa      	ldrh	r2, [r7, #14]
 80034e2:	88bb      	ldrh	r3, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	883a      	ldrh	r2, [r7, #0]
 80034ea:	4619      	mov	r1, r3
 80034ec:	f7ff fe34 	bl	8003158 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 80034f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3301      	adds	r3, #1
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	81bb      	strh	r3, [r7, #12]
 80034fc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003500:	887b      	ldrh	r3, [r7, #2]
 8003502:	429a      	cmp	r2, r3
 8003504:	ddd5      	ble.n	80034b2 <LCD_Draw_Circle_Fill+0x32>
  for(int16_t y=-radius; y<=radius; y++)
 8003506:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800350a:	b29b      	uxth	r3, r3
 800350c:	3301      	adds	r3, #1
 800350e:	b29b      	uxth	r3, r3
 8003510:	81fb      	strh	r3, [r7, #14]
 8003512:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003516:	887b      	ldrh	r3, [r7, #2]
 8003518:	429a      	cmp	r2, r3
 800351a:	ddc5      	ble.n	80034a8 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 800351c:	bf00      	nop
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	bd90      	pop	{r4, r7, pc}

08003526 <LCD_Draw_Rectangle_Fill>:

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t width, uint16_t height, uint16_t color)
{
 8003526:	b590      	push	{r4, r7, lr}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	4604      	mov	r4, r0
 800352e:	4608      	mov	r0, r1
 8003530:	4611      	mov	r1, r2
 8003532:	461a      	mov	r2, r3
 8003534:	4623      	mov	r3, r4
 8003536:	80fb      	strh	r3, [r7, #6]
 8003538:	4603      	mov	r3, r0
 800353a:	80bb      	strh	r3, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
 8003540:	4613      	mov	r3, r2
 8003542:	803b      	strh	r3, [r7, #0]
	for(int y=Ypos; y<(height+Ypos); y++){
 8003544:	88bb      	ldrh	r3, [r7, #4]
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	e009      	b.n	800355e <LCD_Draw_Rectangle_Fill+0x38>
		LCD_Draw_Horizontal_Line(Xpos, y, width, color);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	b299      	uxth	r1, r3
 800354e:	8c3b      	ldrh	r3, [r7, #32]
 8003550:	887a      	ldrh	r2, [r7, #2]
 8003552:	88f8      	ldrh	r0, [r7, #6]
 8003554:	f000 f835 	bl	80035c2 <LCD_Draw_Horizontal_Line>
	for(int y=Ypos; y<(height+Ypos); y++){
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	3301      	adds	r3, #1
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	883a      	ldrh	r2, [r7, #0]
 8003560:	88bb      	ldrh	r3, [r7, #4]
 8003562:	4413      	add	r3, r2
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	429a      	cmp	r2, r3
 8003568:	dbef      	blt.n	800354a <LCD_Draw_Rectangle_Fill+0x24>
	}
}
 800356a:	bf00      	nop
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	bd90      	pop	{r4, r7, pc}

08003574 <LCD_Draw_Vertical_Line>:

// Draw Vertical Line
void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8003574:	b590      	push	{r4, r7, lr}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	4604      	mov	r4, r0
 800357c:	4608      	mov	r0, r1
 800357e:	4611      	mov	r1, r2
 8003580:	461a      	mov	r2, r3
 8003582:	4623      	mov	r3, r4
 8003584:	80fb      	strh	r3, [r7, #6]
 8003586:	4603      	mov	r3, r0
 8003588:	80bb      	strh	r3, [r7, #4]
 800358a:	460b      	mov	r3, r1
 800358c:	807b      	strh	r3, [r7, #2]
 800358e:	4613      	mov	r3, r2
 8003590:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8003592:	2300      	movs	r3, #0
 8003594:	81fb      	strh	r3, [r7, #14]
 8003596:	e00b      	b.n	80035b0 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8003598:	89fa      	ldrh	r2, [r7, #14]
 800359a:	88bb      	ldrh	r3, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	b299      	uxth	r1, r3
 80035a0:	883a      	ldrh	r2, [r7, #0]
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fdd7 	bl	8003158 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80035aa:	89fb      	ldrh	r3, [r7, #14]
 80035ac:	3301      	adds	r3, #1
 80035ae:	81fb      	strh	r3, [r7, #14]
 80035b0:	89fa      	ldrh	r2, [r7, #14]
 80035b2:	887b      	ldrh	r3, [r7, #2]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d3ef      	bcc.n	8003598 <LCD_Draw_Vertical_Line+0x24>
  }
}
 80035b8:	bf00      	nop
 80035ba:	bf00      	nop
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd90      	pop	{r4, r7, pc}

080035c2 <LCD_Draw_Horizontal_Line>:

// Draw Horizontal Line
void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80035c2:	b590      	push	{r4, r7, lr}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	4604      	mov	r4, r0
 80035ca:	4608      	mov	r0, r1
 80035cc:	4611      	mov	r1, r2
 80035ce:	461a      	mov	r2, r3
 80035d0:	4623      	mov	r3, r4
 80035d2:	80fb      	strh	r3, [r7, #6]
 80035d4:	4603      	mov	r3, r0
 80035d6:	80bb      	strh	r3, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	807b      	strh	r3, [r7, #2]
 80035dc:	4613      	mov	r3, r2
 80035de:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80035e0:	2300      	movs	r3, #0
 80035e2:	81fb      	strh	r3, [r7, #14]
 80035e4:	e00b      	b.n	80035fe <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 80035e6:	88fa      	ldrh	r2, [r7, #6]
 80035e8:	89fb      	ldrh	r3, [r7, #14]
 80035ea:	4413      	add	r3, r2
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	883a      	ldrh	r2, [r7, #0]
 80035f0:	88b9      	ldrh	r1, [r7, #4]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fdb0 	bl	8003158 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80035f8:	89fb      	ldrh	r3, [r7, #14]
 80035fa:	3301      	adds	r3, #1
 80035fc:	81fb      	strh	r3, [r7, #14]
 80035fe:	89fa      	ldrh	r2, [r7, #14]
 8003600:	887b      	ldrh	r3, [r7, #2]
 8003602:	429a      	cmp	r2, r3
 8003604:	d3ef      	bcc.n	80035e6 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8003606:	bf00      	nop
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	bd90      	pop	{r4, r7, pc}

08003610 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	460a      	mov	r2, r1
 800361a:	71fb      	strb	r3, [r7, #7]
 800361c:	4613      	mov	r3, r2
 800361e:	80bb      	strh	r3, [r7, #4]
  if (LayerIndex == 0){
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10e      	bne.n	8003644 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	e007      	b.n	800363c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 800362c:	4908      	ldr	r1, [pc, #32]	@ (8003650 <LCD_Clear+0x40>)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	88ba      	ldrh	r2, [r7, #4]
 8003632:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3301      	adds	r3, #1
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8003642:	d3f3      	bcc.n	800362c <LCD_Clear+0x1c>
		}
	}
}
 8003644:	bf00      	nop
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	20000460 	.word	0x20000460

08003654 <LCD_Error_Handler>:

void LCD_Error_Handler(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  for(;;); // Something went wrong
 8003658:	bf00      	nop
 800365a:	e7fd      	b.n	8003658 <LCD_Error_Handler+0x4>

0800365c <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003660:	f000 f9fe 	bl	8003a60 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8003664:	20ca      	movs	r0, #202	@ 0xca
 8003666:	f000 f943 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800366a:	20c3      	movs	r0, #195	@ 0xc3
 800366c:	f000 f94d 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8003670:	2008      	movs	r0, #8
 8003672:	f000 f94a 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8003676:	2050      	movs	r0, #80	@ 0x50
 8003678:	f000 f947 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 800367c:	20cf      	movs	r0, #207	@ 0xcf
 800367e:	f000 f937 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8003682:	2000      	movs	r0, #0
 8003684:	f000 f941 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8003688:	20c1      	movs	r0, #193	@ 0xc1
 800368a:	f000 f93e 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800368e:	2030      	movs	r0, #48	@ 0x30
 8003690:	f000 f93b 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8003694:	20ed      	movs	r0, #237	@ 0xed
 8003696:	f000 f92b 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 800369a:	2064      	movs	r0, #100	@ 0x64
 800369c:	f000 f935 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80036a0:	2003      	movs	r0, #3
 80036a2:	f000 f932 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80036a6:	2012      	movs	r0, #18
 80036a8:	f000 f92f 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80036ac:	2081      	movs	r0, #129	@ 0x81
 80036ae:	f000 f92c 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80036b2:	20e8      	movs	r0, #232	@ 0xe8
 80036b4:	f000 f91c 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80036b8:	2085      	movs	r0, #133	@ 0x85
 80036ba:	f000 f926 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80036be:	2000      	movs	r0, #0
 80036c0:	f000 f923 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80036c4:	2078      	movs	r0, #120	@ 0x78
 80036c6:	f000 f920 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80036ca:	20cb      	movs	r0, #203	@ 0xcb
 80036cc:	f000 f910 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80036d0:	2039      	movs	r0, #57	@ 0x39
 80036d2:	f000 f91a 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80036d6:	202c      	movs	r0, #44	@ 0x2c
 80036d8:	f000 f917 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80036dc:	2000      	movs	r0, #0
 80036de:	f000 f914 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80036e2:	2034      	movs	r0, #52	@ 0x34
 80036e4:	f000 f911 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80036e8:	2002      	movs	r0, #2
 80036ea:	f000 f90e 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80036ee:	20f7      	movs	r0, #247	@ 0xf7
 80036f0:	f000 f8fe 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80036f4:	2020      	movs	r0, #32
 80036f6:	f000 f908 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80036fa:	20ea      	movs	r0, #234	@ 0xea
 80036fc:	f000 f8f8 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003700:	2000      	movs	r0, #0
 8003702:	f000 f902 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003706:	2000      	movs	r0, #0
 8003708:	f000 f8ff 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 800370c:	20b1      	movs	r0, #177	@ 0xb1
 800370e:	f000 f8ef 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003712:	2000      	movs	r0, #0
 8003714:	f000 f8f9 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8003718:	201b      	movs	r0, #27
 800371a:	f000 f8f6 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800371e:	20b6      	movs	r0, #182	@ 0xb6
 8003720:	f000 f8e6 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003724:	200a      	movs	r0, #10
 8003726:	f000 f8f0 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 800372a:	20a2      	movs	r0, #162	@ 0xa2
 800372c:	f000 f8ed 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8003730:	20c0      	movs	r0, #192	@ 0xc0
 8003732:	f000 f8dd 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8003736:	2010      	movs	r0, #16
 8003738:	f000 f8e7 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800373c:	20c1      	movs	r0, #193	@ 0xc1
 800373e:	f000 f8d7 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8003742:	2010      	movs	r0, #16
 8003744:	f000 f8e1 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8003748:	20c5      	movs	r0, #197	@ 0xc5
 800374a:	f000 f8d1 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800374e:	2045      	movs	r0, #69	@ 0x45
 8003750:	f000 f8db 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8003754:	2015      	movs	r0, #21
 8003756:	f000 f8d8 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800375a:	20c7      	movs	r0, #199	@ 0xc7
 800375c:	f000 f8c8 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8003760:	2090      	movs	r0, #144	@ 0x90
 8003762:	f000 f8d2 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8003766:	2036      	movs	r0, #54	@ 0x36
 8003768:	f000 f8c2 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800376c:	20c8      	movs	r0, #200	@ 0xc8
 800376e:	f000 f8cc 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8003772:	20f2      	movs	r0, #242	@ 0xf2
 8003774:	f000 f8bc 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003778:	2000      	movs	r0, #0
 800377a:	f000 f8c6 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800377e:	20b0      	movs	r0, #176	@ 0xb0
 8003780:	f000 f8b6 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8003784:	20c2      	movs	r0, #194	@ 0xc2
 8003786:	f000 f8c0 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800378a:	20b6      	movs	r0, #182	@ 0xb6
 800378c:	f000 f8b0 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003790:	200a      	movs	r0, #10
 8003792:	f000 f8ba 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8003796:	20a7      	movs	r0, #167	@ 0xa7
 8003798:	f000 f8b7 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 800379c:	2027      	movs	r0, #39	@ 0x27
 800379e:	f000 f8b4 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80037a2:	2004      	movs	r0, #4
 80037a4:	f000 f8b1 	bl	800390a <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80037a8:	202a      	movs	r0, #42	@ 0x2a
 80037aa:	f000 f8a1 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80037ae:	2000      	movs	r0, #0
 80037b0:	f000 f8ab 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80037b4:	2000      	movs	r0, #0
 80037b6:	f000 f8a8 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80037ba:	2000      	movs	r0, #0
 80037bc:	f000 f8a5 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80037c0:	20ef      	movs	r0, #239	@ 0xef
 80037c2:	f000 f8a2 	bl	800390a <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80037c6:	202b      	movs	r0, #43	@ 0x2b
 80037c8:	f000 f892 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80037cc:	2000      	movs	r0, #0
 80037ce:	f000 f89c 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80037d2:	2000      	movs	r0, #0
 80037d4:	f000 f899 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80037d8:	2001      	movs	r0, #1
 80037da:	f000 f896 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80037de:	203f      	movs	r0, #63	@ 0x3f
 80037e0:	f000 f893 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80037e4:	20f6      	movs	r0, #246	@ 0xf6
 80037e6:	f000 f883 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80037ea:	2001      	movs	r0, #1
 80037ec:	f000 f88d 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80037f0:	2000      	movs	r0, #0
 80037f2:	f000 f88a 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80037f6:	2006      	movs	r0, #6
 80037f8:	f000 f887 	bl	800390a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80037fc:	202c      	movs	r0, #44	@ 0x2c
 80037fe:	f000 f877 	bl	80038f0 <ili9341_Write_Reg>
  LCD_Delay(200);
 8003802:	20c8      	movs	r0, #200	@ 0xc8
 8003804:	f000 f9e8 	bl	8003bd8 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8003808:	2026      	movs	r0, #38	@ 0x26
 800380a:	f000 f871 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800380e:	2001      	movs	r0, #1
 8003810:	f000 f87b 	bl	800390a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8003814:	20e0      	movs	r0, #224	@ 0xe0
 8003816:	f000 f86b 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800381a:	200f      	movs	r0, #15
 800381c:	f000 f875 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8003820:	2029      	movs	r0, #41	@ 0x29
 8003822:	f000 f872 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8003826:	2024      	movs	r0, #36	@ 0x24
 8003828:	f000 f86f 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800382c:	200c      	movs	r0, #12
 800382e:	f000 f86c 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8003832:	200e      	movs	r0, #14
 8003834:	f000 f869 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003838:	2009      	movs	r0, #9
 800383a:	f000 f866 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800383e:	204e      	movs	r0, #78	@ 0x4e
 8003840:	f000 f863 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8003844:	2078      	movs	r0, #120	@ 0x78
 8003846:	f000 f860 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800384a:	203c      	movs	r0, #60	@ 0x3c
 800384c:	f000 f85d 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003850:	2009      	movs	r0, #9
 8003852:	f000 f85a 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8003856:	2013      	movs	r0, #19
 8003858:	f000 f857 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800385c:	2005      	movs	r0, #5
 800385e:	f000 f854 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8003862:	2017      	movs	r0, #23
 8003864:	f000 f851 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003868:	2011      	movs	r0, #17
 800386a:	f000 f84e 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800386e:	2000      	movs	r0, #0
 8003870:	f000 f84b 	bl	800390a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8003874:	20e1      	movs	r0, #225	@ 0xe1
 8003876:	f000 f83b 	bl	80038f0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800387a:	2000      	movs	r0, #0
 800387c:	f000 f845 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8003880:	2016      	movs	r0, #22
 8003882:	f000 f842 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8003886:	201b      	movs	r0, #27
 8003888:	f000 f83f 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800388c:	2004      	movs	r0, #4
 800388e:	f000 f83c 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003892:	2011      	movs	r0, #17
 8003894:	f000 f839 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8003898:	2007      	movs	r0, #7
 800389a:	f000 f836 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800389e:	2031      	movs	r0, #49	@ 0x31
 80038a0:	f000 f833 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80038a4:	2033      	movs	r0, #51	@ 0x33
 80038a6:	f000 f830 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80038aa:	2042      	movs	r0, #66	@ 0x42
 80038ac:	f000 f82d 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80038b0:	2005      	movs	r0, #5
 80038b2:	f000 f82a 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80038b6:	200c      	movs	r0, #12
 80038b8:	f000 f827 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80038bc:	200a      	movs	r0, #10
 80038be:	f000 f824 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80038c2:	2028      	movs	r0, #40	@ 0x28
 80038c4:	f000 f821 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80038c8:	202f      	movs	r0, #47	@ 0x2f
 80038ca:	f000 f81e 	bl	800390a <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80038ce:	200f      	movs	r0, #15
 80038d0:	f000 f81b 	bl	800390a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80038d4:	2011      	movs	r0, #17
 80038d6:	f000 f80b 	bl	80038f0 <ili9341_Write_Reg>
  LCD_Delay(200);
 80038da:	20c8      	movs	r0, #200	@ 0xc8
 80038dc:	f000 f97c 	bl	8003bd8 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80038e0:	2029      	movs	r0, #41	@ 0x29
 80038e2:	f000 f805 	bl	80038f0 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80038e6:	202c      	movs	r0, #44	@ 0x2c
 80038e8:	f000 f802 	bl	80038f0 <ili9341_Write_Reg>
}
 80038ec:	bf00      	nop
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 f949 	bl	8003b94 <LCD_IO_WriteReg>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	4603      	mov	r3, r0
 8003912:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003914:	88fb      	ldrh	r3, [r7, #6]
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f91a 	bl	8003b50 <LCD_IO_WriteData>
}
 800391c:	bf00      	nop
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003928:	4819      	ldr	r0, [pc, #100]	@ (8003990 <SPI_Init+0x6c>)
 800392a:	f003 f97b 	bl	8006c24 <HAL_SPI_GetState>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d12b      	bne.n	800398c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8003934:	4b16      	ldr	r3, [pc, #88]	@ (8003990 <SPI_Init+0x6c>)
 8003936:	4a17      	ldr	r2, [pc, #92]	@ (8003994 <SPI_Init+0x70>)
 8003938:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800393a:	4b15      	ldr	r3, [pc, #84]	@ (8003990 <SPI_Init+0x6c>)
 800393c:	2218      	movs	r2, #24
 800393e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003940:	4b13      	ldr	r3, [pc, #76]	@ (8003990 <SPI_Init+0x6c>)
 8003942:	2200      	movs	r2, #0
 8003944:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003946:	4b12      	ldr	r3, [pc, #72]	@ (8003990 <SPI_Init+0x6c>)
 8003948:	2200      	movs	r2, #0
 800394a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800394c:	4b10      	ldr	r3, [pc, #64]	@ (8003990 <SPI_Init+0x6c>)
 800394e:	2200      	movs	r2, #0
 8003950:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003952:	4b0f      	ldr	r3, [pc, #60]	@ (8003990 <SPI_Init+0x6c>)
 8003954:	2200      	movs	r2, #0
 8003956:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003958:	4b0d      	ldr	r3, [pc, #52]	@ (8003990 <SPI_Init+0x6c>)
 800395a:	2207      	movs	r2, #7
 800395c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800395e:	4b0c      	ldr	r3, [pc, #48]	@ (8003990 <SPI_Init+0x6c>)
 8003960:	2200      	movs	r2, #0
 8003962:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003964:	4b0a      	ldr	r3, [pc, #40]	@ (8003990 <SPI_Init+0x6c>)
 8003966:	2200      	movs	r2, #0
 8003968:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800396a:	4b09      	ldr	r3, [pc, #36]	@ (8003990 <SPI_Init+0x6c>)
 800396c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003970:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003972:	4b07      	ldr	r3, [pc, #28]	@ (8003990 <SPI_Init+0x6c>)
 8003974:	2200      	movs	r2, #0
 8003976:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003978:	4b05      	ldr	r3, [pc, #20]	@ (8003990 <SPI_Init+0x6c>)
 800397a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800397e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8003980:	4803      	ldr	r0, [pc, #12]	@ (8003990 <SPI_Init+0x6c>)
 8003982:	f000 f833 	bl	80039ec <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003986:	4802      	ldr	r0, [pc, #8]	@ (8003990 <SPI_Init+0x6c>)
 8003988:	f002 fcac 	bl	80062e4 <HAL_SPI_Init>
  }
}
 800398c:	bf00      	nop
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20000408 	.word	0x20000408
 8003994:	40015000 	.word	0x40015000

08003998 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80039a6:	4b09      	ldr	r3, [pc, #36]	@ (80039cc <SPI_Write+0x34>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	1db9      	adds	r1, r7, #6
 80039ac:	2201      	movs	r2, #1
 80039ae:	4808      	ldr	r0, [pc, #32]	@ (80039d0 <SPI_Write+0x38>)
 80039b0:	f002 fd49 	bl	8006446 <HAL_SPI_Transmit>
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80039be:	f000 f809 	bl	80039d4 <SPI_Error>
  }
}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000218 	.word	0x20000218
 80039d0:	20000408 	.word	0x20000408

080039d4 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80039d8:	4803      	ldr	r0, [pc, #12]	@ (80039e8 <SPI_Error+0x14>)
 80039da:	f002 fd0c 	bl	80063f6 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80039de:	f7ff ffa1 	bl	8003924 <SPI_Init>
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000408 	.word	0x20000408

080039ec <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	@ 0x28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80039f4:	2300      	movs	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	4b17      	ldr	r3, [pc, #92]	@ (8003a58 <SPI_MspInit+0x6c>)
 80039fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fc:	4a16      	ldr	r2, [pc, #88]	@ (8003a58 <SPI_MspInit+0x6c>)
 80039fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a02:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a04:	4b14      	ldr	r3, [pc, #80]	@ (8003a58 <SPI_MspInit+0x6c>)
 8003a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	4b10      	ldr	r3, [pc, #64]	@ (8003a58 <SPI_MspInit+0x6c>)
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	4a0f      	ldr	r2, [pc, #60]	@ (8003a58 <SPI_MspInit+0x6c>)
 8003a1a:	f043 0320 	orr.w	r3, r3, #32
 8003a1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a20:	4b0d      	ldr	r3, [pc, #52]	@ (8003a58 <SPI_MspInit+0x6c>)
 8003a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8003a2c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003a32:	2302      	movs	r3, #2
 8003a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003a36:	2302      	movs	r3, #2
 8003a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8003a3e:	2305      	movs	r3, #5
 8003a40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8003a42:	f107 0314 	add.w	r3, r7, #20
 8003a46:	4619      	mov	r1, r3
 8003a48:	4804      	ldr	r0, [pc, #16]	@ (8003a5c <SPI_MspInit+0x70>)
 8003a4a:	f001 f817 	bl	8004a7c <HAL_GPIO_Init>
}
 8003a4e:	bf00      	nop
 8003a50:	3728      	adds	r7, #40	@ 0x28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40021400 	.word	0x40021400

08003a60 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8003a66:	4b36      	ldr	r3, [pc, #216]	@ (8003b40 <LCD_IO_Init+0xe0>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d164      	bne.n	8003b38 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8003a6e:	4b34      	ldr	r3, [pc, #208]	@ (8003b40 <LCD_IO_Init+0xe0>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003a74:	2300      	movs	r3, #0
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	4b32      	ldr	r3, [pc, #200]	@ (8003b44 <LCD_IO_Init+0xe4>)
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7c:	4a31      	ldr	r2, [pc, #196]	@ (8003b44 <LCD_IO_Init+0xe4>)
 8003a7e:	f043 0308 	orr.w	r3, r3, #8
 8003a82:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a84:	4b2f      	ldr	r3, [pc, #188]	@ (8003b44 <LCD_IO_Init+0xe4>)
 8003a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003a90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003a96:	2301      	movs	r3, #1
 8003a98:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003aa2:	f107 030c 	add.w	r3, r7, #12
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4827      	ldr	r0, [pc, #156]	@ (8003b48 <LCD_IO_Init+0xe8>)
 8003aaa:	f000 ffe7 	bl	8004a7c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	607b      	str	r3, [r7, #4]
 8003ab2:	4b24      	ldr	r3, [pc, #144]	@ (8003b44 <LCD_IO_Init+0xe4>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab6:	4a23      	ldr	r2, [pc, #140]	@ (8003b44 <LCD_IO_Init+0xe4>)
 8003ab8:	f043 0308 	orr.w	r3, r3, #8
 8003abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003abe:	4b21      	ldr	r3, [pc, #132]	@ (8003b44 <LCD_IO_Init+0xe4>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003aca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ace:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003adc:	f107 030c 	add.w	r3, r7, #12
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4819      	ldr	r0, [pc, #100]	@ (8003b48 <LCD_IO_Init+0xe8>)
 8003ae4:	f000 ffca 	bl	8004a7c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003ae8:	2300      	movs	r3, #0
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	4b15      	ldr	r3, [pc, #84]	@ (8003b44 <LCD_IO_Init+0xe4>)
 8003aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af0:	4a14      	ldr	r2, [pc, #80]	@ (8003b44 <LCD_IO_Init+0xe4>)
 8003af2:	f043 0304 	orr.w	r3, r3, #4
 8003af6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003af8:	4b12      	ldr	r3, [pc, #72]	@ (8003b44 <LCD_IO_Init+0xe4>)
 8003afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	603b      	str	r3, [r7, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003b04:	2304      	movs	r3, #4
 8003b06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003b10:	2302      	movs	r3, #2
 8003b12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003b14:	f107 030c 	add.w	r3, r7, #12
 8003b18:	4619      	mov	r1, r3
 8003b1a:	480c      	ldr	r0, [pc, #48]	@ (8003b4c <LCD_IO_Init+0xec>)
 8003b1c:	f000 ffae 	bl	8004a7c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003b20:	2200      	movs	r2, #0
 8003b22:	2104      	movs	r1, #4
 8003b24:	4809      	ldr	r0, [pc, #36]	@ (8003b4c <LCD_IO_Init+0xec>)
 8003b26:	f001 fa79 	bl	800501c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	2104      	movs	r1, #4
 8003b2e:	4807      	ldr	r0, [pc, #28]	@ (8003b4c <LCD_IO_Init+0xec>)
 8003b30:	f001 fa74 	bl	800501c <HAL_GPIO_WritePin>

    SPI_Init();
 8003b34:	f7ff fef6 	bl	8003924 <SPI_Init>
  }
}
 8003b38:	bf00      	nop
 8003b3a:	3720      	adds	r7, #32
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20025c60 	.word	0x20025c60
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40020c00 	.word	0x40020c00
 8003b4c:	40020800 	.word	0x40020800

08003b50 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b60:	480a      	ldr	r0, [pc, #40]	@ (8003b8c <LCD_IO_WriteData+0x3c>)
 8003b62:	f001 fa5b 	bl	800501c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8003b66:	2200      	movs	r2, #0
 8003b68:	2104      	movs	r1, #4
 8003b6a:	4809      	ldr	r0, [pc, #36]	@ (8003b90 <LCD_IO_WriteData+0x40>)
 8003b6c:	f001 fa56 	bl	800501c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff ff10 	bl	8003998 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003b78:	2201      	movs	r2, #1
 8003b7a:	2104      	movs	r1, #4
 8003b7c:	4804      	ldr	r0, [pc, #16]	@ (8003b90 <LCD_IO_WriteData+0x40>)
 8003b7e:	f001 fa4d 	bl	800501c <HAL_GPIO_WritePin>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40020c00 	.word	0x40020c00
 8003b90:	40020800 	.word	0x40020800

08003b94 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ba4:	480a      	ldr	r0, [pc, #40]	@ (8003bd0 <LCD_IO_WriteReg+0x3c>)
 8003ba6:	f001 fa39 	bl	800501c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003baa:	2200      	movs	r2, #0
 8003bac:	2104      	movs	r1, #4
 8003bae:	4809      	ldr	r0, [pc, #36]	@ (8003bd4 <LCD_IO_WriteReg+0x40>)
 8003bb0:	f001 fa34 	bl	800501c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff feed 	bl	8003998 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	2104      	movs	r1, #4
 8003bc2:	4804      	ldr	r0, [pc, #16]	@ (8003bd4 <LCD_IO_WriteReg+0x40>)
 8003bc4:	f001 fa2a 	bl	800501c <HAL_GPIO_WritePin>
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40020c00 	.word	0x40020c00
 8003bd4:	40020800 	.word	0x40020800

08003bd8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  osDelay(Delay);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f003 fb72 	bl	80072ca <osDelay>
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <systemClockOverride>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void systemClockOverride(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b092      	sub	sp, #72	@ 0x48
 8003bf4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8003c6c <systemClockOverride+0x7c>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	4a1b      	ldr	r2, [pc, #108]	@ (8003c6c <systemClockOverride+0x7c>)
 8003c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c06:	4b19      	ldr	r3, [pc, #100]	@ (8003c6c <systemClockOverride+0x7c>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c12:	2301      	movs	r3, #1
 8003c14:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c1a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c20:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003c24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003c26:	2308      	movs	r3, #8
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003c2a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c30:	2302      	movs	r3, #2
 8003c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003c34:	2307      	movs	r3, #7
 8003c36:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003c38:	1d3b      	adds	r3, r7, #4
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f001 fcae 	bl	800559c <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003c40:	230f      	movs	r3, #15
 8003c42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c44:	2302      	movs	r3, #2
 8003c46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c4c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003c50:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c56:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003c58:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c5c:	2105      	movs	r1, #5
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f001 ff14 	bl	8005a8c <HAL_RCC_ClockConfig>
}
 8003c64:	bf00      	nop
 8003c66:	3748      	adds	r7, #72	@ 0x48
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40023800 	.word	0x40023800

08003c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c74:	f000 fd4c 	bl	8004710 <HAL_Init>
  /* Configure the system clock */
//  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  //TODO: if you ever regenerate HAL code you will need to comment out SystemClock_Config() again located above this comment
  systemClockOverride();
 8003c78:	f7ff ffba 	bl	8003bf0 <systemClockOverride>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RNG_Init();
 8003c7c:	f000 f8de 	bl	8003e3c <MX_RNG_Init>
  MX_GPIO_Init();
 8003c80:	f000 f94a 	bl	8003f18 <MX_GPIO_Init>
  MX_SPI5_Init();
 8003c84:	f000 f8ee 	bl	8003e64 <MX_SPI5_Init>
  MX_LTDC_Init();
 8003c88:	f000 f826 	bl	8003cd8 <MX_LTDC_Init>
  MX_TIM11_Init();
 8003c8c:	f000 f920 	bl	8003ed0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003c90:	2006      	movs	r0, #6
 8003c92:	f000 feca 	bl	8004a2a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 13, 13);
 8003c96:	220d      	movs	r2, #13
 8003c98:	210d      	movs	r1, #13
 8003c9a:	2006      	movs	r0, #6
 8003c9c:	f000 fea9 	bl	80049f2 <HAL_NVIC_SetPriority>
  ApplicationInit(&hrng);
 8003ca0:	4809      	ldr	r0, [pc, #36]	@ (8003cc8 <main+0x58>)
 8003ca2:	f7fc ff9d 	bl	8000be0 <ApplicationInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003ca6:	f003 fa1f 	bl	80070e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003caa:	4a08      	ldr	r2, [pc, #32]	@ (8003ccc <main+0x5c>)
 8003cac:	2100      	movs	r1, #0
 8003cae:	4808      	ldr	r0, [pc, #32]	@ (8003cd0 <main+0x60>)
 8003cb0:	f003 fa79 	bl	80071a6 <osThreadNew>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	4a07      	ldr	r2, [pc, #28]	@ (8003cd4 <main+0x64>)
 8003cb8:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  traceSTART();
 8003cba:	f009 facb 	bl	800d254 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003cbe:	f003 fa37 	bl	8007130 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003cc2:	bf00      	nop
 8003cc4:	e7fd      	b.n	8003cc2 <main+0x52>
 8003cc6:	bf00      	nop
 8003cc8:	20025d0c 	.word	0x20025d0c
 8003ccc:	080116e4 	.word	0x080116e4
 8003cd0:	080041b1 	.word	0x080041b1
 8003cd4:	20025dbc 	.word	0x20025dbc

08003cd8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b09a      	sub	sp, #104	@ 0x68
 8003cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003cde:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003ce2:	2234      	movs	r2, #52	@ 0x34
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f009 fd1a 	bl	800d720 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8003cec:	463b      	mov	r3, r7
 8003cee:	2234      	movs	r2, #52	@ 0x34
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f009 fd14 	bl	800d720 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003cf8:	4b4e      	ldr	r3, [pc, #312]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003cfa:	4a4f      	ldr	r2, [pc, #316]	@ (8003e38 <MX_LTDC_Init+0x160>)
 8003cfc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003cfe:	4b4d      	ldr	r3, [pc, #308]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003d04:	4b4b      	ldr	r3, [pc, #300]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003d10:	4b48      	ldr	r3, [pc, #288]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8003d16:	4b47      	ldr	r3, [pc, #284]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003d18:	2207      	movs	r2, #7
 8003d1a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8003d1c:	4b45      	ldr	r3, [pc, #276]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003d1e:	2203      	movs	r2, #3
 8003d20:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8003d22:	4b44      	ldr	r3, [pc, #272]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003d24:	220e      	movs	r2, #14
 8003d26:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8003d28:	4b42      	ldr	r3, [pc, #264]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003d2a:	2205      	movs	r2, #5
 8003d2c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8003d2e:	4b41      	ldr	r3, [pc, #260]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003d30:	f240 228e 	movw	r2, #654	@ 0x28e
 8003d34:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8003d36:	4b3f      	ldr	r3, [pc, #252]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003d38:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8003d3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8003d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003d40:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8003d44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8003d46:	4b3b      	ldr	r3, [pc, #236]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003d48:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8003d4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003d4e:	4b39      	ldr	r3, [pc, #228]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003d56:	4b37      	ldr	r3, [pc, #220]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003d5e:	4b35      	ldr	r3, [pc, #212]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003d66:	4833      	ldr	r0, [pc, #204]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003d68:	f001 f972 	bl	8005050 <HAL_LTDC_Init>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8003d72:	f000 fa26 	bl	80041c2 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8003d82:	2300      	movs	r3, #0
 8003d84:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003d86:	2300      	movs	r3, #0
 8003d88:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003d92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d96:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003d98:	2305      	movs	r3, #5
 8003d9a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003dba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	481c      	ldr	r0, [pc, #112]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003dc4:	f001 fa14 	bl	80051f0 <HAL_LTDC_ConfigLayer>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8003dce:	f000 f9f8 	bl	80041c2 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003dee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003df2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003df4:	2305      	movs	r3, #5
 8003df6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8003e16:	463b      	mov	r3, r7
 8003e18:	2201      	movs	r2, #1
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4805      	ldr	r0, [pc, #20]	@ (8003e34 <MX_LTDC_Init+0x15c>)
 8003e1e:	f001 f9e7 	bl	80051f0 <HAL_LTDC_ConfigLayer>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8003e28:	f000 f9cb 	bl	80041c2 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003e2c:	bf00      	nop
 8003e2e:	3768      	adds	r7, #104	@ 0x68
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	20025c64 	.word	0x20025c64
 8003e38:	40016800 	.word	0x40016800

08003e3c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003e40:	4b06      	ldr	r3, [pc, #24]	@ (8003e5c <MX_RNG_Init+0x20>)
 8003e42:	4a07      	ldr	r2, [pc, #28]	@ (8003e60 <MX_RNG_Init+0x24>)
 8003e44:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003e46:	4805      	ldr	r0, [pc, #20]	@ (8003e5c <MX_RNG_Init+0x20>)
 8003e48:	f002 f9cc 	bl	80061e4 <HAL_RNG_Init>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8003e52:	f000 f9b6 	bl	80041c2 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20025d0c 	.word	0x20025d0c
 8003e60:	50060800 	.word	0x50060800

08003e64 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8003e68:	4b17      	ldr	r3, [pc, #92]	@ (8003ec8 <MX_SPI5_Init+0x64>)
 8003e6a:	4a18      	ldr	r2, [pc, #96]	@ (8003ecc <MX_SPI5_Init+0x68>)
 8003e6c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003e6e:	4b16      	ldr	r3, [pc, #88]	@ (8003ec8 <MX_SPI5_Init+0x64>)
 8003e70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003e74:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003e76:	4b14      	ldr	r3, [pc, #80]	@ (8003ec8 <MX_SPI5_Init+0x64>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e7c:	4b12      	ldr	r3, [pc, #72]	@ (8003ec8 <MX_SPI5_Init+0x64>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e82:	4b11      	ldr	r3, [pc, #68]	@ (8003ec8 <MX_SPI5_Init+0x64>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e88:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec8 <MX_SPI5_Init+0x64>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec8 <MX_SPI5_Init+0x64>)
 8003e90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e94:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e96:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec8 <MX_SPI5_Init+0x64>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec8 <MX_SPI5_Init+0x64>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ea2:	4b09      	ldr	r3, [pc, #36]	@ (8003ec8 <MX_SPI5_Init+0x64>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea8:	4b07      	ldr	r3, [pc, #28]	@ (8003ec8 <MX_SPI5_Init+0x64>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003eae:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <MX_SPI5_Init+0x64>)
 8003eb0:	220a      	movs	r2, #10
 8003eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003eb4:	4804      	ldr	r0, [pc, #16]	@ (8003ec8 <MX_SPI5_Init+0x64>)
 8003eb6:	f002 fa15 	bl	80062e4 <HAL_SPI_Init>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003ec0:	f000 f97f 	bl	80041c2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003ec4:	bf00      	nop
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20025d1c 	.word	0x20025d1c
 8003ecc:	40015000 	.word	0x40015000

08003ed0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f10 <MX_TIM11_Init+0x40>)
 8003ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8003f14 <MX_TIM11_Init+0x44>)
 8003ed8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8003eda:	4b0d      	ldr	r3, [pc, #52]	@ (8003f10 <MX_TIM11_Init+0x40>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f10 <MX_TIM11_Init+0x40>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8003f10 <MX_TIM11_Init+0x40>)
 8003ee8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003eec:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eee:	4b08      	ldr	r3, [pc, #32]	@ (8003f10 <MX_TIM11_Init+0x40>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ef4:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <MX_TIM11_Init+0x40>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003efa:	4805      	ldr	r0, [pc, #20]	@ (8003f10 <MX_TIM11_Init+0x40>)
 8003efc:	f002 ffd0 	bl	8006ea0 <HAL_TIM_Base_Init>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003f06:	f000 f95c 	bl	80041c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20025d74 	.word	0x20025d74
 8003f14:	40014800 	.word	0x40014800

08003f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08e      	sub	sp, #56	@ 0x38
 8003f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	609a      	str	r2, [r3, #8]
 8003f2a:	60da      	str	r2, [r3, #12]
 8003f2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	623b      	str	r3, [r7, #32]
 8003f32:	4b99      	ldr	r3, [pc, #612]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f36:	4a98      	ldr	r2, [pc, #608]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003f38:	f043 0304 	orr.w	r3, r3, #4
 8003f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f3e:	4b96      	ldr	r3, [pc, #600]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	623b      	str	r3, [r7, #32]
 8003f48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	4b92      	ldr	r3, [pc, #584]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f52:	4a91      	ldr	r2, [pc, #580]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003f54:	f043 0320 	orr.w	r3, r3, #32
 8003f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f5a:	4b8f      	ldr	r3, [pc, #572]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	61fb      	str	r3, [r7, #28]
 8003f64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f66:	2300      	movs	r3, #0
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	4b8b      	ldr	r3, [pc, #556]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	4a8a      	ldr	r2, [pc, #552]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f76:	4b88      	ldr	r3, [pc, #544]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	4b84      	ldr	r3, [pc, #528]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8a:	4a83      	ldr	r2, [pc, #524]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f92:	4b81      	ldr	r3, [pc, #516]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	4b7d      	ldr	r3, [pc, #500]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa6:	4a7c      	ldr	r2, [pc, #496]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003fa8:	f043 0302 	orr.w	r3, r3, #2
 8003fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fae:	4b7a      	ldr	r3, [pc, #488]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	4b76      	ldr	r3, [pc, #472]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc2:	4a75      	ldr	r2, [pc, #468]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fca:	4b73      	ldr	r3, [pc, #460]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	4b6f      	ldr	r3, [pc, #444]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fde:	4a6e      	ldr	r2, [pc, #440]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003fe0:	f043 0310 	orr.w	r3, r3, #16
 8003fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fe6:	4b6c      	ldr	r3, [pc, #432]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fea:	f003 0310 	and.w	r3, r3, #16
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	4b68      	ldr	r3, [pc, #416]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffa:	4a67      	ldr	r2, [pc, #412]	@ (8004198 <MX_GPIO_Init+0x280>)
 8003ffc:	f043 0308 	orr.w	r3, r3, #8
 8004000:	6313      	str	r3, [r2, #48]	@ 0x30
 8004002:	4b65      	ldr	r3, [pc, #404]	@ (8004198 <MX_GPIO_Init+0x280>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	607b      	str	r3, [r7, #4]
 800400c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800400e:	2200      	movs	r2, #0
 8004010:	2116      	movs	r1, #22
 8004012:	4862      	ldr	r0, [pc, #392]	@ (800419c <MX_GPIO_Init+0x284>)
 8004014:	f001 f802 	bl	800501c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8004018:	2200      	movs	r2, #0
 800401a:	2180      	movs	r1, #128	@ 0x80
 800401c:	4860      	ldr	r0, [pc, #384]	@ (80041a0 <MX_GPIO_Init+0x288>)
 800401e:	f000 fffd 	bl	800501c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8004022:	2200      	movs	r2, #0
 8004024:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8004028:	485e      	ldr	r0, [pc, #376]	@ (80041a4 <MX_GPIO_Init+0x28c>)
 800402a:	f000 fff7 	bl	800501c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800402e:	2200      	movs	r2, #0
 8004030:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8004034:	485c      	ldr	r0, [pc, #368]	@ (80041a8 <MX_GPIO_Init+0x290>)
 8004036:	f000 fff1 	bl	800501c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800403a:	2316      	movs	r3, #22
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800403e:	2301      	movs	r3, #1
 8004040:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004042:	2300      	movs	r3, #0
 8004044:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004046:	2300      	movs	r3, #0
 8004048:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800404a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800404e:	4619      	mov	r1, r3
 8004050:	4852      	ldr	r0, [pc, #328]	@ (800419c <MX_GPIO_Init+0x284>)
 8004052:	f000 fd13 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004056:	2301      	movs	r3, #1
 8004058:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800405a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800405e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004060:	2300      	movs	r3, #0
 8004062:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004068:	4619      	mov	r1, r3
 800406a:	484d      	ldr	r0, [pc, #308]	@ (80041a0 <MX_GPIO_Init+0x288>)
 800406c:	f000 fd06 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8004070:	f248 0306 	movw	r3, #32774	@ 0x8006
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004076:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800407a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407c:	2300      	movs	r3, #0
 800407e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004084:	4619      	mov	r1, r3
 8004086:	4846      	ldr	r0, [pc, #280]	@ (80041a0 <MX_GPIO_Init+0x288>)
 8004088:	f000 fcf8 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800408c:	2380      	movs	r3, #128	@ 0x80
 800408e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004090:	2301      	movs	r3, #1
 8004092:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004094:	2300      	movs	r3, #0
 8004096:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004098:	2300      	movs	r3, #0
 800409a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800409c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040a0:	4619      	mov	r1, r3
 80040a2:	483f      	ldr	r0, [pc, #252]	@ (80041a0 <MX_GPIO_Init+0x288>)
 80040a4:	f000 fcea 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80040a8:	2320      	movs	r3, #32
 80040aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80040ac:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80040b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80040b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040ba:	4619      	mov	r1, r3
 80040bc:	4837      	ldr	r0, [pc, #220]	@ (800419c <MX_GPIO_Init+0x284>)
 80040be:	f000 fcdd 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80040c2:	2304      	movs	r3, #4
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040c6:	2300      	movs	r3, #0
 80040c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80040ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040d2:	4619      	mov	r1, r3
 80040d4:	4835      	ldr	r0, [pc, #212]	@ (80041ac <MX_GPIO_Init+0x294>)
 80040d6:	f000 fcd1 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80040da:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e0:	2302      	movs	r3, #2
 80040e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e8:	2300      	movs	r3, #0
 80040ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80040ec:	230c      	movs	r3, #12
 80040ee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040f4:	4619      	mov	r1, r3
 80040f6:	482d      	ldr	r0, [pc, #180]	@ (80041ac <MX_GPIO_Init+0x294>)
 80040f8:	f000 fcc0 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80040fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004100:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004102:	2300      	movs	r3, #0
 8004104:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004106:	2300      	movs	r3, #0
 8004108:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800410a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800410e:	4619      	mov	r1, r3
 8004110:	4826      	ldr	r0, [pc, #152]	@ (80041ac <MX_GPIO_Init+0x294>)
 8004112:	f000 fcb3 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8004116:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800411a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800411c:	2300      	movs	r3, #0
 800411e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004120:	2300      	movs	r3, #0
 8004122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8004124:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004128:	4619      	mov	r1, r3
 800412a:	481e      	ldr	r0, [pc, #120]	@ (80041a4 <MX_GPIO_Init+0x28c>)
 800412c:	f000 fca6 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8004130:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004134:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004136:	2301      	movs	r3, #1
 8004138:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413a:	2300      	movs	r3, #0
 800413c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800413e:	2300      	movs	r3, #0
 8004140:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004146:	4619      	mov	r1, r3
 8004148:	4816      	ldr	r0, [pc, #88]	@ (80041a4 <MX_GPIO_Init+0x28c>)
 800414a:	f000 fc97 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800414e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004152:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004154:	2302      	movs	r3, #2
 8004156:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004158:	2300      	movs	r3, #0
 800415a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800415c:	2303      	movs	r3, #3
 800415e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004160:	2307      	movs	r3, #7
 8004162:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004168:	4619      	mov	r1, r3
 800416a:	480d      	ldr	r0, [pc, #52]	@ (80041a0 <MX_GPIO_Init+0x288>)
 800416c:	f000 fc86 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8004170:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8004174:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004176:	2301      	movs	r3, #1
 8004178:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417a:	2300      	movs	r3, #0
 800417c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417e:	2300      	movs	r3, #0
 8004180:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004186:	4619      	mov	r1, r3
 8004188:	4807      	ldr	r0, [pc, #28]	@ (80041a8 <MX_GPIO_Init+0x290>)
 800418a:	f000 fc77 	bl	8004a7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800418e:	bf00      	nop
 8004190:	3738      	adds	r7, #56	@ 0x38
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800
 800419c:	40020800 	.word	0x40020800
 80041a0:	40020000 	.word	0x40020000
 80041a4:	40020c00 	.word	0x40020c00
 80041a8:	40021800 	.word	0x40021800
 80041ac:	40020400 	.word	0x40020400

080041b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	RunDemoForLCD();
    osDelay(10000);
 80041b8:	f242 7010 	movw	r0, #10000	@ 0x2710
 80041bc:	f003 f885 	bl	80072ca <osDelay>
 80041c0:	e7fa      	b.n	80041b8 <StartDefaultTask+0x8>

080041c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041c6:	b672      	cpsid	i
}
 80041c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041ca:	bf00      	nop
 80041cc:	e7fd      	b.n	80041ca <Error_Handler+0x8>
	...

080041d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041d6:	2300      	movs	r3, #0
 80041d8:	607b      	str	r3, [r7, #4]
 80041da:	4b12      	ldr	r3, [pc, #72]	@ (8004224 <HAL_MspInit+0x54>)
 80041dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041de:	4a11      	ldr	r2, [pc, #68]	@ (8004224 <HAL_MspInit+0x54>)
 80041e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80041e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004224 <HAL_MspInit+0x54>)
 80041e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ee:	607b      	str	r3, [r7, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	603b      	str	r3, [r7, #0]
 80041f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004224 <HAL_MspInit+0x54>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004224 <HAL_MspInit+0x54>)
 80041fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004200:	6413      	str	r3, [r2, #64]	@ 0x40
 8004202:	4b08      	ldr	r3, [pc, #32]	@ (8004224 <HAL_MspInit+0x54>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800420e:	2200      	movs	r2, #0
 8004210:	210f      	movs	r1, #15
 8004212:	f06f 0001 	mvn.w	r0, #1
 8004216:	f000 fbec 	bl	80049f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800

08004228 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b09a      	sub	sp, #104	@ 0x68
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004230:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	605a      	str	r2, [r3, #4]
 800423a:	609a      	str	r2, [r3, #8]
 800423c:	60da      	str	r2, [r3, #12]
 800423e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004240:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004244:	2230      	movs	r2, #48	@ 0x30
 8004246:	2100      	movs	r1, #0
 8004248:	4618      	mov	r0, r3
 800424a:	f009 fa69 	bl	800d720 <memset>
  if(hltdc->Instance==LTDC)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a81      	ldr	r2, [pc, #516]	@ (8004458 <HAL_LTDC_MspInit+0x230>)
 8004254:	4293      	cmp	r3, r2
 8004256:	f040 80fa 	bne.w	800444e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800425a:	2308      	movs	r3, #8
 800425c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800425e:	2332      	movs	r3, #50	@ 0x32
 8004260:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8004262:	2302      	movs	r3, #2
 8004264:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8004266:	2300      	movs	r3, #0
 8004268:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800426a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800426e:	4618      	mov	r0, r3
 8004270:	f001 fdf8 	bl	8005e64 <HAL_RCCEx_PeriphCLKConfig>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800427a:	f7ff ffa2 	bl	80041c2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	623b      	str	r3, [r7, #32]
 8004282:	4b76      	ldr	r3, [pc, #472]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 8004284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004286:	4a75      	ldr	r2, [pc, #468]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 8004288:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800428c:	6453      	str	r3, [r2, #68]	@ 0x44
 800428e:	4b73      	ldr	r3, [pc, #460]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004296:	623b      	str	r3, [r7, #32]
 8004298:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	4b6f      	ldr	r3, [pc, #444]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	4a6e      	ldr	r2, [pc, #440]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 80042a4:	f043 0320 	orr.w	r3, r3, #32
 80042a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042aa:	4b6c      	ldr	r3, [pc, #432]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	61fb      	str	r3, [r7, #28]
 80042b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b6:	2300      	movs	r3, #0
 80042b8:	61bb      	str	r3, [r7, #24]
 80042ba:	4b68      	ldr	r3, [pc, #416]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042be:	4a67      	ldr	r2, [pc, #412]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042c6:	4b65      	ldr	r3, [pc, #404]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	61bb      	str	r3, [r7, #24]
 80042d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	4b61      	ldr	r3, [pc, #388]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042da:	4a60      	ldr	r2, [pc, #384]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 80042dc:	f043 0302 	orr.w	r3, r3, #2
 80042e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042e2:	4b5e      	ldr	r3, [pc, #376]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	4b5a      	ldr	r3, [pc, #360]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	4a59      	ldr	r2, [pc, #356]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 80042f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80042fe:	4b57      	ldr	r3, [pc, #348]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	4b53      	ldr	r3, [pc, #332]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004312:	4a52      	ldr	r2, [pc, #328]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 8004314:	f043 0304 	orr.w	r3, r3, #4
 8004318:	6313      	str	r3, [r2, #48]	@ 0x30
 800431a:	4b50      	ldr	r3, [pc, #320]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	4b4c      	ldr	r3, [pc, #304]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432e:	4a4b      	ldr	r2, [pc, #300]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 8004330:	f043 0308 	orr.w	r3, r3, #8
 8004334:	6313      	str	r3, [r2, #48]	@ 0x30
 8004336:	4b49      	ldr	r3, [pc, #292]	@ (800445c <HAL_LTDC_MspInit+0x234>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8004342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004346:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004348:	2302      	movs	r3, #2
 800434a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434c:	2300      	movs	r3, #0
 800434e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004350:	2300      	movs	r3, #0
 8004352:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004354:	230e      	movs	r3, #14
 8004356:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004358:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800435c:	4619      	mov	r1, r3
 800435e:	4840      	ldr	r0, [pc, #256]	@ (8004460 <HAL_LTDC_MspInit+0x238>)
 8004360:	f000 fb8c 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8004364:	f641 0358 	movw	r3, #6232	@ 0x1858
 8004368:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436a:	2302      	movs	r3, #2
 800436c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436e:	2300      	movs	r3, #0
 8004370:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004372:	2300      	movs	r3, #0
 8004374:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004376:	230e      	movs	r3, #14
 8004378:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800437a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800437e:	4619      	mov	r1, r3
 8004380:	4838      	ldr	r0, [pc, #224]	@ (8004464 <HAL_LTDC_MspInit+0x23c>)
 8004382:	f000 fb7b 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8004386:	2303      	movs	r3, #3
 8004388:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438a:	2302      	movs	r3, #2
 800438c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438e:	2300      	movs	r3, #0
 8004390:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004392:	2300      	movs	r3, #0
 8004394:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004396:	2309      	movs	r3, #9
 8004398:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800439a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800439e:	4619      	mov	r1, r3
 80043a0:	4831      	ldr	r0, [pc, #196]	@ (8004468 <HAL_LTDC_MspInit+0x240>)
 80043a2:	f000 fb6b 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80043a6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80043aa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ac:	2302      	movs	r3, #2
 80043ae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b4:	2300      	movs	r3, #0
 80043b6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80043b8:	230e      	movs	r3, #14
 80043ba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80043c0:	4619      	mov	r1, r3
 80043c2:	4829      	ldr	r0, [pc, #164]	@ (8004468 <HAL_LTDC_MspInit+0x240>)
 80043c4:	f000 fb5a 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80043c8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80043cc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ce:	2302      	movs	r3, #2
 80043d0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d6:	2300      	movs	r3, #0
 80043d8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80043da:	230e      	movs	r3, #14
 80043dc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80043e2:	4619      	mov	r1, r3
 80043e4:	4821      	ldr	r0, [pc, #132]	@ (800446c <HAL_LTDC_MspInit+0x244>)
 80043e6:	f000 fb49 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80043ea:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80043ee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f0:	2302      	movs	r3, #2
 80043f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f4:	2300      	movs	r3, #0
 80043f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f8:	2300      	movs	r3, #0
 80043fa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80043fc:	230e      	movs	r3, #14
 80043fe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004400:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004404:	4619      	mov	r1, r3
 8004406:	481a      	ldr	r0, [pc, #104]	@ (8004470 <HAL_LTDC_MspInit+0x248>)
 8004408:	f000 fb38 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800440c:	2348      	movs	r3, #72	@ 0x48
 800440e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004410:	2302      	movs	r3, #2
 8004412:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004414:	2300      	movs	r3, #0
 8004416:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004418:	2300      	movs	r3, #0
 800441a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800441c:	230e      	movs	r3, #14
 800441e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004420:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004424:	4619      	mov	r1, r3
 8004426:	4813      	ldr	r0, [pc, #76]	@ (8004474 <HAL_LTDC_MspInit+0x24c>)
 8004428:	f000 fb28 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800442c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004430:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004432:	2302      	movs	r3, #2
 8004434:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004436:	2300      	movs	r3, #0
 8004438:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800443a:	2300      	movs	r3, #0
 800443c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800443e:	2309      	movs	r3, #9
 8004440:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004442:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004446:	4619      	mov	r1, r3
 8004448:	4808      	ldr	r0, [pc, #32]	@ (800446c <HAL_LTDC_MspInit+0x244>)
 800444a:	f000 fb17 	bl	8004a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800444e:	bf00      	nop
 8004450:	3768      	adds	r7, #104	@ 0x68
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40016800 	.word	0x40016800
 800445c:	40023800 	.word	0x40023800
 8004460:	40021400 	.word	0x40021400
 8004464:	40020000 	.word	0x40020000
 8004468:	40020400 	.word	0x40020400
 800446c:	40021800 	.word	0x40021800
 8004470:	40020800 	.word	0x40020800
 8004474:	40020c00 	.word	0x40020c00

08004478 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a0b      	ldr	r2, [pc, #44]	@ (80044b4 <HAL_RNG_MspInit+0x3c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d10d      	bne.n	80044a6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	4b0a      	ldr	r3, [pc, #40]	@ (80044b8 <HAL_RNG_MspInit+0x40>)
 8004490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004492:	4a09      	ldr	r2, [pc, #36]	@ (80044b8 <HAL_RNG_MspInit+0x40>)
 8004494:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004498:	6353      	str	r3, [r2, #52]	@ 0x34
 800449a:	4b07      	ldr	r3, [pc, #28]	@ (80044b8 <HAL_RNG_MspInit+0x40>)
 800449c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800449e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80044a6:	bf00      	nop
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	50060800 	.word	0x50060800
 80044b8:	40023800 	.word	0x40023800

080044bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08a      	sub	sp, #40	@ 0x28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c4:	f107 0314 	add.w	r3, r7, #20
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	605a      	str	r2, [r3, #4]
 80044ce:	609a      	str	r2, [r3, #8]
 80044d0:	60da      	str	r2, [r3, #12]
 80044d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a19      	ldr	r2, [pc, #100]	@ (8004540 <HAL_SPI_MspInit+0x84>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d12c      	bne.n	8004538 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	4b18      	ldr	r3, [pc, #96]	@ (8004544 <HAL_SPI_MspInit+0x88>)
 80044e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e6:	4a17      	ldr	r2, [pc, #92]	@ (8004544 <HAL_SPI_MspInit+0x88>)
 80044e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80044ee:	4b15      	ldr	r3, [pc, #84]	@ (8004544 <HAL_SPI_MspInit+0x88>)
 80044f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	4b11      	ldr	r3, [pc, #68]	@ (8004544 <HAL_SPI_MspInit+0x88>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004502:	4a10      	ldr	r2, [pc, #64]	@ (8004544 <HAL_SPI_MspInit+0x88>)
 8004504:	f043 0320 	orr.w	r3, r3, #32
 8004508:	6313      	str	r3, [r2, #48]	@ 0x30
 800450a:	4b0e      	ldr	r3, [pc, #56]	@ (8004544 <HAL_SPI_MspInit+0x88>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8004516:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800451a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451c:	2302      	movs	r3, #2
 800451e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004520:	2300      	movs	r3, #0
 8004522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004524:	2300      	movs	r3, #0
 8004526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004528:	2305      	movs	r3, #5
 800452a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800452c:	f107 0314 	add.w	r3, r7, #20
 8004530:	4619      	mov	r1, r3
 8004532:	4805      	ldr	r0, [pc, #20]	@ (8004548 <HAL_SPI_MspInit+0x8c>)
 8004534:	f000 faa2 	bl	8004a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8004538:	bf00      	nop
 800453a:	3728      	adds	r7, #40	@ 0x28
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40015000 	.word	0x40015000
 8004544:	40023800 	.word	0x40023800
 8004548:	40021400 	.word	0x40021400

0800454c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a08      	ldr	r2, [pc, #32]	@ (800457c <HAL_SPI_MspDeInit+0x30>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d10a      	bne.n	8004574 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800455e:	4b08      	ldr	r3, [pc, #32]	@ (8004580 <HAL_SPI_MspDeInit+0x34>)
 8004560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004562:	4a07      	ldr	r2, [pc, #28]	@ (8004580 <HAL_SPI_MspDeInit+0x34>)
 8004564:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004568:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800456a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800456e:	4805      	ldr	r0, [pc, #20]	@ (8004584 <HAL_SPI_MspDeInit+0x38>)
 8004570:	f000 fc30 	bl	8004dd4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8004574:	bf00      	nop
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40015000 	.word	0x40015000
 8004580:	40023800 	.word	0x40023800
 8004584:	40021400 	.word	0x40021400

08004588 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a0b      	ldr	r2, [pc, #44]	@ (80045c4 <HAL_TIM_Base_MspInit+0x3c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d10d      	bne.n	80045b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	4b0a      	ldr	r3, [pc, #40]	@ (80045c8 <HAL_TIM_Base_MspInit+0x40>)
 80045a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a2:	4a09      	ldr	r2, [pc, #36]	@ (80045c8 <HAL_TIM_Base_MspInit+0x40>)
 80045a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80045aa:	4b07      	ldr	r3, [pc, #28]	@ (80045c8 <HAL_TIM_Base_MspInit+0x40>)
 80045ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40014800 	.word	0x40014800
 80045c8:	40023800 	.word	0x40023800

080045cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045d0:	bf00      	nop
 80045d2:	e7fd      	b.n	80045d0 <NMI_Handler+0x4>

080045d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045d8:	bf00      	nop
 80045da:	e7fd      	b.n	80045d8 <HardFault_Handler+0x4>

080045dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045e0:	bf00      	nop
 80045e2:	e7fd      	b.n	80045e0 <MemManage_Handler+0x4>

080045e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <BusFault_Handler+0x4>

080045ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045f0:	bf00      	nop
 80045f2:	e7fd      	b.n	80045f0 <UsageFault_Handler+0x4>

080045f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045f8:	bf00      	nop
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004606:	f000 f8d5 	bl	80047b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800460a:	f005 ffc9 	bl	800a5a0 <xTaskGetSchedulerState>
 800460e:	4603      	mov	r3, r0
 8004610:	2b01      	cmp	r3, #1
 8004612:	d001      	beq.n	8004618 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004614:	f007 f800 	bl	800b618 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004618:	bf00      	nop
 800461a:	bd80      	pop	{r7, pc}

0800461c <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004634:	4a14      	ldr	r2, [pc, #80]	@ (8004688 <_sbrk+0x5c>)
 8004636:	4b15      	ldr	r3, [pc, #84]	@ (800468c <_sbrk+0x60>)
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004640:	4b13      	ldr	r3, [pc, #76]	@ (8004690 <_sbrk+0x64>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d102      	bne.n	800464e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004648:	4b11      	ldr	r3, [pc, #68]	@ (8004690 <_sbrk+0x64>)
 800464a:	4a12      	ldr	r2, [pc, #72]	@ (8004694 <_sbrk+0x68>)
 800464c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800464e:	4b10      	ldr	r3, [pc, #64]	@ (8004690 <_sbrk+0x64>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	429a      	cmp	r2, r3
 800465a:	d207      	bcs.n	800466c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800465c:	f009 f8d6 	bl	800d80c <__errno>
 8004660:	4603      	mov	r3, r0
 8004662:	220c      	movs	r2, #12
 8004664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004666:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800466a:	e009      	b.n	8004680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800466c:	4b08      	ldr	r3, [pc, #32]	@ (8004690 <_sbrk+0x64>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004672:	4b07      	ldr	r3, [pc, #28]	@ (8004690 <_sbrk+0x64>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4413      	add	r3, r2
 800467a:	4a05      	ldr	r2, [pc, #20]	@ (8004690 <_sbrk+0x64>)
 800467c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800467e:	68fb      	ldr	r3, [r7, #12]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20030000 	.word	0x20030000
 800468c:	00000400 	.word	0x00000400
 8004690:	20025dc0 	.word	0x20025dc0
 8004694:	2002b378 	.word	0x2002b378

08004698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800469c:	4b06      	ldr	r3, [pc, #24]	@ (80046b8 <SystemInit+0x20>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a2:	4a05      	ldr	r2, [pc, #20]	@ (80046b8 <SystemInit+0x20>)
 80046a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80046a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	e000ed00 	.word	0xe000ed00

080046bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80046bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80046f4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046c0:	480d      	ldr	r0, [pc, #52]	@ (80046f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80046c2:	490e      	ldr	r1, [pc, #56]	@ (80046fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80046c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004700 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80046c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046c8:	e002      	b.n	80046d0 <LoopCopyDataInit>

080046ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046ce:	3304      	adds	r3, #4

080046d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046d4:	d3f9      	bcc.n	80046ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046d6:	4a0b      	ldr	r2, [pc, #44]	@ (8004704 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80046d8:	4c0b      	ldr	r4, [pc, #44]	@ (8004708 <LoopFillZerobss+0x26>)
  movs r3, #0
 80046da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046dc:	e001      	b.n	80046e2 <LoopFillZerobss>

080046de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046e0:	3204      	adds	r2, #4

080046e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046e4:	d3fb      	bcc.n	80046de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80046e6:	f7ff ffd7 	bl	8004698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046ea:	f009 f895 	bl	800d818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046ee:	f7ff fabf 	bl	8003c70 <main>
  bx  lr    
 80046f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80046f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80046f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046fc:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 8004700:	08011960 	.word	0x08011960
  ldr r2, =_sbss
 8004704:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8004708:	2002b374 	.word	0x2002b374

0800470c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800470c:	e7fe      	b.n	800470c <ADC_IRQHandler>
	...

08004710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004714:	4b0e      	ldr	r3, [pc, #56]	@ (8004750 <HAL_Init+0x40>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a0d      	ldr	r2, [pc, #52]	@ (8004750 <HAL_Init+0x40>)
 800471a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800471e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004720:	4b0b      	ldr	r3, [pc, #44]	@ (8004750 <HAL_Init+0x40>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a0a      	ldr	r2, [pc, #40]	@ (8004750 <HAL_Init+0x40>)
 8004726:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800472a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800472c:	4b08      	ldr	r3, [pc, #32]	@ (8004750 <HAL_Init+0x40>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a07      	ldr	r2, [pc, #28]	@ (8004750 <HAL_Init+0x40>)
 8004732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004736:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004738:	2003      	movs	r0, #3
 800473a:	f000 f94f 	bl	80049dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800473e:	200f      	movs	r0, #15
 8004740:	f000 f808 	bl	8004754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004744:	f7ff fd44 	bl	80041d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40023c00 	.word	0x40023c00

08004754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800475c:	4b12      	ldr	r3, [pc, #72]	@ (80047a8 <HAL_InitTick+0x54>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	4b12      	ldr	r3, [pc, #72]	@ (80047ac <HAL_InitTick+0x58>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	4619      	mov	r1, r3
 8004766:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800476a:	fbb3 f3f1 	udiv	r3, r3, r1
 800476e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004772:	4618      	mov	r0, r3
 8004774:	f000 f975 	bl	8004a62 <HAL_SYSTICK_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e00e      	b.n	80047a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b0f      	cmp	r3, #15
 8004786:	d80a      	bhi.n	800479e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004788:	2200      	movs	r2, #0
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004790:	f000 f92f 	bl	80049f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004794:	4a06      	ldr	r2, [pc, #24]	@ (80047b0 <HAL_InitTick+0x5c>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e000      	b.n	80047a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	20000224 	.word	0x20000224
 80047ac:	2000022c 	.word	0x2000022c
 80047b0:	20000228 	.word	0x20000228

080047b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047b8:	4b06      	ldr	r3, [pc, #24]	@ (80047d4 <HAL_IncTick+0x20>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	461a      	mov	r2, r3
 80047be:	4b06      	ldr	r3, [pc, #24]	@ (80047d8 <HAL_IncTick+0x24>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4413      	add	r3, r2
 80047c4:	4a04      	ldr	r2, [pc, #16]	@ (80047d8 <HAL_IncTick+0x24>)
 80047c6:	6013      	str	r3, [r2, #0]
}
 80047c8:	bf00      	nop
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	2000022c 	.word	0x2000022c
 80047d8:	20025dc4 	.word	0x20025dc4

080047dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  return uwTick;
 80047e0:	4b03      	ldr	r3, [pc, #12]	@ (80047f0 <HAL_GetTick+0x14>)
 80047e2:	681b      	ldr	r3, [r3, #0]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	20025dc4 	.word	0x20025dc4

080047f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004804:	4b0c      	ldr	r3, [pc, #48]	@ (8004838 <__NVIC_SetPriorityGrouping+0x44>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004810:	4013      	ands	r3, r2
 8004812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800481c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004826:	4a04      	ldr	r2, [pc, #16]	@ (8004838 <__NVIC_SetPriorityGrouping+0x44>)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	60d3      	str	r3, [r2, #12]
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	e000ed00 	.word	0xe000ed00

0800483c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004840:	4b04      	ldr	r3, [pc, #16]	@ (8004854 <__NVIC_GetPriorityGrouping+0x18>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	0a1b      	lsrs	r3, r3, #8
 8004846:	f003 0307 	and.w	r3, r3, #7
}
 800484a:	4618      	mov	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	e000ed00 	.word	0xe000ed00

08004858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004866:	2b00      	cmp	r3, #0
 8004868:	db0b      	blt.n	8004882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	f003 021f 	and.w	r2, r3, #31
 8004870:	4907      	ldr	r1, [pc, #28]	@ (8004890 <__NVIC_EnableIRQ+0x38>)
 8004872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	2001      	movs	r0, #1
 800487a:	fa00 f202 	lsl.w	r2, r0, r2
 800487e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	e000e100 	.word	0xe000e100

08004894 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800489e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	db12      	blt.n	80048cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	f003 021f 	and.w	r2, r3, #31
 80048ac:	490a      	ldr	r1, [pc, #40]	@ (80048d8 <__NVIC_DisableIRQ+0x44>)
 80048ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	2001      	movs	r0, #1
 80048b6:	fa00 f202 	lsl.w	r2, r0, r2
 80048ba:	3320      	adds	r3, #32
 80048bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80048c0:	f3bf 8f4f 	dsb	sy
}
 80048c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80048c6:	f3bf 8f6f 	isb	sy
}
 80048ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	e000e100 	.word	0xe000e100

080048dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	6039      	str	r1, [r7, #0]
 80048e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	db0a      	blt.n	8004906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	490c      	ldr	r1, [pc, #48]	@ (8004928 <__NVIC_SetPriority+0x4c>)
 80048f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fa:	0112      	lsls	r2, r2, #4
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	440b      	add	r3, r1
 8004900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004904:	e00a      	b.n	800491c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	b2da      	uxtb	r2, r3
 800490a:	4908      	ldr	r1, [pc, #32]	@ (800492c <__NVIC_SetPriority+0x50>)
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	3b04      	subs	r3, #4
 8004914:	0112      	lsls	r2, r2, #4
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	440b      	add	r3, r1
 800491a:	761a      	strb	r2, [r3, #24]
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	e000e100 	.word	0xe000e100
 800492c:	e000ed00 	.word	0xe000ed00

08004930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	@ 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f1c3 0307 	rsb	r3, r3, #7
 800494a:	2b04      	cmp	r3, #4
 800494c:	bf28      	it	cs
 800494e:	2304      	movcs	r3, #4
 8004950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	3304      	adds	r3, #4
 8004956:	2b06      	cmp	r3, #6
 8004958:	d902      	bls.n	8004960 <NVIC_EncodePriority+0x30>
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	3b03      	subs	r3, #3
 800495e:	e000      	b.n	8004962 <NVIC_EncodePriority+0x32>
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004964:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43da      	mvns	r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	401a      	ands	r2, r3
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004978:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	fa01 f303 	lsl.w	r3, r1, r3
 8004982:	43d9      	mvns	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004988:	4313      	orrs	r3, r2
         );
}
 800498a:	4618      	mov	r0, r3
 800498c:	3724      	adds	r7, #36	@ 0x24
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049a8:	d301      	bcc.n	80049ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049aa:	2301      	movs	r3, #1
 80049ac:	e00f      	b.n	80049ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049ae:	4a0a      	ldr	r2, [pc, #40]	@ (80049d8 <SysTick_Config+0x40>)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049b6:	210f      	movs	r1, #15
 80049b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049bc:	f7ff ff8e 	bl	80048dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049c0:	4b05      	ldr	r3, [pc, #20]	@ (80049d8 <SysTick_Config+0x40>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049c6:	4b04      	ldr	r3, [pc, #16]	@ (80049d8 <SysTick_Config+0x40>)
 80049c8:	2207      	movs	r2, #7
 80049ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	e000e010 	.word	0xe000e010

080049dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff ff05 	bl	80047f4 <__NVIC_SetPriorityGrouping>
}
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b086      	sub	sp, #24
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	4603      	mov	r3, r0
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	607a      	str	r2, [r7, #4]
 80049fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a04:	f7ff ff1a 	bl	800483c <__NVIC_GetPriorityGrouping>
 8004a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	6978      	ldr	r0, [r7, #20]
 8004a10:	f7ff ff8e 	bl	8004930 <NVIC_EncodePriority>
 8004a14:	4602      	mov	r2, r0
 8004a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff ff5d 	bl	80048dc <__NVIC_SetPriority>
}
 8004a22:	bf00      	nop
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	4603      	mov	r3, r0
 8004a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff ff0d 	bl	8004858 <__NVIC_EnableIRQ>
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff ff1d 	bl	8004894 <__NVIC_DisableIRQ>
}
 8004a5a:	bf00      	nop
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b082      	sub	sp, #8
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7ff ff94 	bl	8004998 <SysTick_Config>
 8004a70:	4603      	mov	r3, r0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b089      	sub	sp, #36	@ 0x24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
 8004a96:	e177      	b.n	8004d88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a98:	2201      	movs	r2, #1
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	f040 8166 	bne.w	8004d82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d005      	beq.n	8004ace <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d130      	bne.n	8004b30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	2203      	movs	r2, #3
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b04:	2201      	movs	r2, #1
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4013      	ands	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	091b      	lsrs	r3, r3, #4
 8004b1a:	f003 0201 	and.w	r2, r3, #1
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d017      	beq.n	8004b6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	2203      	movs	r2, #3
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	4013      	ands	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d123      	bne.n	8004bc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	08da      	lsrs	r2, r3, #3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3208      	adds	r2, #8
 8004b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	220f      	movs	r2, #15
 8004b90:	fa02 f303 	lsl.w	r3, r2, r3
 8004b94:	43db      	mvns	r3, r3
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	08da      	lsrs	r2, r3, #3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3208      	adds	r2, #8
 8004bba:	69b9      	ldr	r1, [r7, #24]
 8004bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	2203      	movs	r2, #3
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 0203 	and.w	r2, r3, #3
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80c0 	beq.w	8004d82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	4b66      	ldr	r3, [pc, #408]	@ (8004da0 <HAL_GPIO_Init+0x324>)
 8004c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0a:	4a65      	ldr	r2, [pc, #404]	@ (8004da0 <HAL_GPIO_Init+0x324>)
 8004c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c12:	4b63      	ldr	r3, [pc, #396]	@ (8004da0 <HAL_GPIO_Init+0x324>)
 8004c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c1e:	4a61      	ldr	r2, [pc, #388]	@ (8004da4 <HAL_GPIO_Init+0x328>)
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	089b      	lsrs	r3, r3, #2
 8004c24:	3302      	adds	r3, #2
 8004c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	220f      	movs	r2, #15
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a58      	ldr	r2, [pc, #352]	@ (8004da8 <HAL_GPIO_Init+0x32c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d037      	beq.n	8004cba <HAL_GPIO_Init+0x23e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a57      	ldr	r2, [pc, #348]	@ (8004dac <HAL_GPIO_Init+0x330>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d031      	beq.n	8004cb6 <HAL_GPIO_Init+0x23a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a56      	ldr	r2, [pc, #344]	@ (8004db0 <HAL_GPIO_Init+0x334>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d02b      	beq.n	8004cb2 <HAL_GPIO_Init+0x236>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a55      	ldr	r2, [pc, #340]	@ (8004db4 <HAL_GPIO_Init+0x338>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d025      	beq.n	8004cae <HAL_GPIO_Init+0x232>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a54      	ldr	r2, [pc, #336]	@ (8004db8 <HAL_GPIO_Init+0x33c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d01f      	beq.n	8004caa <HAL_GPIO_Init+0x22e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a53      	ldr	r2, [pc, #332]	@ (8004dbc <HAL_GPIO_Init+0x340>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d019      	beq.n	8004ca6 <HAL_GPIO_Init+0x22a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a52      	ldr	r2, [pc, #328]	@ (8004dc0 <HAL_GPIO_Init+0x344>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <HAL_GPIO_Init+0x226>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a51      	ldr	r2, [pc, #324]	@ (8004dc4 <HAL_GPIO_Init+0x348>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00d      	beq.n	8004c9e <HAL_GPIO_Init+0x222>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a50      	ldr	r2, [pc, #320]	@ (8004dc8 <HAL_GPIO_Init+0x34c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <HAL_GPIO_Init+0x21e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a4f      	ldr	r2, [pc, #316]	@ (8004dcc <HAL_GPIO_Init+0x350>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d101      	bne.n	8004c96 <HAL_GPIO_Init+0x21a>
 8004c92:	2309      	movs	r3, #9
 8004c94:	e012      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004c96:	230a      	movs	r3, #10
 8004c98:	e010      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	e00e      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004c9e:	2307      	movs	r3, #7
 8004ca0:	e00c      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004ca2:	2306      	movs	r3, #6
 8004ca4:	e00a      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004ca6:	2305      	movs	r3, #5
 8004ca8:	e008      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004caa:	2304      	movs	r3, #4
 8004cac:	e006      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e004      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e002      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	f002 0203 	and.w	r2, r2, #3
 8004cc2:	0092      	lsls	r2, r2, #2
 8004cc4:	4093      	lsls	r3, r2
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ccc:	4935      	ldr	r1, [pc, #212]	@ (8004da4 <HAL_GPIO_Init+0x328>)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	089b      	lsrs	r3, r3, #2
 8004cd2:	3302      	adds	r3, #2
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cda:	4b3d      	ldr	r3, [pc, #244]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cfe:	4a34      	ldr	r2, [pc, #208]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d04:	4b32      	ldr	r3, [pc, #200]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4013      	ands	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d28:	4a29      	ldr	r2, [pc, #164]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d2e:	4b28      	ldr	r3, [pc, #160]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	43db      	mvns	r3, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d52:	4a1f      	ldr	r2, [pc, #124]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d58:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d7c:	4a14      	ldr	r2, [pc, #80]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3301      	adds	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	2b0f      	cmp	r3, #15
 8004d8c:	f67f ae84 	bls.w	8004a98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	3724      	adds	r7, #36	@ 0x24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40013800 	.word	0x40013800
 8004da8:	40020000 	.word	0x40020000
 8004dac:	40020400 	.word	0x40020400
 8004db0:	40020800 	.word	0x40020800
 8004db4:	40020c00 	.word	0x40020c00
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40021400 	.word	0x40021400
 8004dc0:	40021800 	.word	0x40021800
 8004dc4:	40021c00 	.word	0x40021c00
 8004dc8:	40022000 	.word	0x40022000
 8004dcc:	40022400 	.word	0x40022400
 8004dd0:	40013c00 	.word	0x40013c00

08004dd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	e0d9      	b.n	8004fa4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004df0:	2201      	movs	r2, #1
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	f040 80c9 	bne.w	8004f9e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004e0c:	4a6b      	ldr	r2, [pc, #428]	@ (8004fbc <HAL_GPIO_DeInit+0x1e8>)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	089b      	lsrs	r3, r3, #2
 8004e12:	3302      	adds	r3, #2
 8004e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e18:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f003 0303 	and.w	r3, r3, #3
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	220f      	movs	r2, #15
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a63      	ldr	r2, [pc, #396]	@ (8004fc0 <HAL_GPIO_DeInit+0x1ec>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d037      	beq.n	8004ea6 <HAL_GPIO_DeInit+0xd2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a62      	ldr	r2, [pc, #392]	@ (8004fc4 <HAL_GPIO_DeInit+0x1f0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d031      	beq.n	8004ea2 <HAL_GPIO_DeInit+0xce>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a61      	ldr	r2, [pc, #388]	@ (8004fc8 <HAL_GPIO_DeInit+0x1f4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d02b      	beq.n	8004e9e <HAL_GPIO_DeInit+0xca>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a60      	ldr	r2, [pc, #384]	@ (8004fcc <HAL_GPIO_DeInit+0x1f8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d025      	beq.n	8004e9a <HAL_GPIO_DeInit+0xc6>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a5f      	ldr	r2, [pc, #380]	@ (8004fd0 <HAL_GPIO_DeInit+0x1fc>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d01f      	beq.n	8004e96 <HAL_GPIO_DeInit+0xc2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a5e      	ldr	r2, [pc, #376]	@ (8004fd4 <HAL_GPIO_DeInit+0x200>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d019      	beq.n	8004e92 <HAL_GPIO_DeInit+0xbe>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a5d      	ldr	r2, [pc, #372]	@ (8004fd8 <HAL_GPIO_DeInit+0x204>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d013      	beq.n	8004e8e <HAL_GPIO_DeInit+0xba>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a5c      	ldr	r2, [pc, #368]	@ (8004fdc <HAL_GPIO_DeInit+0x208>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00d      	beq.n	8004e8a <HAL_GPIO_DeInit+0xb6>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a5b      	ldr	r2, [pc, #364]	@ (8004fe0 <HAL_GPIO_DeInit+0x20c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d007      	beq.n	8004e86 <HAL_GPIO_DeInit+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a5a      	ldr	r2, [pc, #360]	@ (8004fe4 <HAL_GPIO_DeInit+0x210>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d101      	bne.n	8004e82 <HAL_GPIO_DeInit+0xae>
 8004e7e:	2309      	movs	r3, #9
 8004e80:	e012      	b.n	8004ea8 <HAL_GPIO_DeInit+0xd4>
 8004e82:	230a      	movs	r3, #10
 8004e84:	e010      	b.n	8004ea8 <HAL_GPIO_DeInit+0xd4>
 8004e86:	2308      	movs	r3, #8
 8004e88:	e00e      	b.n	8004ea8 <HAL_GPIO_DeInit+0xd4>
 8004e8a:	2307      	movs	r3, #7
 8004e8c:	e00c      	b.n	8004ea8 <HAL_GPIO_DeInit+0xd4>
 8004e8e:	2306      	movs	r3, #6
 8004e90:	e00a      	b.n	8004ea8 <HAL_GPIO_DeInit+0xd4>
 8004e92:	2305      	movs	r3, #5
 8004e94:	e008      	b.n	8004ea8 <HAL_GPIO_DeInit+0xd4>
 8004e96:	2304      	movs	r3, #4
 8004e98:	e006      	b.n	8004ea8 <HAL_GPIO_DeInit+0xd4>
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e004      	b.n	8004ea8 <HAL_GPIO_DeInit+0xd4>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	e002      	b.n	8004ea8 <HAL_GPIO_DeInit+0xd4>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <HAL_GPIO_DeInit+0xd4>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	f002 0203 	and.w	r2, r2, #3
 8004eae:	0092      	lsls	r2, r2, #2
 8004eb0:	4093      	lsls	r3, r2
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d132      	bne.n	8004f1e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004eb8:	4b4b      	ldr	r3, [pc, #300]	@ (8004fe8 <HAL_GPIO_DeInit+0x214>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	4949      	ldr	r1, [pc, #292]	@ (8004fe8 <HAL_GPIO_DeInit+0x214>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004ec6:	4b48      	ldr	r3, [pc, #288]	@ (8004fe8 <HAL_GPIO_DeInit+0x214>)
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	4946      	ldr	r1, [pc, #280]	@ (8004fe8 <HAL_GPIO_DeInit+0x214>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004ed4:	4b44      	ldr	r3, [pc, #272]	@ (8004fe8 <HAL_GPIO_DeInit+0x214>)
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	43db      	mvns	r3, r3
 8004edc:	4942      	ldr	r1, [pc, #264]	@ (8004fe8 <HAL_GPIO_DeInit+0x214>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004ee2:	4b41      	ldr	r3, [pc, #260]	@ (8004fe8 <HAL_GPIO_DeInit+0x214>)
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	493f      	ldr	r1, [pc, #252]	@ (8004fe8 <HAL_GPIO_DeInit+0x214>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	220f      	movs	r2, #15
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004f00:	4a2e      	ldr	r2, [pc, #184]	@ (8004fbc <HAL_GPIO_DeInit+0x1e8>)
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	089b      	lsrs	r3, r3, #2
 8004f06:	3302      	adds	r3, #2
 8004f08:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	43da      	mvns	r2, r3
 8004f10:	482a      	ldr	r0, [pc, #168]	@ (8004fbc <HAL_GPIO_DeInit+0x1e8>)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	089b      	lsrs	r3, r3, #2
 8004f16:	400a      	ands	r2, r1
 8004f18:	3302      	adds	r3, #2
 8004f1a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	2103      	movs	r1, #3
 8004f28:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	401a      	ands	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	08da      	lsrs	r2, r3, #3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3208      	adds	r2, #8
 8004f3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	220f      	movs	r2, #15
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	08d2      	lsrs	r2, r2, #3
 8004f54:	4019      	ands	r1, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3208      	adds	r2, #8
 8004f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	2103      	movs	r1, #3
 8004f68:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	401a      	ands	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	2101      	movs	r1, #1
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f80:	43db      	mvns	r3, r3
 8004f82:	401a      	ands	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	2103      	movs	r1, #3
 8004f92:	fa01 f303 	lsl.w	r3, r1, r3
 8004f96:	43db      	mvns	r3, r3
 8004f98:	401a      	ands	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2b0f      	cmp	r3, #15
 8004fa8:	f67f af22 	bls.w	8004df0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40013800 	.word	0x40013800
 8004fc0:	40020000 	.word	0x40020000
 8004fc4:	40020400 	.word	0x40020400
 8004fc8:	40020800 	.word	0x40020800
 8004fcc:	40020c00 	.word	0x40020c00
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40021400 	.word	0x40021400
 8004fd8:	40021800 	.word	0x40021800
 8004fdc:	40021c00 	.word	0x40021c00
 8004fe0:	40022000 	.word	0x40022000
 8004fe4:	40022400 	.word	0x40022400
 8004fe8:	40013c00 	.word	0x40013c00

08004fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	887b      	ldrh	r3, [r7, #2]
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005004:	2301      	movs	r3, #1
 8005006:	73fb      	strb	r3, [r7, #15]
 8005008:	e001      	b.n	800500e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800500a:	2300      	movs	r3, #0
 800500c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800500e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	807b      	strh	r3, [r7, #2]
 8005028:	4613      	mov	r3, r2
 800502a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800502c:	787b      	ldrb	r3, [r7, #1]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005032:	887a      	ldrh	r2, [r7, #2]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005038:	e003      	b.n	8005042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800503a:	887b      	ldrh	r3, [r7, #2]
 800503c:	041a      	lsls	r2, r3, #16
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	619a      	str	r2, [r3, #24]
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e0bf      	b.n	80051e2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7ff f8d6 	bl	8004228 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	699a      	ldr	r2, [r3, #24]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005092:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6999      	ldr	r1, [r3, #24]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80050a8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6899      	ldr	r1, [r3, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	4b4a      	ldr	r3, [pc, #296]	@ (80051ec <HAL_LTDC_Init+0x19c>)
 80050c4:	400b      	ands	r3, r1
 80050c6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	041b      	lsls	r3, r3, #16
 80050ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6899      	ldr	r1, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68d9      	ldr	r1, [r3, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	4b3e      	ldr	r3, [pc, #248]	@ (80051ec <HAL_LTDC_Init+0x19c>)
 80050f2:	400b      	ands	r3, r1
 80050f4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	041b      	lsls	r3, r3, #16
 80050fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68d9      	ldr	r1, [r3, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a1a      	ldr	r2, [r3, #32]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6919      	ldr	r1, [r3, #16]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b33      	ldr	r3, [pc, #204]	@ (80051ec <HAL_LTDC_Init+0x19c>)
 8005120:	400b      	ands	r3, r1
 8005122:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005128:	041b      	lsls	r3, r3, #16
 800512a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6919      	ldr	r1, [r3, #16]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6959      	ldr	r1, [r3, #20]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	4b27      	ldr	r3, [pc, #156]	@ (80051ec <HAL_LTDC_Init+0x19c>)
 800514e:	400b      	ands	r3, r1
 8005150:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005156:	041b      	lsls	r3, r3, #16
 8005158:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6959      	ldr	r1, [r3, #20]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005180:	041b      	lsls	r3, r3, #16
 8005182:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005192:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4313      	orrs	r3, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0206 	orr.w	r2, r2, #6
 80051be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	f000f800 	.word	0xf000f800

080051f0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80051f0:	b5b0      	push	{r4, r5, r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_LTDC_ConfigLayer+0x1a>
 8005206:	2302      	movs	r3, #2
 8005208:	e02c      	b.n	8005264 <HAL_LTDC_ConfigLayer+0x74>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2202      	movs	r2, #2
 8005216:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2134      	movs	r1, #52	@ 0x34
 8005220:	fb01 f303 	mul.w	r3, r1, r3
 8005224:	4413      	add	r3, r2
 8005226:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	4614      	mov	r4, r2
 800522e:	461d      	mov	r5, r3
 8005230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800523a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800523c:	682b      	ldr	r3, [r5, #0]
 800523e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f811 	bl	800526c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2201      	movs	r2, #1
 8005250:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bdb0      	pop	{r4, r5, r7, pc}

0800526c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800526c:	b480      	push	{r7}
 800526e:	b089      	sub	sp, #36	@ 0x24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	0c1b      	lsrs	r3, r3, #16
 8005284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005288:	4413      	add	r3, r2
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	01db      	lsls	r3, r3, #7
 8005298:	4413      	add	r3, r2
 800529a:	3384      	adds	r3, #132	@ 0x84
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	4611      	mov	r1, r2
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	01d2      	lsls	r2, r2, #7
 80052a8:	440a      	add	r2, r1
 80052aa:	3284      	adds	r2, #132	@ 0x84
 80052ac:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80052b0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	0c1b      	lsrs	r3, r3, #16
 80052be:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80052c2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80052c4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4619      	mov	r1, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	01db      	lsls	r3, r3, #7
 80052d0:	440b      	add	r3, r1
 80052d2:	3384      	adds	r3, #132	@ 0x84
 80052d4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80052da:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ea:	4413      	add	r3, r2
 80052ec:	041b      	lsls	r3, r3, #16
 80052ee:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	01db      	lsls	r3, r3, #7
 80052fa:	4413      	add	r3, r2
 80052fc:	3384      	adds	r3, #132	@ 0x84
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	4611      	mov	r1, r2
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	01d2      	lsls	r2, r2, #7
 800530a:	440a      	add	r2, r1
 800530c:	3284      	adds	r2, #132	@ 0x84
 800530e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005312:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005322:	4413      	add	r3, r2
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4619      	mov	r1, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	01db      	lsls	r3, r3, #7
 8005330:	440b      	add	r3, r1
 8005332:	3384      	adds	r3, #132	@ 0x84
 8005334:	4619      	mov	r1, r3
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	4313      	orrs	r3, r2
 800533a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	461a      	mov	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	01db      	lsls	r3, r3, #7
 8005346:	4413      	add	r3, r2
 8005348:	3384      	adds	r3, #132	@ 0x84
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	4611      	mov	r1, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	01d2      	lsls	r2, r2, #7
 8005356:	440a      	add	r2, r1
 8005358:	3284      	adds	r2, #132	@ 0x84
 800535a:	f023 0307 	bic.w	r3, r3, #7
 800535e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	461a      	mov	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	01db      	lsls	r3, r3, #7
 800536a:	4413      	add	r3, r2
 800536c:	3384      	adds	r3, #132	@ 0x84
 800536e:	461a      	mov	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800537c:	021b      	lsls	r3, r3, #8
 800537e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005386:	041b      	lsls	r3, r3, #16
 8005388:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	061b      	lsls	r3, r3, #24
 8005390:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	01db      	lsls	r3, r3, #7
 800539c:	4413      	add	r3, r2
 800539e:	3384      	adds	r3, #132	@ 0x84
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	01db      	lsls	r3, r3, #7
 80053ac:	4413      	add	r3, r2
 80053ae:	3384      	adds	r3, #132	@ 0x84
 80053b0:	461a      	mov	r2, r3
 80053b2:	2300      	movs	r3, #0
 80053b4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053bc:	461a      	mov	r2, r3
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	431a      	orrs	r2, r3
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4619      	mov	r1, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	01db      	lsls	r3, r3, #7
 80053d0:	440b      	add	r3, r1
 80053d2:	3384      	adds	r3, #132	@ 0x84
 80053d4:	4619      	mov	r1, r3
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	01db      	lsls	r3, r3, #7
 80053e6:	4413      	add	r3, r2
 80053e8:	3384      	adds	r3, #132	@ 0x84
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	6812      	ldr	r2, [r2, #0]
 80053f0:	4611      	mov	r1, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	01d2      	lsls	r2, r2, #7
 80053f6:	440a      	add	r2, r1
 80053f8:	3284      	adds	r2, #132	@ 0x84
 80053fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80053fe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	01db      	lsls	r3, r3, #7
 800540a:	4413      	add	r3, r2
 800540c:	3384      	adds	r3, #132	@ 0x84
 800540e:	461a      	mov	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	01db      	lsls	r3, r3, #7
 8005420:	4413      	add	r3, r2
 8005422:	3384      	adds	r3, #132	@ 0x84
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	4611      	mov	r1, r2
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	01d2      	lsls	r2, r2, #7
 8005430:	440a      	add	r2, r1
 8005432:	3284      	adds	r2, #132	@ 0x84
 8005434:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005438:	f023 0307 	bic.w	r3, r3, #7
 800543c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	68f9      	ldr	r1, [r7, #12]
 8005448:	6809      	ldr	r1, [r1, #0]
 800544a:	4608      	mov	r0, r1
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	01c9      	lsls	r1, r1, #7
 8005450:	4401      	add	r1, r0
 8005452:	3184      	adds	r1, #132	@ 0x84
 8005454:	4313      	orrs	r3, r2
 8005456:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	01db      	lsls	r3, r3, #7
 8005462:	4413      	add	r3, r2
 8005464:	3384      	adds	r3, #132	@ 0x84
 8005466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	01db      	lsls	r3, r3, #7
 8005472:	4413      	add	r3, r2
 8005474:	3384      	adds	r3, #132	@ 0x84
 8005476:	461a      	mov	r2, r3
 8005478:	2300      	movs	r3, #0
 800547a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	01db      	lsls	r3, r3, #7
 8005486:	4413      	add	r3, r2
 8005488:	3384      	adds	r3, #132	@ 0x84
 800548a:	461a      	mov	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005490:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d102      	bne.n	80054a0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800549a:	2304      	movs	r3, #4
 800549c:	61fb      	str	r3, [r7, #28]
 800549e:	e01b      	b.n	80054d8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d102      	bne.n	80054ae <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80054a8:	2303      	movs	r3, #3
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	e014      	b.n	80054d8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d00b      	beq.n	80054ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d007      	beq.n	80054ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d003      	beq.n	80054ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80054ca:	2b07      	cmp	r3, #7
 80054cc:	d102      	bne.n	80054d4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80054ce:	2302      	movs	r3, #2
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	e001      	b.n	80054d8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80054d4:	2301      	movs	r3, #1
 80054d6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	461a      	mov	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	01db      	lsls	r3, r3, #7
 80054e2:	4413      	add	r3, r2
 80054e4:	3384      	adds	r3, #132	@ 0x84
 80054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	6812      	ldr	r2, [r2, #0]
 80054ec:	4611      	mov	r1, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	01d2      	lsls	r2, r2, #7
 80054f2:	440a      	add	r2, r1
 80054f4:	3284      	adds	r2, #132	@ 0x84
 80054f6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80054fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005500:	69fa      	ldr	r2, [r7, #28]
 8005502:	fb02 f303 	mul.w	r3, r2, r3
 8005506:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	6859      	ldr	r1, [r3, #4]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	1acb      	subs	r3, r1, r3
 8005512:	69f9      	ldr	r1, [r7, #28]
 8005514:	fb01 f303 	mul.w	r3, r1, r3
 8005518:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800551a:	68f9      	ldr	r1, [r7, #12]
 800551c:	6809      	ldr	r1, [r1, #0]
 800551e:	4608      	mov	r0, r1
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	01c9      	lsls	r1, r1, #7
 8005524:	4401      	add	r1, r0
 8005526:	3184      	adds	r1, #132	@ 0x84
 8005528:	4313      	orrs	r3, r2
 800552a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	01db      	lsls	r3, r3, #7
 8005536:	4413      	add	r3, r2
 8005538:	3384      	adds	r3, #132	@ 0x84
 800553a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	4611      	mov	r1, r2
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	01d2      	lsls	r2, r2, #7
 8005546:	440a      	add	r2, r1
 8005548:	3284      	adds	r2, #132	@ 0x84
 800554a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800554e:	f023 0307 	bic.w	r3, r3, #7
 8005552:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	01db      	lsls	r3, r3, #7
 800555e:	4413      	add	r3, r2
 8005560:	3384      	adds	r3, #132	@ 0x84
 8005562:	461a      	mov	r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005568:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	01db      	lsls	r3, r3, #7
 8005574:	4413      	add	r3, r2
 8005576:	3384      	adds	r3, #132	@ 0x84
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	4611      	mov	r1, r2
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	01d2      	lsls	r2, r2, #7
 8005584:	440a      	add	r2, r1
 8005586:	3284      	adds	r2, #132	@ 0x84
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	6013      	str	r3, [r2, #0]
}
 800558e:	bf00      	nop
 8005590:	3724      	adds	r7, #36	@ 0x24
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
	...

0800559c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e267      	b.n	8005a7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d075      	beq.n	80056a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055ba:	4b88      	ldr	r3, [pc, #544]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 030c 	and.w	r3, r3, #12
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d00c      	beq.n	80055e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055c6:	4b85      	ldr	r3, [pc, #532]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d112      	bne.n	80055f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055d2:	4b82      	ldr	r3, [pc, #520]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055de:	d10b      	bne.n	80055f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e0:	4b7e      	ldr	r3, [pc, #504]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d05b      	beq.n	80056a4 <HAL_RCC_OscConfig+0x108>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d157      	bne.n	80056a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e242      	b.n	8005a7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005600:	d106      	bne.n	8005610 <HAL_RCC_OscConfig+0x74>
 8005602:	4b76      	ldr	r3, [pc, #472]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a75      	ldr	r2, [pc, #468]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 8005608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	e01d      	b.n	800564c <HAL_RCC_OscConfig+0xb0>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005618:	d10c      	bne.n	8005634 <HAL_RCC_OscConfig+0x98>
 800561a:	4b70      	ldr	r3, [pc, #448]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a6f      	ldr	r2, [pc, #444]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 8005620:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	4b6d      	ldr	r3, [pc, #436]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a6c      	ldr	r2, [pc, #432]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 800562c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	e00b      	b.n	800564c <HAL_RCC_OscConfig+0xb0>
 8005634:	4b69      	ldr	r3, [pc, #420]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a68      	ldr	r2, [pc, #416]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 800563a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	4b66      	ldr	r3, [pc, #408]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a65      	ldr	r2, [pc, #404]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 8005646:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800564a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d013      	beq.n	800567c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005654:	f7ff f8c2 	bl	80047dc <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800565c:	f7ff f8be 	bl	80047dc <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b64      	cmp	r3, #100	@ 0x64
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e207      	b.n	8005a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800566e:	4b5b      	ldr	r3, [pc, #364]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0xc0>
 800567a:	e014      	b.n	80056a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567c:	f7ff f8ae 	bl	80047dc <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005684:	f7ff f8aa 	bl	80047dc <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b64      	cmp	r3, #100	@ 0x64
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e1f3      	b.n	8005a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005696:	4b51      	ldr	r3, [pc, #324]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0xe8>
 80056a2:	e000      	b.n	80056a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d063      	beq.n	800577a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056b2:	4b4a      	ldr	r3, [pc, #296]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 030c 	and.w	r3, r3, #12
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00b      	beq.n	80056d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056be:	4b47      	ldr	r3, [pc, #284]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d11c      	bne.n	8005704 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ca:	4b44      	ldr	r3, [pc, #272]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d116      	bne.n	8005704 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056d6:	4b41      	ldr	r3, [pc, #260]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d005      	beq.n	80056ee <HAL_RCC_OscConfig+0x152>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d001      	beq.n	80056ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e1c7      	b.n	8005a7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ee:	4b3b      	ldr	r3, [pc, #236]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	4937      	ldr	r1, [pc, #220]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005702:	e03a      	b.n	800577a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d020      	beq.n	800574e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800570c:	4b34      	ldr	r3, [pc, #208]	@ (80057e0 <HAL_RCC_OscConfig+0x244>)
 800570e:	2201      	movs	r2, #1
 8005710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005712:	f7ff f863 	bl	80047dc <HAL_GetTick>
 8005716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005718:	e008      	b.n	800572c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800571a:	f7ff f85f 	bl	80047dc <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e1a8      	b.n	8005a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800572c:	4b2b      	ldr	r3, [pc, #172]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0f0      	beq.n	800571a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005738:	4b28      	ldr	r3, [pc, #160]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	4925      	ldr	r1, [pc, #148]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 8005748:	4313      	orrs	r3, r2
 800574a:	600b      	str	r3, [r1, #0]
 800574c:	e015      	b.n	800577a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800574e:	4b24      	ldr	r3, [pc, #144]	@ (80057e0 <HAL_RCC_OscConfig+0x244>)
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005754:	f7ff f842 	bl	80047dc <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800575c:	f7ff f83e 	bl	80047dc <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e187      	b.n	8005a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800576e:	4b1b      	ldr	r3, [pc, #108]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	2b00      	cmp	r3, #0
 8005784:	d036      	beq.n	80057f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d016      	beq.n	80057bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800578e:	4b15      	ldr	r3, [pc, #84]	@ (80057e4 <HAL_RCC_OscConfig+0x248>)
 8005790:	2201      	movs	r2, #1
 8005792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005794:	f7ff f822 	bl	80047dc <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800579c:	f7ff f81e 	bl	80047dc <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e167      	b.n	8005a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ae:	4b0b      	ldr	r3, [pc, #44]	@ (80057dc <HAL_RCC_OscConfig+0x240>)
 80057b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0f0      	beq.n	800579c <HAL_RCC_OscConfig+0x200>
 80057ba:	e01b      	b.n	80057f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057bc:	4b09      	ldr	r3, [pc, #36]	@ (80057e4 <HAL_RCC_OscConfig+0x248>)
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057c2:	f7ff f80b 	bl	80047dc <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057c8:	e00e      	b.n	80057e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057ca:	f7ff f807 	bl	80047dc <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d907      	bls.n	80057e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e150      	b.n	8005a7e <HAL_RCC_OscConfig+0x4e2>
 80057dc:	40023800 	.word	0x40023800
 80057e0:	42470000 	.word	0x42470000
 80057e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057e8:	4b88      	ldr	r3, [pc, #544]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 80057ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1ea      	bne.n	80057ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 8097 	beq.w	8005930 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005802:	2300      	movs	r3, #0
 8005804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005806:	4b81      	ldr	r3, [pc, #516]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 8005808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10f      	bne.n	8005832 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005812:	2300      	movs	r3, #0
 8005814:	60bb      	str	r3, [r7, #8]
 8005816:	4b7d      	ldr	r3, [pc, #500]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 8005818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581a:	4a7c      	ldr	r2, [pc, #496]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 800581c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005820:	6413      	str	r3, [r2, #64]	@ 0x40
 8005822:	4b7a      	ldr	r3, [pc, #488]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800582a:	60bb      	str	r3, [r7, #8]
 800582c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800582e:	2301      	movs	r3, #1
 8005830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005832:	4b77      	ldr	r3, [pc, #476]	@ (8005a10 <HAL_RCC_OscConfig+0x474>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583a:	2b00      	cmp	r3, #0
 800583c:	d118      	bne.n	8005870 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800583e:	4b74      	ldr	r3, [pc, #464]	@ (8005a10 <HAL_RCC_OscConfig+0x474>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a73      	ldr	r2, [pc, #460]	@ (8005a10 <HAL_RCC_OscConfig+0x474>)
 8005844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800584a:	f7fe ffc7 	bl	80047dc <HAL_GetTick>
 800584e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005850:	e008      	b.n	8005864 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005852:	f7fe ffc3 	bl	80047dc <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e10c      	b.n	8005a7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005864:	4b6a      	ldr	r3, [pc, #424]	@ (8005a10 <HAL_RCC_OscConfig+0x474>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0f0      	beq.n	8005852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d106      	bne.n	8005886 <HAL_RCC_OscConfig+0x2ea>
 8005878:	4b64      	ldr	r3, [pc, #400]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 800587a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587c:	4a63      	ldr	r2, [pc, #396]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 800587e:	f043 0301 	orr.w	r3, r3, #1
 8005882:	6713      	str	r3, [r2, #112]	@ 0x70
 8005884:	e01c      	b.n	80058c0 <HAL_RCC_OscConfig+0x324>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b05      	cmp	r3, #5
 800588c:	d10c      	bne.n	80058a8 <HAL_RCC_OscConfig+0x30c>
 800588e:	4b5f      	ldr	r3, [pc, #380]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 8005890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005892:	4a5e      	ldr	r2, [pc, #376]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 8005894:	f043 0304 	orr.w	r3, r3, #4
 8005898:	6713      	str	r3, [r2, #112]	@ 0x70
 800589a:	4b5c      	ldr	r3, [pc, #368]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 800589c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589e:	4a5b      	ldr	r2, [pc, #364]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 80058a0:	f043 0301 	orr.w	r3, r3, #1
 80058a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80058a6:	e00b      	b.n	80058c0 <HAL_RCC_OscConfig+0x324>
 80058a8:	4b58      	ldr	r3, [pc, #352]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 80058aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ac:	4a57      	ldr	r2, [pc, #348]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 80058ae:	f023 0301 	bic.w	r3, r3, #1
 80058b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80058b4:	4b55      	ldr	r3, [pc, #340]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 80058b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b8:	4a54      	ldr	r2, [pc, #336]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 80058ba:	f023 0304 	bic.w	r3, r3, #4
 80058be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d015      	beq.n	80058f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c8:	f7fe ff88 	bl	80047dc <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ce:	e00a      	b.n	80058e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058d0:	f7fe ff84 	bl	80047dc <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058de:	4293      	cmp	r3, r2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e0cb      	b.n	8005a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e6:	4b49      	ldr	r3, [pc, #292]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 80058e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0ee      	beq.n	80058d0 <HAL_RCC_OscConfig+0x334>
 80058f2:	e014      	b.n	800591e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058f4:	f7fe ff72 	bl	80047dc <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058fa:	e00a      	b.n	8005912 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058fc:	f7fe ff6e 	bl	80047dc <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800590a:	4293      	cmp	r3, r2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e0b5      	b.n	8005a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005912:	4b3e      	ldr	r3, [pc, #248]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1ee      	bne.n	80058fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800591e:	7dfb      	ldrb	r3, [r7, #23]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d105      	bne.n	8005930 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005924:	4b39      	ldr	r3, [pc, #228]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 8005926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005928:	4a38      	ldr	r2, [pc, #224]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 800592a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800592e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 80a1 	beq.w	8005a7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800593a:	4b34      	ldr	r3, [pc, #208]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 030c 	and.w	r3, r3, #12
 8005942:	2b08      	cmp	r3, #8
 8005944:	d05c      	beq.n	8005a00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d141      	bne.n	80059d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594e:	4b31      	ldr	r3, [pc, #196]	@ (8005a14 <HAL_RCC_OscConfig+0x478>)
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005954:	f7fe ff42 	bl	80047dc <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800595c:	f7fe ff3e 	bl	80047dc <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e087      	b.n	8005a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800596e:	4b27      	ldr	r3, [pc, #156]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1f0      	bne.n	800595c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69da      	ldr	r2, [r3, #28]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005988:	019b      	lsls	r3, r3, #6
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005990:	085b      	lsrs	r3, r3, #1
 8005992:	3b01      	subs	r3, #1
 8005994:	041b      	lsls	r3, r3, #16
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599c:	061b      	lsls	r3, r3, #24
 800599e:	491b      	ldr	r1, [pc, #108]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005a14 <HAL_RCC_OscConfig+0x478>)
 80059a6:	2201      	movs	r2, #1
 80059a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059aa:	f7fe ff17 	bl	80047dc <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059b0:	e008      	b.n	80059c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059b2:	f7fe ff13 	bl	80047dc <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e05c      	b.n	8005a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c4:	4b11      	ldr	r3, [pc, #68]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0f0      	beq.n	80059b2 <HAL_RCC_OscConfig+0x416>
 80059d0:	e054      	b.n	8005a7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d2:	4b10      	ldr	r3, [pc, #64]	@ (8005a14 <HAL_RCC_OscConfig+0x478>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d8:	f7fe ff00 	bl	80047dc <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e0:	f7fe fefc 	bl	80047dc <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e045      	b.n	8005a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f2:	4b06      	ldr	r3, [pc, #24]	@ (8005a0c <HAL_RCC_OscConfig+0x470>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCC_OscConfig+0x444>
 80059fe:	e03d      	b.n	8005a7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d107      	bne.n	8005a18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e038      	b.n	8005a7e <HAL_RCC_OscConfig+0x4e2>
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	40007000 	.word	0x40007000
 8005a14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a18:	4b1b      	ldr	r3, [pc, #108]	@ (8005a88 <HAL_RCC_OscConfig+0x4ec>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d028      	beq.n	8005a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d121      	bne.n	8005a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d11a      	bne.n	8005a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a48:	4013      	ands	r3, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d111      	bne.n	8005a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5e:	085b      	lsrs	r3, r3, #1
 8005a60:	3b01      	subs	r3, #1
 8005a62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d107      	bne.n	8005a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d001      	beq.n	8005a7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	40023800 	.word	0x40023800

08005a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e0cc      	b.n	8005c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005aa0:	4b68      	ldr	r3, [pc, #416]	@ (8005c44 <HAL_RCC_ClockConfig+0x1b8>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 030f 	and.w	r3, r3, #15
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d90c      	bls.n	8005ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aae:	4b65      	ldr	r3, [pc, #404]	@ (8005c44 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab6:	4b63      	ldr	r3, [pc, #396]	@ (8005c44 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0b8      	b.n	8005c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d020      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d005      	beq.n	8005aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ae0:	4b59      	ldr	r3, [pc, #356]	@ (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	4a58      	ldr	r2, [pc, #352]	@ (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0308 	and.w	r3, r3, #8
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005af8:	4b53      	ldr	r3, [pc, #332]	@ (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	4a52      	ldr	r2, [pc, #328]	@ (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005afe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b04:	4b50      	ldr	r3, [pc, #320]	@ (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	494d      	ldr	r1, [pc, #308]	@ (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d044      	beq.n	8005bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d107      	bne.n	8005b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b2a:	4b47      	ldr	r3, [pc, #284]	@ (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d119      	bne.n	8005b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e07f      	b.n	8005c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d003      	beq.n	8005b4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d107      	bne.n	8005b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b4a:	4b3f      	ldr	r3, [pc, #252]	@ (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e06f      	b.n	8005c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e067      	b.n	8005c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b6a:	4b37      	ldr	r3, [pc, #220]	@ (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f023 0203 	bic.w	r2, r3, #3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	4934      	ldr	r1, [pc, #208]	@ (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b7c:	f7fe fe2e 	bl	80047dc <HAL_GetTick>
 8005b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b82:	e00a      	b.n	8005b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b84:	f7fe fe2a 	bl	80047dc <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e04f      	b.n	8005c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 020c 	and.w	r2, r3, #12
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d1eb      	bne.n	8005b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bac:	4b25      	ldr	r3, [pc, #148]	@ (8005c44 <HAL_RCC_ClockConfig+0x1b8>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d20c      	bcs.n	8005bd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bba:	4b22      	ldr	r3, [pc, #136]	@ (8005c44 <HAL_RCC_ClockConfig+0x1b8>)
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bc2:	4b20      	ldr	r3, [pc, #128]	@ (8005c44 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d001      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e032      	b.n	8005c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d008      	beq.n	8005bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005be0:	4b19      	ldr	r3, [pc, #100]	@ (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	4916      	ldr	r1, [pc, #88]	@ (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d009      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bfe:	4b12      	ldr	r3, [pc, #72]	@ (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	490e      	ldr	r1, [pc, #56]	@ (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c12:	f000 f821 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 8005c16:	4602      	mov	r2, r0
 8005c18:	4b0b      	ldr	r3, [pc, #44]	@ (8005c48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	091b      	lsrs	r3, r3, #4
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	490a      	ldr	r1, [pc, #40]	@ (8005c4c <HAL_RCC_ClockConfig+0x1c0>)
 8005c24:	5ccb      	ldrb	r3, [r1, r3]
 8005c26:	fa22 f303 	lsr.w	r3, r2, r3
 8005c2a:	4a09      	ldr	r2, [pc, #36]	@ (8005c50 <HAL_RCC_ClockConfig+0x1c4>)
 8005c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c2e:	4b09      	ldr	r3, [pc, #36]	@ (8005c54 <HAL_RCC_ClockConfig+0x1c8>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fe fd8e 	bl	8004754 <HAL_InitTick>

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	40023c00 	.word	0x40023c00
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	08011708 	.word	0x08011708
 8005c50:	20000224 	.word	0x20000224
 8005c54:	20000228 	.word	0x20000228

08005c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c5c:	b094      	sub	sp, #80	@ 0x50
 8005c5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c64:	2300      	movs	r3, #0
 8005c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c68:	2300      	movs	r3, #0
 8005c6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c70:	4b79      	ldr	r3, [pc, #484]	@ (8005e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 030c 	and.w	r3, r3, #12
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d00d      	beq.n	8005c98 <HAL_RCC_GetSysClockFreq+0x40>
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	f200 80e1 	bhi.w	8005e44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <HAL_RCC_GetSysClockFreq+0x34>
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d003      	beq.n	8005c92 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c8a:	e0db      	b.n	8005e44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c8c:	4b73      	ldr	r3, [pc, #460]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005c90:	e0db      	b.n	8005e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c92:	4b73      	ldr	r3, [pc, #460]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c96:	e0d8      	b.n	8005e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c98:	4b6f      	ldr	r3, [pc, #444]	@ (8005e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ca0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ca2:	4b6d      	ldr	r3, [pc, #436]	@ (8005e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d063      	beq.n	8005d76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cae:	4b6a      	ldr	r3, [pc, #424]	@ (8005e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	099b      	lsrs	r3, r3, #6
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005cca:	4622      	mov	r2, r4
 8005ccc:	462b      	mov	r3, r5
 8005cce:	f04f 0000 	mov.w	r0, #0
 8005cd2:	f04f 0100 	mov.w	r1, #0
 8005cd6:	0159      	lsls	r1, r3, #5
 8005cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cdc:	0150      	lsls	r0, r2, #5
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	1a51      	subs	r1, r2, r1
 8005ce6:	6139      	str	r1, [r7, #16]
 8005ce8:	4629      	mov	r1, r5
 8005cea:	eb63 0301 	sbc.w	r3, r3, r1
 8005cee:	617b      	str	r3, [r7, #20]
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	f04f 0300 	mov.w	r3, #0
 8005cf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cfc:	4659      	mov	r1, fp
 8005cfe:	018b      	lsls	r3, r1, #6
 8005d00:	4651      	mov	r1, sl
 8005d02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d06:	4651      	mov	r1, sl
 8005d08:	018a      	lsls	r2, r1, #6
 8005d0a:	4651      	mov	r1, sl
 8005d0c:	ebb2 0801 	subs.w	r8, r2, r1
 8005d10:	4659      	mov	r1, fp
 8005d12:	eb63 0901 	sbc.w	r9, r3, r1
 8005d16:	f04f 0200 	mov.w	r2, #0
 8005d1a:	f04f 0300 	mov.w	r3, #0
 8005d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d2a:	4690      	mov	r8, r2
 8005d2c:	4699      	mov	r9, r3
 8005d2e:	4623      	mov	r3, r4
 8005d30:	eb18 0303 	adds.w	r3, r8, r3
 8005d34:	60bb      	str	r3, [r7, #8]
 8005d36:	462b      	mov	r3, r5
 8005d38:	eb49 0303 	adc.w	r3, r9, r3
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	f04f 0300 	mov.w	r3, #0
 8005d46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	024b      	lsls	r3, r1, #9
 8005d4e:	4621      	mov	r1, r4
 8005d50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d54:	4621      	mov	r1, r4
 8005d56:	024a      	lsls	r2, r1, #9
 8005d58:	4610      	mov	r0, r2
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d5e:	2200      	movs	r2, #0
 8005d60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d68:	f7fa ff00 	bl	8000b6c <__aeabi_uldivmod>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4613      	mov	r3, r2
 8005d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d74:	e058      	b.n	8005e28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d76:	4b38      	ldr	r3, [pc, #224]	@ (8005e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	099b      	lsrs	r3, r3, #6
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	4618      	mov	r0, r3
 8005d80:	4611      	mov	r1, r2
 8005d82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d86:	623b      	str	r3, [r7, #32]
 8005d88:	2300      	movs	r3, #0
 8005d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d90:	4642      	mov	r2, r8
 8005d92:	464b      	mov	r3, r9
 8005d94:	f04f 0000 	mov.w	r0, #0
 8005d98:	f04f 0100 	mov.w	r1, #0
 8005d9c:	0159      	lsls	r1, r3, #5
 8005d9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005da2:	0150      	lsls	r0, r2, #5
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4641      	mov	r1, r8
 8005daa:	ebb2 0a01 	subs.w	sl, r2, r1
 8005dae:	4649      	mov	r1, r9
 8005db0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005db4:	f04f 0200 	mov.w	r2, #0
 8005db8:	f04f 0300 	mov.w	r3, #0
 8005dbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005dc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005dc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005dc8:	ebb2 040a 	subs.w	r4, r2, sl
 8005dcc:	eb63 050b 	sbc.w	r5, r3, fp
 8005dd0:	f04f 0200 	mov.w	r2, #0
 8005dd4:	f04f 0300 	mov.w	r3, #0
 8005dd8:	00eb      	lsls	r3, r5, #3
 8005dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dde:	00e2      	lsls	r2, r4, #3
 8005de0:	4614      	mov	r4, r2
 8005de2:	461d      	mov	r5, r3
 8005de4:	4643      	mov	r3, r8
 8005de6:	18e3      	adds	r3, r4, r3
 8005de8:	603b      	str	r3, [r7, #0]
 8005dea:	464b      	mov	r3, r9
 8005dec:	eb45 0303 	adc.w	r3, r5, r3
 8005df0:	607b      	str	r3, [r7, #4]
 8005df2:	f04f 0200 	mov.w	r2, #0
 8005df6:	f04f 0300 	mov.w	r3, #0
 8005dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005dfe:	4629      	mov	r1, r5
 8005e00:	028b      	lsls	r3, r1, #10
 8005e02:	4621      	mov	r1, r4
 8005e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e08:	4621      	mov	r1, r4
 8005e0a:	028a      	lsls	r2, r1, #10
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e12:	2200      	movs	r2, #0
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	61fa      	str	r2, [r7, #28]
 8005e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e1c:	f7fa fea6 	bl	8000b6c <__aeabi_uldivmod>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4613      	mov	r3, r2
 8005e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e28:	4b0b      	ldr	r3, [pc, #44]	@ (8005e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	0c1b      	lsrs	r3, r3, #16
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	3301      	adds	r3, #1
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005e38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e42:	e002      	b.n	8005e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e44:	4b05      	ldr	r3, [pc, #20]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8005e46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3750      	adds	r7, #80	@ 0x50
 8005e50:	46bd      	mov	sp, r7
 8005e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e56:	bf00      	nop
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	00f42400 	.word	0x00f42400
 8005e60:	007a1200 	.word	0x007a1200

08005e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10b      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d105      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d075      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e98:	4b91      	ldr	r3, [pc, #580]	@ (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e9e:	f7fe fc9d 	bl	80047dc <HAL_GetTick>
 8005ea2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ea6:	f7fe fc99 	bl	80047dc <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e189      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005eb8:	4b8a      	ldr	r3, [pc, #552]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1f0      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d009      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	019a      	lsls	r2, r3, #6
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	071b      	lsls	r3, r3, #28
 8005edc:	4981      	ldr	r1, [pc, #516]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01f      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ef0:	4b7c      	ldr	r3, [pc, #496]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ef6:	0f1b      	lsrs	r3, r3, #28
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	019a      	lsls	r2, r3, #6
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	061b      	lsls	r3, r3, #24
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	071b      	lsls	r3, r3, #28
 8005f10:	4974      	ldr	r1, [pc, #464]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f18:	4b72      	ldr	r3, [pc, #456]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f1e:	f023 021f 	bic.w	r2, r3, #31
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	496e      	ldr	r1, [pc, #440]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00d      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	019a      	lsls	r2, r3, #6
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	061b      	lsls	r3, r3, #24
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	071b      	lsls	r3, r3, #28
 8005f50:	4964      	ldr	r1, [pc, #400]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f58:	4b61      	ldr	r3, [pc, #388]	@ (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f5e:	f7fe fc3d 	bl	80047dc <HAL_GetTick>
 8005f62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f64:	e008      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f66:	f7fe fc39 	bl	80047dc <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e129      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f78:	4b5a      	ldr	r3, [pc, #360]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f0      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d105      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d079      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005f9c:	4b52      	ldr	r3, [pc, #328]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fa2:	f7fe fc1b 	bl	80047dc <HAL_GetTick>
 8005fa6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fa8:	e008      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005faa:	f7fe fc17 	bl	80047dc <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e107      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fbc:	4b49      	ldr	r3, [pc, #292]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fc8:	d0ef      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0304 	and.w	r3, r3, #4
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d020      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005fd6:	4b43      	ldr	r3, [pc, #268]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fdc:	0f1b      	lsrs	r3, r3, #28
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	019a      	lsls	r2, r3, #6
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	061b      	lsls	r3, r3, #24
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	071b      	lsls	r3, r3, #28
 8005ff6:	493b      	ldr	r1, [pc, #236]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ffe:	4b39      	ldr	r3, [pc, #228]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006004:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	3b01      	subs	r3, #1
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	4934      	ldr	r1, [pc, #208]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006012:	4313      	orrs	r3, r2
 8006014:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01e      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006024:	4b2f      	ldr	r3, [pc, #188]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602a:	0e1b      	lsrs	r3, r3, #24
 800602c:	f003 030f 	and.w	r3, r3, #15
 8006030:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	019a      	lsls	r2, r3, #6
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	061b      	lsls	r3, r3, #24
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	071b      	lsls	r3, r3, #28
 8006044:	4927      	ldr	r1, [pc, #156]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800604c:	4b25      	ldr	r3, [pc, #148]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800604e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006052:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605a:	4922      	ldr	r1, [pc, #136]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800605c:	4313      	orrs	r3, r2
 800605e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006062:	4b21      	ldr	r3, [pc, #132]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006064:	2201      	movs	r2, #1
 8006066:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006068:	f7fe fbb8 	bl	80047dc <HAL_GetTick>
 800606c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800606e:	e008      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006070:	f7fe fbb4 	bl	80047dc <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b02      	cmp	r3, #2
 800607c:	d901      	bls.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e0a4      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006082:	4b18      	ldr	r3, [pc, #96]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800608a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800608e:	d1ef      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 808b 	beq.w	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
 80060a2:	4b10      	ldr	r3, [pc, #64]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a6:	4a0f      	ldr	r2, [pc, #60]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80060ae:	4b0d      	ldr	r3, [pc, #52]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80060ba:	4b0c      	ldr	r3, [pc, #48]	@ (80060ec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a0b      	ldr	r2, [pc, #44]	@ (80060ec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80060c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060c6:	f7fe fb89 	bl	80047dc <HAL_GetTick>
 80060ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060cc:	e010      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80060ce:	f7fe fb85 	bl	80047dc <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d909      	bls.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e075      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80060e0:	42470068 	.word	0x42470068
 80060e4:	40023800 	.word	0x40023800
 80060e8:	42470070 	.word	0x42470070
 80060ec:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060f0:	4b38      	ldr	r3, [pc, #224]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0e8      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060fc:	4b36      	ldr	r3, [pc, #216]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006100:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006104:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d02f      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006110:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	429a      	cmp	r2, r3
 8006118:	d028      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800611a:	4b2f      	ldr	r3, [pc, #188]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800611c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800611e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006122:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006124:	4b2d      	ldr	r3, [pc, #180]	@ (80061dc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006126:	2201      	movs	r2, #1
 8006128:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800612a:	4b2c      	ldr	r3, [pc, #176]	@ (80061dc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006130:	4a29      	ldr	r2, [pc, #164]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006136:	4b28      	ldr	r3, [pc, #160]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b01      	cmp	r3, #1
 8006140:	d114      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006142:	f7fe fb4b 	bl	80047dc <HAL_GetTick>
 8006146:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006148:	e00a      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800614a:	f7fe fb47 	bl	80047dc <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006158:	4293      	cmp	r3, r2
 800615a:	d901      	bls.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e035      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006160:	4b1d      	ldr	r3, [pc, #116]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0ee      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006170:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006174:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006178:	d10d      	bne.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800617a:	4b17      	ldr	r3, [pc, #92]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006186:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800618a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800618e:	4912      	ldr	r1, [pc, #72]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006190:	4313      	orrs	r3, r2
 8006192:	608b      	str	r3, [r1, #8]
 8006194:	e005      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006196:	4b10      	ldr	r3, [pc, #64]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	4a0f      	ldr	r2, [pc, #60]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800619c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80061a0:	6093      	str	r3, [r2, #8]
 80061a2:	4b0d      	ldr	r3, [pc, #52]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061a4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ae:	490a      	ldr	r1, [pc, #40]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d004      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80061c6:	4b06      	ldr	r3, [pc, #24]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80061c8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	40007000 	.word	0x40007000
 80061d8:	40023800 	.word	0x40023800
 80061dc:	42470e40 	.word	0x42470e40
 80061e0:	424711e0 	.word	0x424711e0

080061e4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e01c      	b.n	8006230 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	795b      	ldrb	r3, [r3, #5]
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d105      	bne.n	800620c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fe f936 	bl	8004478 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 0204 	orr.w	r2, r2, #4
 8006220:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	791b      	ldrb	r3, [r3, #4]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d101      	bne.n	8006252 <HAL_RNG_GenerateRandomNumber+0x1a>
 800624e:	2302      	movs	r3, #2
 8006250:	e044      	b.n	80062dc <HAL_RNG_GenerateRandomNumber+0xa4>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	795b      	ldrb	r3, [r3, #5]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b01      	cmp	r3, #1
 8006260:	d133      	bne.n	80062ca <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2202      	movs	r2, #2
 8006266:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006268:	f7fe fab8 	bl	80047dc <HAL_GetTick>
 800626c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800626e:	e018      	b.n	80062a2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006270:	f7fe fab4 	bl	80047dc <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d911      	bls.n	80062a2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b01      	cmp	r3, #1
 800628a:	d00a      	beq.n	80062a2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e01c      	b.n	80062dc <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d1df      	bne.n	8006270 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689a      	ldr	r2, [r3, #8]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	715a      	strb	r2, [r3, #5]
 80062c8:	e004      	b.n	80062d4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2204      	movs	r2, #4
 80062ce:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	711a      	strb	r2, [r3, #4]

  return status;
 80062da:	7bfb      	ldrb	r3, [r7, #15]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e07b      	b.n	80063ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d108      	bne.n	8006310 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006306:	d009      	beq.n	800631c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	61da      	str	r2, [r3, #28]
 800630e:	e005      	b.n	800631c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fe f8c0 	bl	80044bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006352:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	431a      	orrs	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800638c:	431a      	orrs	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006396:	431a      	orrs	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a0:	ea42 0103 	orr.w	r1, r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	0c1b      	lsrs	r3, r3, #16
 80063ba:	f003 0104 	and.w	r1, r3, #4
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c2:	f003 0210 	and.w	r2, r3, #16
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69da      	ldr	r2, [r3, #28]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e01a      	b.n	800643e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800641e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7fe f893 	bl	800454c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b088      	sub	sp, #32
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	603b      	str	r3, [r7, #0]
 8006452:	4613      	mov	r3, r2
 8006454:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_SPI_Transmit+0x22>
 8006464:	2302      	movs	r3, #2
 8006466:	e126      	b.n	80066b6 <HAL_SPI_Transmit+0x270>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006470:	f7fe f9b4 	bl	80047dc <HAL_GetTick>
 8006474:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b01      	cmp	r3, #1
 8006484:	d002      	beq.n	800648c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006486:	2302      	movs	r3, #2
 8006488:	77fb      	strb	r3, [r7, #31]
    goto error;
 800648a:	e10b      	b.n	80066a4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <HAL_SPI_Transmit+0x52>
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d102      	bne.n	800649e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800649c:	e102      	b.n	80066a4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2203      	movs	r2, #3
 80064a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	88fa      	ldrh	r2, [r7, #6]
 80064b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	88fa      	ldrh	r2, [r7, #6]
 80064bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064e4:	d10f      	bne.n	8006506 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006504:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006510:	2b40      	cmp	r3, #64	@ 0x40
 8006512:	d007      	beq.n	8006524 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006522:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800652c:	d14b      	bne.n	80065c6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <HAL_SPI_Transmit+0xf6>
 8006536:	8afb      	ldrh	r3, [r7, #22]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d13e      	bne.n	80065ba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006540:	881a      	ldrh	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654c:	1c9a      	adds	r2, r3, #2
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006556:	b29b      	uxth	r3, r3
 8006558:	3b01      	subs	r3, #1
 800655a:	b29a      	uxth	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006560:	e02b      	b.n	80065ba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b02      	cmp	r3, #2
 800656e:	d112      	bne.n	8006596 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006574:	881a      	ldrh	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006580:	1c9a      	adds	r2, r3, #2
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800658a:	b29b      	uxth	r3, r3
 800658c:	3b01      	subs	r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006594:	e011      	b.n	80065ba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006596:	f7fe f921 	bl	80047dc <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d803      	bhi.n	80065ae <HAL_SPI_Transmit+0x168>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065ac:	d102      	bne.n	80065b4 <HAL_SPI_Transmit+0x16e>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d102      	bne.n	80065ba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065b8:	e074      	b.n	80066a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065be:	b29b      	uxth	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1ce      	bne.n	8006562 <HAL_SPI_Transmit+0x11c>
 80065c4:	e04c      	b.n	8006660 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <HAL_SPI_Transmit+0x18e>
 80065ce:	8afb      	ldrh	r3, [r7, #22]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d140      	bne.n	8006656 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	330c      	adds	r3, #12
 80065de:	7812      	ldrb	r2, [r2, #0]
 80065e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80065fa:	e02c      	b.n	8006656 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b02      	cmp	r3, #2
 8006608:	d113      	bne.n	8006632 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	330c      	adds	r3, #12
 8006614:	7812      	ldrb	r2, [r2, #0]
 8006616:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006626:	b29b      	uxth	r3, r3
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006630:	e011      	b.n	8006656 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006632:	f7fe f8d3 	bl	80047dc <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	d803      	bhi.n	800664a <HAL_SPI_Transmit+0x204>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006648:	d102      	bne.n	8006650 <HAL_SPI_Transmit+0x20a>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d102      	bne.n	8006656 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006654:	e026      	b.n	80066a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1cd      	bne.n	80065fc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 fbd9 	bl	8006e1c <SPI_EndRxTxTransaction>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2220      	movs	r2, #32
 8006674:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800667e:	2300      	movs	r3, #0
 8006680:	613b      	str	r3, [r7, #16]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	77fb      	strb	r3, [r7, #31]
 80066a0:	e000      	b.n	80066a4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80066a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80066b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3720      	adds	r7, #32
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b088      	sub	sp, #32
 80066c2:	af02      	add	r7, sp, #8
 80066c4:	60f8      	str	r0, [r7, #12]
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	603b      	str	r3, [r7, #0]
 80066ca:	4613      	mov	r3, r2
 80066cc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066da:	d112      	bne.n	8006702 <HAL_SPI_Receive+0x44>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10e      	bne.n	8006702 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2204      	movs	r2, #4
 80066e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80066ec:	88fa      	ldrh	r2, [r7, #6]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	4613      	mov	r3, r2
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 f8f1 	bl	80068e0 <HAL_SPI_TransmitReceive>
 80066fe:	4603      	mov	r3, r0
 8006700:	e0ea      	b.n	80068d8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006708:	2b01      	cmp	r3, #1
 800670a:	d101      	bne.n	8006710 <HAL_SPI_Receive+0x52>
 800670c:	2302      	movs	r3, #2
 800670e:	e0e3      	b.n	80068d8 <HAL_SPI_Receive+0x21a>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006718:	f7fe f860 	bl	80047dc <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b01      	cmp	r3, #1
 8006728:	d002      	beq.n	8006730 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800672a:	2302      	movs	r3, #2
 800672c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800672e:	e0ca      	b.n	80068c6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <HAL_SPI_Receive+0x7e>
 8006736:	88fb      	ldrh	r3, [r7, #6]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d102      	bne.n	8006742 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006740:	e0c1      	b.n	80068c6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2204      	movs	r2, #4
 8006746:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	88fa      	ldrh	r2, [r7, #6]
 800675a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	88fa      	ldrh	r2, [r7, #6]
 8006760:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006788:	d10f      	bne.n	80067aa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006798:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80067a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b4:	2b40      	cmp	r3, #64	@ 0x40
 80067b6:	d007      	beq.n	80067c8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d162      	bne.n	8006896 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80067d0:	e02e      	b.n	8006830 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d115      	bne.n	800680c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f103 020c 	add.w	r2, r3, #12
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ec:	7812      	ldrb	r2, [r2, #0]
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006800:	b29b      	uxth	r3, r3
 8006802:	3b01      	subs	r3, #1
 8006804:	b29a      	uxth	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800680a:	e011      	b.n	8006830 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800680c:	f7fd ffe6 	bl	80047dc <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	429a      	cmp	r2, r3
 800681a:	d803      	bhi.n	8006824 <HAL_SPI_Receive+0x166>
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006822:	d102      	bne.n	800682a <HAL_SPI_Receive+0x16c>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d102      	bne.n	8006830 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800682e:	e04a      	b.n	80068c6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1cb      	bne.n	80067d2 <HAL_SPI_Receive+0x114>
 800683a:	e031      	b.n	80068a0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b01      	cmp	r3, #1
 8006848:	d113      	bne.n	8006872 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006854:	b292      	uxth	r2, r2
 8006856:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685c:	1c9a      	adds	r2, r3, #2
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006870:	e011      	b.n	8006896 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006872:	f7fd ffb3 	bl	80047dc <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d803      	bhi.n	800688a <HAL_SPI_Receive+0x1cc>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006888:	d102      	bne.n	8006890 <HAL_SPI_Receive+0x1d2>
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d102      	bne.n	8006896 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006894:	e017      	b.n	80068c6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800689a:	b29b      	uxth	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1cd      	bne.n	800683c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 fa53 	bl	8006d50 <SPI_EndRxTransaction>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2220      	movs	r2, #32
 80068b4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	75fb      	strb	r3, [r7, #23]
 80068c2:	e000      	b.n	80068c6 <HAL_SPI_Receive+0x208>
  }

error :
 80068c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3718      	adds	r7, #24
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08c      	sub	sp, #48	@ 0x30
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80068ee:	2301      	movs	r3, #1
 80068f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d101      	bne.n	8006906 <HAL_SPI_TransmitReceive+0x26>
 8006902:	2302      	movs	r3, #2
 8006904:	e18a      	b.n	8006c1c <HAL_SPI_TransmitReceive+0x33c>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800690e:	f7fd ff65 	bl	80047dc <HAL_GetTick>
 8006912:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800691a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006924:	887b      	ldrh	r3, [r7, #2]
 8006926:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006928:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800692c:	2b01      	cmp	r3, #1
 800692e:	d00f      	beq.n	8006950 <HAL_SPI_TransmitReceive+0x70>
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006936:	d107      	bne.n	8006948 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d103      	bne.n	8006948 <HAL_SPI_TransmitReceive+0x68>
 8006940:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006944:	2b04      	cmp	r3, #4
 8006946:	d003      	beq.n	8006950 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006948:	2302      	movs	r3, #2
 800694a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800694e:	e15b      	b.n	8006c08 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <HAL_SPI_TransmitReceive+0x82>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <HAL_SPI_TransmitReceive+0x82>
 800695c:	887b      	ldrh	r3, [r7, #2]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d103      	bne.n	800696a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006968:	e14e      	b.n	8006c08 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b04      	cmp	r3, #4
 8006974:	d003      	beq.n	800697e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2205      	movs	r2, #5
 800697a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	887a      	ldrh	r2, [r7, #2]
 800698e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	887a      	ldrh	r2, [r7, #2]
 8006994:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	887a      	ldrh	r2, [r7, #2]
 80069a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	887a      	ldrh	r2, [r7, #2]
 80069a6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069be:	2b40      	cmp	r3, #64	@ 0x40
 80069c0:	d007      	beq.n	80069d2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069da:	d178      	bne.n	8006ace <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <HAL_SPI_TransmitReceive+0x10a>
 80069e4:	8b7b      	ldrh	r3, [r7, #26]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d166      	bne.n	8006ab8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ee:	881a      	ldrh	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069fa:	1c9a      	adds	r2, r3, #2
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a0e:	e053      	b.n	8006ab8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d11b      	bne.n	8006a56 <HAL_SPI_TransmitReceive+0x176>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d016      	beq.n	8006a56 <HAL_SPI_TransmitReceive+0x176>
 8006a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d113      	bne.n	8006a56 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a32:	881a      	ldrh	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a3e:	1c9a      	adds	r2, r3, #2
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d119      	bne.n	8006a98 <HAL_SPI_TransmitReceive+0x1b8>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d014      	beq.n	8006a98 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a78:	b292      	uxth	r2, r2
 8006a7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a80:	1c9a      	adds	r2, r3, #2
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a94:	2301      	movs	r3, #1
 8006a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a98:	f7fd fea0 	bl	80047dc <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d807      	bhi.n	8006ab8 <HAL_SPI_TransmitReceive+0x1d8>
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006aae:	d003      	beq.n	8006ab8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006ab6:	e0a7      	b.n	8006c08 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1a6      	bne.n	8006a10 <HAL_SPI_TransmitReceive+0x130>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1a1      	bne.n	8006a10 <HAL_SPI_TransmitReceive+0x130>
 8006acc:	e07c      	b.n	8006bc8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <HAL_SPI_TransmitReceive+0x1fc>
 8006ad6:	8b7b      	ldrh	r3, [r7, #26]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d16b      	bne.n	8006bb4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	330c      	adds	r3, #12
 8006ae6:	7812      	ldrb	r2, [r2, #0]
 8006ae8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b02:	e057      	b.n	8006bb4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d11c      	bne.n	8006b4c <HAL_SPI_TransmitReceive+0x26c>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d017      	beq.n	8006b4c <HAL_SPI_TransmitReceive+0x26c>
 8006b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d114      	bne.n	8006b4c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	330c      	adds	r3, #12
 8006b2c:	7812      	ldrb	r2, [r2, #0]
 8006b2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d119      	bne.n	8006b8e <HAL_SPI_TransmitReceive+0x2ae>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d014      	beq.n	8006b8e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b76:	1c5a      	adds	r2, r3, #1
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b8e:	f7fd fe25 	bl	80047dc <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d803      	bhi.n	8006ba6 <HAL_SPI_TransmitReceive+0x2c6>
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ba4:	d102      	bne.n	8006bac <HAL_SPI_TransmitReceive+0x2cc>
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d103      	bne.n	8006bb4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006bb2:	e029      	b.n	8006c08 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1a2      	bne.n	8006b04 <HAL_SPI_TransmitReceive+0x224>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d19d      	bne.n	8006b04 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 f925 	bl	8006e1c <SPI_EndRxTxTransaction>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d006      	beq.n	8006be6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2220      	movs	r2, #32
 8006be2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006be4:	e010      	b.n	8006c08 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10b      	bne.n	8006c06 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bee:	2300      	movs	r3, #0
 8006bf0:	617b      	str	r3, [r7, #20]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	617b      	str	r3, [r7, #20]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	e000      	b.n	8006c08 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006c06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006c18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3730      	adds	r7, #48	@ 0x30
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c32:	b2db      	uxtb	r3, r3
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	603b      	str	r3, [r7, #0]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c50:	f7fd fdc4 	bl	80047dc <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c58:	1a9b      	subs	r3, r3, r2
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c60:	f7fd fdbc 	bl	80047dc <HAL_GetTick>
 8006c64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c66:	4b39      	ldr	r3, [pc, #228]	@ (8006d4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	015b      	lsls	r3, r3, #5
 8006c6c:	0d1b      	lsrs	r3, r3, #20
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	fb02 f303 	mul.w	r3, r2, r3
 8006c74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c76:	e054      	b.n	8006d22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c7e:	d050      	beq.n	8006d22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c80:	f7fd fdac 	bl	80047dc <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d902      	bls.n	8006c96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d13d      	bne.n	8006d12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ca4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cae:	d111      	bne.n	8006cd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cb8:	d004      	beq.n	8006cc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc2:	d107      	bne.n	8006cd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cdc:	d10f      	bne.n	8006cfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006cfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e017      	b.n	8006d42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	bf0c      	ite	eq
 8006d32:	2301      	moveq	r3, #1
 8006d34:	2300      	movne	r3, #0
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	461a      	mov	r2, r3
 8006d3a:	79fb      	ldrb	r3, [r7, #7]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d19b      	bne.n	8006c78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3720      	adds	r7, #32
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000224 	.word	0x20000224

08006d50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af02      	add	r7, sp, #8
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d64:	d111      	bne.n	8006d8a <SPI_EndRxTransaction+0x3a>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d6e:	d004      	beq.n	8006d7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d78:	d107      	bne.n	8006d8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d88:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d92:	d12a      	bne.n	8006dea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d9c:	d012      	beq.n	8006dc4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2200      	movs	r2, #0
 8006da6:	2180      	movs	r1, #128	@ 0x80
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f7ff ff49 	bl	8006c40 <SPI_WaitFlagStateUntilTimeout>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d02d      	beq.n	8006e10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006db8:	f043 0220 	orr.w	r2, r3, #32
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e026      	b.n	8006e12 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	2101      	movs	r1, #1
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f7ff ff36 	bl	8006c40 <SPI_WaitFlagStateUntilTimeout>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d01a      	beq.n	8006e10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dde:	f043 0220 	orr.w	r2, r3, #32
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e013      	b.n	8006e12 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2200      	movs	r2, #0
 8006df2:	2101      	movs	r1, #1
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f7ff ff23 	bl	8006c40 <SPI_WaitFlagStateUntilTimeout>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d007      	beq.n	8006e10 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e04:	f043 0220 	orr.w	r2, r3, #32
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e000      	b.n	8006e12 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b088      	sub	sp, #32
 8006e20:	af02      	add	r7, sp, #8
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e28:	4b1b      	ldr	r3, [pc, #108]	@ (8006e98 <SPI_EndRxTxTransaction+0x7c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8006e9c <SPI_EndRxTxTransaction+0x80>)
 8006e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e32:	0d5b      	lsrs	r3, r3, #21
 8006e34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006e38:	fb02 f303 	mul.w	r3, r2, r3
 8006e3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e46:	d112      	bne.n	8006e6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	2180      	movs	r1, #128	@ 0x80
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f7ff fef4 	bl	8006c40 <SPI_WaitFlagStateUntilTimeout>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d016      	beq.n	8006e8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e62:	f043 0220 	orr.w	r2, r3, #32
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e00f      	b.n	8006e8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e84:	2b80      	cmp	r3, #128	@ 0x80
 8006e86:	d0f2      	beq.n	8006e6e <SPI_EndRxTxTransaction+0x52>
 8006e88:	e000      	b.n	8006e8c <SPI_EndRxTxTransaction+0x70>
        break;
 8006e8a:	bf00      	nop
  }

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000224 	.word	0x20000224
 8006e9c:	165e9f81 	.word	0x165e9f81

08006ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e041      	b.n	8006f36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d106      	bne.n	8006ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7fd fb5e 	bl	8004588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	3304      	adds	r3, #4
 8006edc:	4619      	mov	r1, r3
 8006ede:	4610      	mov	r0, r2
 8006ee0:	f000 f82e 	bl	8006f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
	...

08006f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a40      	ldr	r2, [pc, #256]	@ (8007054 <TIM_Base_SetConfig+0x114>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d013      	beq.n	8006f80 <TIM_Base_SetConfig+0x40>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f5e:	d00f      	beq.n	8006f80 <TIM_Base_SetConfig+0x40>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a3d      	ldr	r2, [pc, #244]	@ (8007058 <TIM_Base_SetConfig+0x118>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00b      	beq.n	8006f80 <TIM_Base_SetConfig+0x40>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a3c      	ldr	r2, [pc, #240]	@ (800705c <TIM_Base_SetConfig+0x11c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d007      	beq.n	8006f80 <TIM_Base_SetConfig+0x40>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a3b      	ldr	r2, [pc, #236]	@ (8007060 <TIM_Base_SetConfig+0x120>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d003      	beq.n	8006f80 <TIM_Base_SetConfig+0x40>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a3a      	ldr	r2, [pc, #232]	@ (8007064 <TIM_Base_SetConfig+0x124>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d108      	bne.n	8006f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a2f      	ldr	r2, [pc, #188]	@ (8007054 <TIM_Base_SetConfig+0x114>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d02b      	beq.n	8006ff2 <TIM_Base_SetConfig+0xb2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fa0:	d027      	beq.n	8006ff2 <TIM_Base_SetConfig+0xb2>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a2c      	ldr	r2, [pc, #176]	@ (8007058 <TIM_Base_SetConfig+0x118>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d023      	beq.n	8006ff2 <TIM_Base_SetConfig+0xb2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a2b      	ldr	r2, [pc, #172]	@ (800705c <TIM_Base_SetConfig+0x11c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d01f      	beq.n	8006ff2 <TIM_Base_SetConfig+0xb2>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8007060 <TIM_Base_SetConfig+0x120>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d01b      	beq.n	8006ff2 <TIM_Base_SetConfig+0xb2>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a29      	ldr	r2, [pc, #164]	@ (8007064 <TIM_Base_SetConfig+0x124>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d017      	beq.n	8006ff2 <TIM_Base_SetConfig+0xb2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a28      	ldr	r2, [pc, #160]	@ (8007068 <TIM_Base_SetConfig+0x128>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d013      	beq.n	8006ff2 <TIM_Base_SetConfig+0xb2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a27      	ldr	r2, [pc, #156]	@ (800706c <TIM_Base_SetConfig+0x12c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00f      	beq.n	8006ff2 <TIM_Base_SetConfig+0xb2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a26      	ldr	r2, [pc, #152]	@ (8007070 <TIM_Base_SetConfig+0x130>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00b      	beq.n	8006ff2 <TIM_Base_SetConfig+0xb2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a25      	ldr	r2, [pc, #148]	@ (8007074 <TIM_Base_SetConfig+0x134>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d007      	beq.n	8006ff2 <TIM_Base_SetConfig+0xb2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a24      	ldr	r2, [pc, #144]	@ (8007078 <TIM_Base_SetConfig+0x138>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d003      	beq.n	8006ff2 <TIM_Base_SetConfig+0xb2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a23      	ldr	r2, [pc, #140]	@ (800707c <TIM_Base_SetConfig+0x13c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d108      	bne.n	8007004 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a0a      	ldr	r2, [pc, #40]	@ (8007054 <TIM_Base_SetConfig+0x114>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d003      	beq.n	8007038 <TIM_Base_SetConfig+0xf8>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a0c      	ldr	r2, [pc, #48]	@ (8007064 <TIM_Base_SetConfig+0x124>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d103      	bne.n	8007040 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	691a      	ldr	r2, [r3, #16]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	615a      	str	r2, [r3, #20]
}
 8007046:	bf00      	nop
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	40010000 	.word	0x40010000
 8007058:	40000400 	.word	0x40000400
 800705c:	40000800 	.word	0x40000800
 8007060:	40000c00 	.word	0x40000c00
 8007064:	40010400 	.word	0x40010400
 8007068:	40014000 	.word	0x40014000
 800706c:	40014400 	.word	0x40014400
 8007070:	40014800 	.word	0x40014800
 8007074:	40001800 	.word	0x40001800
 8007078:	40001c00 	.word	0x40001c00
 800707c:	40002000 	.word	0x40002000

08007080 <__NVIC_SetPriority>:
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	4603      	mov	r3, r0
 8007088:	6039      	str	r1, [r7, #0]
 800708a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800708c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007090:	2b00      	cmp	r3, #0
 8007092:	db0a      	blt.n	80070aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	b2da      	uxtb	r2, r3
 8007098:	490c      	ldr	r1, [pc, #48]	@ (80070cc <__NVIC_SetPriority+0x4c>)
 800709a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800709e:	0112      	lsls	r2, r2, #4
 80070a0:	b2d2      	uxtb	r2, r2
 80070a2:	440b      	add	r3, r1
 80070a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80070a8:	e00a      	b.n	80070c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	4908      	ldr	r1, [pc, #32]	@ (80070d0 <__NVIC_SetPriority+0x50>)
 80070b0:	79fb      	ldrb	r3, [r7, #7]
 80070b2:	f003 030f 	and.w	r3, r3, #15
 80070b6:	3b04      	subs	r3, #4
 80070b8:	0112      	lsls	r2, r2, #4
 80070ba:	b2d2      	uxtb	r2, r2
 80070bc:	440b      	add	r3, r1
 80070be:	761a      	strb	r2, [r3, #24]
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	e000e100 	.word	0xe000e100
 80070d0:	e000ed00 	.word	0xe000ed00

080070d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80070d8:	2100      	movs	r1, #0
 80070da:	f06f 0004 	mvn.w	r0, #4
 80070de:	f7ff ffcf 	bl	8007080 <__NVIC_SetPriority>
#endif
}
 80070e2:	bf00      	nop
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070ee:	f3ef 8305 	mrs	r3, IPSR
 80070f2:	603b      	str	r3, [r7, #0]
  return(result);
 80070f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80070fa:	f06f 0305 	mvn.w	r3, #5
 80070fe:	607b      	str	r3, [r7, #4]
 8007100:	e00c      	b.n	800711c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007102:	4b0a      	ldr	r3, [pc, #40]	@ (800712c <osKernelInitialize+0x44>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d105      	bne.n	8007116 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800710a:	4b08      	ldr	r3, [pc, #32]	@ (800712c <osKernelInitialize+0x44>)
 800710c:	2201      	movs	r2, #1
 800710e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007110:	2300      	movs	r3, #0
 8007112:	607b      	str	r3, [r7, #4]
 8007114:	e002      	b.n	800711c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007116:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800711a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800711c:	687b      	ldr	r3, [r7, #4]
}
 800711e:	4618      	mov	r0, r3
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	20025dc8 	.word	0x20025dc8

08007130 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007136:	f3ef 8305 	mrs	r3, IPSR
 800713a:	603b      	str	r3, [r7, #0]
  return(result);
 800713c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800713e:	2b00      	cmp	r3, #0
 8007140:	d003      	beq.n	800714a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007142:	f06f 0305 	mvn.w	r3, #5
 8007146:	607b      	str	r3, [r7, #4]
 8007148:	e010      	b.n	800716c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800714a:	4b0b      	ldr	r3, [pc, #44]	@ (8007178 <osKernelStart+0x48>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d109      	bne.n	8007166 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007152:	f7ff ffbf 	bl	80070d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007156:	4b08      	ldr	r3, [pc, #32]	@ (8007178 <osKernelStart+0x48>)
 8007158:	2202      	movs	r2, #2
 800715a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800715c:	f002 fc86 	bl	8009a6c <vTaskStartScheduler>
      stat = osOK;
 8007160:	2300      	movs	r3, #0
 8007162:	607b      	str	r3, [r7, #4]
 8007164:	e002      	b.n	800716c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007166:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800716a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800716c:	687b      	ldr	r3, [r7, #4]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20025dc8 	.word	0x20025dc8

0800717c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007182:	f3ef 8305 	mrs	r3, IPSR
 8007186:	603b      	str	r3, [r7, #0]
  return(result);
 8007188:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800718e:	f002 fdb1 	bl	8009cf4 <xTaskGetTickCountFromISR>
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	e002      	b.n	800719c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8007196:	f002 fd9d 	bl	8009cd4 <xTaskGetTickCount>
 800719a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800719c:	687b      	ldr	r3, [r7, #4]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b08e      	sub	sp, #56	@ 0x38
 80071aa:	af04      	add	r7, sp, #16
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071b6:	f3ef 8305 	mrs	r3, IPSR
 80071ba:	617b      	str	r3, [r7, #20]
  return(result);
 80071bc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d17e      	bne.n	80072c0 <osThreadNew+0x11a>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d07b      	beq.n	80072c0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80071c8:	2380      	movs	r3, #128	@ 0x80
 80071ca:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80071cc:	2318      	movs	r3, #24
 80071ce:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80071d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d045      	beq.n	800726c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <osThreadNew+0x48>
        name = attr->name;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d008      	beq.n	8007214 <osThreadNew+0x6e>
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	2b38      	cmp	r3, #56	@ 0x38
 8007206:	d805      	bhi.n	8007214 <osThreadNew+0x6e>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <osThreadNew+0x72>
        return (NULL);
 8007214:	2300      	movs	r3, #0
 8007216:	e054      	b.n	80072c2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d003      	beq.n	8007228 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	089b      	lsrs	r3, r3, #2
 8007226:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00e      	beq.n	800724e <osThreadNew+0xa8>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	2ba7      	cmp	r3, #167	@ 0xa7
 8007236:	d90a      	bls.n	800724e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800723c:	2b00      	cmp	r3, #0
 800723e:	d006      	beq.n	800724e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <osThreadNew+0xa8>
        mem = 1;
 8007248:	2301      	movs	r3, #1
 800724a:	61bb      	str	r3, [r7, #24]
 800724c:	e010      	b.n	8007270 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10c      	bne.n	8007270 <osThreadNew+0xca>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d108      	bne.n	8007270 <osThreadNew+0xca>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d104      	bne.n	8007270 <osThreadNew+0xca>
          mem = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	61bb      	str	r3, [r7, #24]
 800726a:	e001      	b.n	8007270 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800726c:	2300      	movs	r3, #0
 800726e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d110      	bne.n	8007298 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800727e:	9202      	str	r2, [sp, #8]
 8007280:	9301      	str	r3, [sp, #4]
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	6a3a      	ldr	r2, [r7, #32]
 800728a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f002 f9d7 	bl	8009640 <xTaskCreateStatic>
 8007292:	4603      	mov	r3, r0
 8007294:	613b      	str	r3, [r7, #16]
 8007296:	e013      	b.n	80072c0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d110      	bne.n	80072c0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	f107 0310 	add.w	r3, r7, #16
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f002 fa25 	bl	8009700 <xTaskCreate>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d001      	beq.n	80072c0 <osThreadNew+0x11a>
            hTask = NULL;
 80072bc:	2300      	movs	r3, #0
 80072be:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80072c0:	693b      	ldr	r3, [r7, #16]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3728      	adds	r7, #40	@ 0x28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072d2:	f3ef 8305 	mrs	r3, IPSR
 80072d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80072d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <osDelay+0x1c>
    stat = osErrorISR;
 80072de:	f06f 0305 	mvn.w	r3, #5
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	e007      	b.n	80072f6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f002 fb81 	bl	80099f8 <vTaskDelay>
    }
  }

  return (stat);
 80072f6:	68fb      	ldr	r3, [r7, #12]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f003 ff7f 	bl	800b20c <pvTimerGetTimerID>
 800730e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <TimerCallback+0x22>
    callb->func (callb->arg);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	6852      	ldr	r2, [r2, #4]
 800731e:	4610      	mov	r0, r2
 8007320:	4798      	blx	r3
  }
}
 8007322:	bf00      	nop
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800732c:	b580      	push	{r7, lr}
 800732e:	b08c      	sub	sp, #48	@ 0x30
 8007330:	af02      	add	r7, sp, #8
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	607a      	str	r2, [r7, #4]
 8007336:	603b      	str	r3, [r7, #0]
 8007338:	460b      	mov	r3, r1
 800733a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800733c:	2300      	movs	r3, #0
 800733e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007340:	f3ef 8305 	mrs	r3, IPSR
 8007344:	613b      	str	r3, [r7, #16]
  return(result);
 8007346:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8007348:	2b00      	cmp	r3, #0
 800734a:	d163      	bne.n	8007414 <osTimerNew+0xe8>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d060      	beq.n	8007414 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007352:	2008      	movs	r0, #8
 8007354:	f004 f9f2 	bl	800b73c <pvPortMalloc>
 8007358:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d059      	beq.n	8007414 <osTimerNew+0xe8>
      callb->func = func;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800736c:	7afb      	ldrb	r3, [r7, #11]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d102      	bne.n	8007378 <osTimerNew+0x4c>
        reload = pdFALSE;
 8007372:	2300      	movs	r3, #0
 8007374:	61fb      	str	r3, [r7, #28]
 8007376:	e001      	b.n	800737c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8007378:	2301      	movs	r3, #1
 800737a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800737c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007380:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8007382:	2300      	movs	r3, #0
 8007384:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01c      	beq.n	80073c6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <osTimerNew+0x6e>
          name = attr->name;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d006      	beq.n	80073b0 <osTimerNew+0x84>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80073a8:	d902      	bls.n	80073b0 <osTimerNew+0x84>
          mem = 1;
 80073aa:	2301      	movs	r3, #1
 80073ac:	61bb      	str	r3, [r7, #24]
 80073ae:	e00c      	b.n	80073ca <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d108      	bne.n	80073ca <osTimerNew+0x9e>
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d104      	bne.n	80073ca <osTimerNew+0x9e>
            mem = 0;
 80073c0:	2300      	movs	r3, #0
 80073c2:	61bb      	str	r3, [r7, #24]
 80073c4:	e001      	b.n	80073ca <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d10c      	bne.n	80073ea <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	9301      	str	r3, [sp, #4]
 80073d6:	4b12      	ldr	r3, [pc, #72]	@ (8007420 <osTimerNew+0xf4>)
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	69fa      	ldr	r2, [r7, #28]
 80073de:	2101      	movs	r1, #1
 80073e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80073e2:	f003 fb5c 	bl	800aa9e <xTimerCreateStatic>
 80073e6:	6238      	str	r0, [r7, #32]
 80073e8:	e00b      	b.n	8007402 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d108      	bne.n	8007402 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80073f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007420 <osTimerNew+0xf4>)
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	2101      	movs	r1, #1
 80073fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80073fc:	f003 fb2e 	bl	800aa5c <xTimerCreate>
 8007400:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d105      	bne.n	8007414 <osTimerNew+0xe8>
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <osTimerNew+0xe8>
        vPortFree (callb);
 800740e:	6978      	ldr	r0, [r7, #20]
 8007410:	f004 fa62 	bl	800b8d8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007414:	6a3b      	ldr	r3, [r7, #32]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3728      	adds	r7, #40	@ 0x28
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	08007301 	.word	0x08007301

08007424 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007424:	b580      	push	{r7, lr}
 8007426:	b088      	sub	sp, #32
 8007428:	af02      	add	r7, sp, #8
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007432:	f3ef 8305 	mrs	r3, IPSR
 8007436:	60fb      	str	r3, [r7, #12]
  return(result);
 8007438:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <osTimerStart+0x22>
    stat = osErrorISR;
 800743e:	f06f 0305 	mvn.w	r3, #5
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	e017      	b.n	8007476 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d103      	bne.n	8007454 <osTimerStart+0x30>
    stat = osErrorParameter;
 800744c:	f06f 0303 	mvn.w	r3, #3
 8007450:	617b      	str	r3, [r7, #20]
 8007452:	e010      	b.n	8007476 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007454:	2300      	movs	r3, #0
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	2300      	movs	r3, #0
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	2104      	movs	r1, #4
 800745e:	6938      	ldr	r0, [r7, #16]
 8007460:	f003 fb9a 	bl	800ab98 <xTimerGenericCommand>
 8007464:	4603      	mov	r3, r0
 8007466:	2b01      	cmp	r3, #1
 8007468:	d102      	bne.n	8007470 <osTimerStart+0x4c>
      stat = osOK;
 800746a:	2300      	movs	r3, #0
 800746c:	617b      	str	r3, [r7, #20]
 800746e:	e002      	b.n	8007476 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8007470:	f06f 0302 	mvn.w	r3, #2
 8007474:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007476:	697b      	ldr	r3, [r7, #20]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8007480:	b580      	push	{r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af02      	add	r7, sp, #8
 8007486:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800748c:	f3ef 8305 	mrs	r3, IPSR
 8007490:	60fb      	str	r3, [r7, #12]
  return(result);
 8007492:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <osTimerStop+0x20>
    stat = osErrorISR;
 8007498:	f06f 0305 	mvn.w	r3, #5
 800749c:	617b      	str	r3, [r7, #20]
 800749e:	e021      	b.n	80074e4 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d103      	bne.n	80074ae <osTimerStop+0x2e>
    stat = osErrorParameter;
 80074a6:	f06f 0303 	mvn.w	r3, #3
 80074aa:	617b      	str	r3, [r7, #20]
 80074ac:	e01a      	b.n	80074e4 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 80074ae:	6938      	ldr	r0, [r7, #16]
 80074b0:	f003 fe82 	bl	800b1b8 <xTimerIsTimerActive>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d103      	bne.n	80074c2 <osTimerStop+0x42>
      stat = osErrorResource;
 80074ba:	f06f 0302 	mvn.w	r3, #2
 80074be:	617b      	str	r3, [r7, #20]
 80074c0:	e010      	b.n	80074e4 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80074c2:	2300      	movs	r3, #0
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	2300      	movs	r3, #0
 80074c8:	2200      	movs	r2, #0
 80074ca:	2103      	movs	r1, #3
 80074cc:	6938      	ldr	r0, [r7, #16]
 80074ce:	f003 fb63 	bl	800ab98 <xTimerGenericCommand>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d102      	bne.n	80074de <osTimerStop+0x5e>
        stat = osOK;
 80074d8:	2300      	movs	r3, #0
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	e002      	b.n	80074e4 <osTimerStop+0x64>
      } else {
        stat = osError;
 80074de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074e2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80074e4:	697b      	ldr	r3, [r7, #20]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b086      	sub	sp, #24
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074fa:	f3ef 8305 	mrs	r3, IPSR
 80074fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8007500:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 8007502:	2b00      	cmp	r3, #0
 8007504:	d102      	bne.n	800750c <osTimerIsRunning+0x1e>
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d102      	bne.n	8007512 <osTimerIsRunning+0x24>
    running = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	e004      	b.n	800751c <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 8007512:	6938      	ldr	r0, [r7, #16]
 8007514:	f003 fe50 	bl	800b1b8 <xTimerIsTimerActive>
 8007518:	4603      	mov	r3, r0
 800751a:	617b      	str	r3, [r7, #20]
  }

  return (running);
 800751c:	697b      	ldr	r3, [r7, #20]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007526:	b580      	push	{r7, lr}
 8007528:	b086      	sub	sp, #24
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800752e:	2300      	movs	r3, #0
 8007530:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007532:	f3ef 8305 	mrs	r3, IPSR
 8007536:	60fb      	str	r3, [r7, #12]
  return(result);
 8007538:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800753a:	2b00      	cmp	r3, #0
 800753c:	d12d      	bne.n	800759a <osEventFlagsNew+0x74>
    mem = -1;
 800753e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007542:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d015      	beq.n	8007576 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d006      	beq.n	8007560 <osEventFlagsNew+0x3a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	2b1f      	cmp	r3, #31
 8007558:	d902      	bls.n	8007560 <osEventFlagsNew+0x3a>
        mem = 1;
 800755a:	2301      	movs	r3, #1
 800755c:	613b      	str	r3, [r7, #16]
 800755e:	e00c      	b.n	800757a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d108      	bne.n	800757a <osEventFlagsNew+0x54>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d104      	bne.n	800757a <osEventFlagsNew+0x54>
          mem = 0;
 8007570:	2300      	movs	r3, #0
 8007572:	613b      	str	r3, [r7, #16]
 8007574:	e001      	b.n	800757a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8007576:	2300      	movs	r3, #0
 8007578:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d106      	bne.n	800758e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fb67 	bl	8007c58 <xEventGroupCreateStatic>
 800758a:	6178      	str	r0, [r7, #20]
 800758c:	e005      	b.n	800759a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d102      	bne.n	800759a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8007594:	f000 fb99 	bl	8007cca <xEventGroupCreate>
 8007598:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800759a:	697b      	ldr	r3, [r7, #20]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3718      	adds	r7, #24
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <osEventFlagsSet+0x1c>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075be:	d303      	bcc.n	80075c8 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 80075c0:	f06f 0303 	mvn.w	r3, #3
 80075c4:	617b      	str	r3, [r7, #20]
 80075c6:	e028      	b.n	800761a <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075c8:	f3ef 8305 	mrs	r3, IPSR
 80075cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80075ce:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d01d      	beq.n	8007610 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80075d8:	f107 0308 	add.w	r3, r7, #8
 80075dc:	461a      	mov	r2, r3
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6938      	ldr	r0, [r7, #16]
 80075e2:	f000 fd99 	bl	8008118 <xEventGroupSetBitsFromISR>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d103      	bne.n	80075f4 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 80075ec:	f06f 0302 	mvn.w	r3, #2
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	e012      	b.n	800761a <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00d      	beq.n	800761a <osEventFlagsSet+0x76>
 80075fe:	4b09      	ldr	r3, [pc, #36]	@ (8007624 <osEventFlagsSet+0x80>)
 8007600:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	e004      	b.n	800761a <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6938      	ldr	r0, [r7, #16]
 8007614:	f000 fcb8 	bl	8007f88 <xEventGroupSetBits>
 8007618:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800761a:	697b      	ldr	r3, [r7, #20]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	e000ed04 	.word	0xe000ed04

08007628 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <osEventFlagsClear+0x1c>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007642:	d303      	bcc.n	800764c <osEventFlagsClear+0x24>
    rflags = (uint32_t)osErrorParameter;
 8007644:	f06f 0303 	mvn.w	r3, #3
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	e019      	b.n	8007680 <osEventFlagsClear+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800764c:	f3ef 8305 	mrs	r3, IPSR
 8007650:	60fb      	str	r3, [r7, #12]
  return(result);
 8007652:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00e      	beq.n	8007676 <osEventFlagsClear+0x4e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8007658:	6938      	ldr	r0, [r7, #16]
 800765a:	f000 fc71 	bl	8007f40 <xEventGroupGetBitsFromISR>
 800765e:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6938      	ldr	r0, [r7, #16]
 8007664:	f000 fc58 	bl	8007f18 <xEventGroupClearBitsFromISR>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d108      	bne.n	8007680 <osEventFlagsClear+0x58>
      rflags = (uint32_t)osErrorResource;
 800766e:	f06f 0302 	mvn.w	r3, #2
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	e004      	b.n	8007680 <osEventFlagsClear+0x58>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6938      	ldr	r0, [r7, #16]
 800767a:	f000 fc13 	bl	8007ea4 <xEventGroupClearBits>
 800767e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8007680:	697b      	ldr	r3, [r7, #20]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 800768a:	b580      	push	{r7, lr}
 800768c:	b086      	sub	sp, #24
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d102      	bne.n	80076a2 <osEventFlagsGet+0x18>
    rflags = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	e00f      	b.n	80076c2 <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076a2:	f3ef 8305 	mrs	r3, IPSR
 80076a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80076a8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d004      	beq.n	80076b8 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80076ae:	6938      	ldr	r0, [r7, #16]
 80076b0:	f000 fc46 	bl	8007f40 <xEventGroupGetBitsFromISR>
 80076b4:	6178      	str	r0, [r7, #20]
 80076b6:	e004      	b.n	80076c2 <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 80076b8:	2100      	movs	r1, #0
 80076ba:	6938      	ldr	r0, [r7, #16]
 80076bc:	f000 fbf2 	bl	8007ea4 <xEventGroupClearBits>
 80076c0:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80076c2:	697b      	ldr	r3, [r7, #20]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3718      	adds	r7, #24
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08c      	sub	sp, #48	@ 0x30
 80076d0:	af02      	add	r7, sp, #8
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d003      	beq.n	80076ec <osEventFlagsWait+0x20>
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076ea:	d303      	bcc.n	80076f4 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 80076ec:	f06f 0303 	mvn.w	r3, #3
 80076f0:	61fb      	str	r3, [r7, #28]
 80076f2:	e04b      	b.n	800778c <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076f4:	f3ef 8305 	mrs	r3, IPSR
 80076f8:	617b      	str	r3, [r7, #20]
  return(result);
 80076fa:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8007700:	f06f 0305 	mvn.w	r3, #5
 8007704:	61fb      	str	r3, [r7, #28]
 8007706:	e041      	b.n	800778c <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f003 0301 	and.w	r3, r3, #1
 800770e:	2b00      	cmp	r3, #0
 8007710:	d002      	beq.n	8007718 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8007712:	2301      	movs	r3, #1
 8007714:	627b      	str	r3, [r7, #36]	@ 0x24
 8007716:	e001      	b.n	800771c <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8007718:	2300      	movs	r3, #0
 800771a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	2b00      	cmp	r3, #0
 8007724:	d002      	beq.n	800772c <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8007726:	2300      	movs	r3, #0
 8007728:	623b      	str	r3, [r7, #32]
 800772a:	e001      	b.n	8007730 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 800772c:	2301      	movs	r3, #1
 800772e:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007736:	6a3a      	ldr	r2, [r7, #32]
 8007738:	68b9      	ldr	r1, [r7, #8]
 800773a:	69b8      	ldr	r0, [r7, #24]
 800773c:	f000 fae0 	bl	8007d00 <xEventGroupWaitBits>
 8007740:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	2b00      	cmp	r3, #0
 800774a:	d010      	beq.n	800776e <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	4013      	ands	r3, r2
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	429a      	cmp	r2, r3
 8007756:	d019      	beq.n	800778c <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 800775e:	f06f 0301 	mvn.w	r3, #1
 8007762:	61fb      	str	r3, [r7, #28]
 8007764:	e012      	b.n	800778c <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007766:	f06f 0302 	mvn.w	r3, #2
 800776a:	61fb      	str	r3, [r7, #28]
 800776c:	e00e      	b.n	800778c <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	4013      	ands	r3, r2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d109      	bne.n	800778c <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 800777e:	f06f 0301 	mvn.w	r3, #1
 8007782:	61fb      	str	r3, [r7, #28]
 8007784:	e002      	b.n	800778c <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007786:	f06f 0302 	mvn.w	r3, #2
 800778a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800778c:	69fb      	ldr	r3, [r7, #28]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3728      	adds	r7, #40	@ 0x28
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007796:	b580      	push	{r7, lr}
 8007798:	b088      	sub	sp, #32
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800779e:	2300      	movs	r3, #0
 80077a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077a2:	f3ef 8305 	mrs	r3, IPSR
 80077a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80077a8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d174      	bne.n	8007898 <osMutexNew+0x102>
    if (attr != NULL) {
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <osMutexNew+0x26>
      type = attr->attr_bits;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	61bb      	str	r3, [r7, #24]
 80077ba:	e001      	b.n	80077c0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d002      	beq.n	80077d0 <osMutexNew+0x3a>
      rmtx = 1U;
 80077ca:	2301      	movs	r3, #1
 80077cc:	617b      	str	r3, [r7, #20]
 80077ce:	e001      	b.n	80077d4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	f003 0308 	and.w	r3, r3, #8
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d15c      	bne.n	8007898 <osMutexNew+0x102>
      mem = -1;
 80077de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80077e2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d015      	beq.n	8007816 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d006      	beq.n	8007800 <osMutexNew+0x6a>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	2b4f      	cmp	r3, #79	@ 0x4f
 80077f8:	d902      	bls.n	8007800 <osMutexNew+0x6a>
          mem = 1;
 80077fa:	2301      	movs	r3, #1
 80077fc:	613b      	str	r3, [r7, #16]
 80077fe:	e00c      	b.n	800781a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d108      	bne.n	800781a <osMutexNew+0x84>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d104      	bne.n	800781a <osMutexNew+0x84>
            mem = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	613b      	str	r3, [r7, #16]
 8007814:	e001      	b.n	800781a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007816:	2300      	movs	r3, #0
 8007818:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d112      	bne.n	8007846 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d007      	beq.n	8007836 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	4619      	mov	r1, r3
 800782c:	2004      	movs	r0, #4
 800782e:	f000 feb8 	bl	80085a2 <xQueueCreateMutexStatic>
 8007832:	61f8      	str	r0, [r7, #28]
 8007834:	e016      	b.n	8007864 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	4619      	mov	r1, r3
 800783c:	2001      	movs	r0, #1
 800783e:	f000 feb0 	bl	80085a2 <xQueueCreateMutexStatic>
 8007842:	61f8      	str	r0, [r7, #28]
 8007844:	e00e      	b.n	8007864 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10b      	bne.n	8007864 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d004      	beq.n	800785c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007852:	2004      	movs	r0, #4
 8007854:	f000 fe8d 	bl	8008572 <xQueueCreateMutex>
 8007858:	61f8      	str	r0, [r7, #28]
 800785a:	e003      	b.n	8007864 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800785c:	2001      	movs	r0, #1
 800785e:	f000 fe88 	bl	8008572 <xQueueCreateMutex>
 8007862:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00c      	beq.n	8007884 <osMutexNew+0xee>
        if (attr != NULL) {
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d003      	beq.n	8007878 <osMutexNew+0xe2>
          name = attr->name;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	60fb      	str	r3, [r7, #12]
 8007876:	e001      	b.n	800787c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007878:	2300      	movs	r3, #0
 800787a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800787c:	68f9      	ldr	r1, [r7, #12]
 800787e:	69f8      	ldr	r0, [r7, #28]
 8007880:	f001 fe4e 	bl	8009520 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d006      	beq.n	8007898 <osMutexNew+0x102>
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	f043 0301 	orr.w	r3, r3, #1
 8007896:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007898:	69fb      	ldr	r3, [r7, #28]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3720      	adds	r7, #32
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b086      	sub	sp, #24
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f023 0301 	bic.w	r3, r3, #1
 80078b2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80078bc:	2300      	movs	r3, #0
 80078be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078c0:	f3ef 8305 	mrs	r3, IPSR
 80078c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80078c6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80078cc:	f06f 0305 	mvn.w	r3, #5
 80078d0:	617b      	str	r3, [r7, #20]
 80078d2:	e02c      	b.n	800792e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d103      	bne.n	80078e2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80078da:	f06f 0303 	mvn.w	r3, #3
 80078de:	617b      	str	r3, [r7, #20]
 80078e0:	e025      	b.n	800792e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d011      	beq.n	800790c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6938      	ldr	r0, [r7, #16]
 80078ec:	f000 fea9 	bl	8008642 <xQueueTakeMutexRecursive>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d01b      	beq.n	800792e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80078fc:	f06f 0301 	mvn.w	r3, #1
 8007900:	617b      	str	r3, [r7, #20]
 8007902:	e014      	b.n	800792e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007904:	f06f 0302 	mvn.w	r3, #2
 8007908:	617b      	str	r3, [r7, #20]
 800790a:	e010      	b.n	800792e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6938      	ldr	r0, [r7, #16]
 8007910:	f001 fad0 	bl	8008eb4 <xQueueSemaphoreTake>
 8007914:	4603      	mov	r3, r0
 8007916:	2b01      	cmp	r3, #1
 8007918:	d009      	beq.n	800792e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007920:	f06f 0301 	mvn.w	r3, #1
 8007924:	617b      	str	r3, [r7, #20]
 8007926:	e002      	b.n	800792e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007928:	f06f 0302 	mvn.w	r3, #2
 800792c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800792e:	697b      	ldr	r3, [r7, #20]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3718      	adds	r7, #24
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f023 0301 	bic.w	r3, r3, #1
 8007946:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007950:	2300      	movs	r3, #0
 8007952:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007954:	f3ef 8305 	mrs	r3, IPSR
 8007958:	60bb      	str	r3, [r7, #8]
  return(result);
 800795a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007960:	f06f 0305 	mvn.w	r3, #5
 8007964:	617b      	str	r3, [r7, #20]
 8007966:	e01f      	b.n	80079a8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d103      	bne.n	8007976 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800796e:	f06f 0303 	mvn.w	r3, #3
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	e018      	b.n	80079a8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d009      	beq.n	8007990 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800797c:	6938      	ldr	r0, [r7, #16]
 800797e:	f000 fe2b 	bl	80085d8 <xQueueGiveMutexRecursive>
 8007982:	4603      	mov	r3, r0
 8007984:	2b01      	cmp	r3, #1
 8007986:	d00f      	beq.n	80079a8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007988:	f06f 0302 	mvn.w	r3, #2
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	e00b      	b.n	80079a8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007990:	2300      	movs	r3, #0
 8007992:	2200      	movs	r2, #0
 8007994:	2100      	movs	r1, #0
 8007996:	6938      	ldr	r0, [r7, #16]
 8007998:	f000 fef8 	bl	800878c <xQueueGenericSend>
 800799c:	4603      	mov	r3, r0
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d002      	beq.n	80079a8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80079a2:	f06f 0302 	mvn.w	r3, #2
 80079a6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80079a8:	697b      	ldr	r3, [r7, #20]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b08a      	sub	sp, #40	@ 0x28
 80079b6:	af02      	add	r7, sp, #8
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	60b9      	str	r1, [r7, #8]
 80079bc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079c2:	f3ef 8305 	mrs	r3, IPSR
 80079c6:	613b      	str	r3, [r7, #16]
  return(result);
 80079c8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d175      	bne.n	8007aba <osSemaphoreNew+0x108>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d072      	beq.n	8007aba <osSemaphoreNew+0x108>
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d86e      	bhi.n	8007aba <osSemaphoreNew+0x108>
    mem = -1;
 80079dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d015      	beq.n	8007a14 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d006      	beq.n	80079fe <osSemaphoreNew+0x4c>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	2b4f      	cmp	r3, #79	@ 0x4f
 80079f6:	d902      	bls.n	80079fe <osSemaphoreNew+0x4c>
        mem = 1;
 80079f8:	2301      	movs	r3, #1
 80079fa:	61bb      	str	r3, [r7, #24]
 80079fc:	e00c      	b.n	8007a18 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d108      	bne.n	8007a18 <osSemaphoreNew+0x66>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d104      	bne.n	8007a18 <osSemaphoreNew+0x66>
          mem = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	61bb      	str	r3, [r7, #24]
 8007a12:	e001      	b.n	8007a18 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007a14:	2300      	movs	r3, #0
 8007a16:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a1e:	d04c      	beq.n	8007aba <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d128      	bne.n	8007a78 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d10a      	bne.n	8007a42 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	2203      	movs	r2, #3
 8007a32:	9200      	str	r2, [sp, #0]
 8007a34:	2200      	movs	r2, #0
 8007a36:	2100      	movs	r1, #0
 8007a38:	2001      	movs	r0, #1
 8007a3a:	f000 fc9f 	bl	800837c <xQueueGenericCreateStatic>
 8007a3e:	61f8      	str	r0, [r7, #28]
 8007a40:	e005      	b.n	8007a4e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007a42:	2203      	movs	r2, #3
 8007a44:	2100      	movs	r1, #0
 8007a46:	2001      	movs	r0, #1
 8007a48:	f000 fd15 	bl	8008476 <xQueueGenericCreate>
 8007a4c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d022      	beq.n	8007a9a <osSemaphoreNew+0xe8>
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d01f      	beq.n	8007a9a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2100      	movs	r1, #0
 8007a60:	69f8      	ldr	r0, [r7, #28]
 8007a62:	f000 fe93 	bl	800878c <xQueueGenericSend>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d016      	beq.n	8007a9a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007a6c:	69f8      	ldr	r0, [r7, #28]
 8007a6e:	f001 fc01 	bl	8009274 <vQueueDelete>
            hSemaphore = NULL;
 8007a72:	2300      	movs	r3, #0
 8007a74:	61fb      	str	r3, [r7, #28]
 8007a76:	e010      	b.n	8007a9a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d108      	bne.n	8007a90 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	461a      	mov	r2, r3
 8007a84:	68b9      	ldr	r1, [r7, #8]
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 fe12 	bl	80086b0 <xQueueCreateCountingSemaphoreStatic>
 8007a8c:	61f8      	str	r0, [r7, #28]
 8007a8e:	e004      	b.n	8007a9a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007a90:	68b9      	ldr	r1, [r7, #8]
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f000 fe45 	bl	8008722 <xQueueCreateCountingSemaphore>
 8007a98:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00c      	beq.n	8007aba <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <osSemaphoreNew+0xfc>
          name = attr->name;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	617b      	str	r3, [r7, #20]
 8007aac:	e001      	b.n	8007ab2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007ab2:	6979      	ldr	r1, [r7, #20]
 8007ab4:	69f8      	ldr	r0, [r7, #28]
 8007ab6:	f001 fd33 	bl	8009520 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007aba:	69fb      	ldr	r3, [r7, #28]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3720      	adds	r7, #32
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d103      	bne.n	8007ae4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007adc:	f06f 0303 	mvn.w	r3, #3
 8007ae0:	617b      	str	r3, [r7, #20]
 8007ae2:	e039      	b.n	8007b58 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ae4:	f3ef 8305 	mrs	r3, IPSR
 8007ae8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007aea:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d022      	beq.n	8007b36 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007af6:	f06f 0303 	mvn.w	r3, #3
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	e02c      	b.n	8007b58 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007b02:	f107 0308 	add.w	r3, r7, #8
 8007b06:	461a      	mov	r2, r3
 8007b08:	2100      	movs	r1, #0
 8007b0a:	6938      	ldr	r0, [r7, #16]
 8007b0c:	f001 fb12 	bl	8009134 <xQueueReceiveFromISR>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d003      	beq.n	8007b1e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007b16:	f06f 0302 	mvn.w	r3, #2
 8007b1a:	617b      	str	r3, [r7, #20]
 8007b1c:	e01c      	b.n	8007b58 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d019      	beq.n	8007b58 <osSemaphoreAcquire+0x94>
 8007b24:	4b0f      	ldr	r3, [pc, #60]	@ (8007b64 <osSemaphoreAcquire+0xa0>)
 8007b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	e010      	b.n	8007b58 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6938      	ldr	r0, [r7, #16]
 8007b3a:	f001 f9bb 	bl	8008eb4 <xQueueSemaphoreTake>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d009      	beq.n	8007b58 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007b4a:	f06f 0301 	mvn.w	r3, #1
 8007b4e:	617b      	str	r3, [r7, #20]
 8007b50:	e002      	b.n	8007b58 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8007b52:	f06f 0302 	mvn.w	r3, #2
 8007b56:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007b58:	697b      	ldr	r3, [r7, #20]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	e000ed04 	.word	0xe000ed04

08007b68 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d103      	bne.n	8007b86 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007b7e:	f06f 0303 	mvn.w	r3, #3
 8007b82:	617b      	str	r3, [r7, #20]
 8007b84:	e02c      	b.n	8007be0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b86:	f3ef 8305 	mrs	r3, IPSR
 8007b8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d01a      	beq.n	8007bc8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8007b92:	2300      	movs	r3, #0
 8007b94:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007b96:	f107 0308 	add.w	r3, r7, #8
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6938      	ldr	r0, [r7, #16]
 8007b9e:	f000 ffd1 	bl	8008b44 <xQueueGiveFromISR>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d003      	beq.n	8007bb0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007ba8:	f06f 0302 	mvn.w	r3, #2
 8007bac:	617b      	str	r3, [r7, #20]
 8007bae:	e017      	b.n	8007be0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d014      	beq.n	8007be0 <osSemaphoreRelease+0x78>
 8007bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007bec <osSemaphoreRelease+0x84>)
 8007bb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	e00b      	b.n	8007be0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007bc8:	2300      	movs	r3, #0
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2100      	movs	r1, #0
 8007bce:	6938      	ldr	r0, [r7, #16]
 8007bd0:	f000 fddc 	bl	800878c <xQueueGenericSend>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d002      	beq.n	8007be0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007bda:	f06f 0302 	mvn.w	r3, #2
 8007bde:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007be0:	697b      	ldr	r3, [r7, #20]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	e000ed04 	.word	0xe000ed04

08007bf0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4a07      	ldr	r2, [pc, #28]	@ (8007c1c <vApplicationGetIdleTaskMemory+0x2c>)
 8007c00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	4a06      	ldr	r2, [pc, #24]	@ (8007c20 <vApplicationGetIdleTaskMemory+0x30>)
 8007c06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2280      	movs	r2, #128	@ 0x80
 8007c0c:	601a      	str	r2, [r3, #0]
}
 8007c0e:	bf00      	nop
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	20025dcc 	.word	0x20025dcc
 8007c20:	20025e74 	.word	0x20025e74

08007c24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4a07      	ldr	r2, [pc, #28]	@ (8007c50 <vApplicationGetTimerTaskMemory+0x2c>)
 8007c34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	4a06      	ldr	r2, [pc, #24]	@ (8007c54 <vApplicationGetTimerTaskMemory+0x30>)
 8007c3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c42:	601a      	str	r2, [r3, #0]
}
 8007c44:	bf00      	nop
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	20026074 	.word	0x20026074
 8007c54:	2002611c 	.word	0x2002611c

08007c58 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10b      	bne.n	8007c7e <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c78:	bf00      	nop
 8007c7a:	bf00      	nop
 8007c7c:	e7fd      	b.n	8007c7a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8007c7e:	2320      	movs	r3, #32
 8007c80:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2b20      	cmp	r3, #32
 8007c86:	d00b      	beq.n	8007ca0 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8007c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	60fb      	str	r3, [r7, #12]
}
 8007c9a:	bf00      	nop
 8007c9c:	bf00      	nop
 8007c9e:	e7fd      	b.n	8007c9c <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00a      	beq.n	8007cc0 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2200      	movs	r2, #0
 8007cae:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 fa43 	bl	8008140 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8007cc0:	697b      	ldr	r3, [r7, #20]
	}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3718      	adds	r7, #24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8007cd0:	2020      	movs	r0, #32
 8007cd2:	f003 fd33 	bl	800b73c <pvPortMalloc>
 8007cd6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00a      	beq.n	8007cf4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 fa29 	bl	8008140 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8007cf4:	687b      	ldr	r3, [r7, #4]
	}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
	...

08007d00 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b090      	sub	sp, #64	@ 0x40
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
 8007d0c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8007d16:	2300      	movs	r3, #0
 8007d18:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10b      	bne.n	8007d38 <xEventGroupWaitBits+0x38>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	623b      	str	r3, [r7, #32]
}
 8007d32:	bf00      	nop
 8007d34:	bf00      	nop
 8007d36:	e7fd      	b.n	8007d34 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d3e:	d30b      	bcc.n	8007d58 <xEventGroupWaitBits+0x58>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	61fb      	str	r3, [r7, #28]
}
 8007d52:	bf00      	nop
 8007d54:	bf00      	nop
 8007d56:	e7fd      	b.n	8007d54 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10b      	bne.n	8007d76 <xEventGroupWaitBits+0x76>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	61bb      	str	r3, [r7, #24]
}
 8007d70:	bf00      	nop
 8007d72:	bf00      	nop
 8007d74:	e7fd      	b.n	8007d72 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d76:	f002 fc13 	bl	800a5a0 <xTaskGetSchedulerState>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d102      	bne.n	8007d86 <xEventGroupWaitBits+0x86>
 8007d80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <xEventGroupWaitBits+0x8a>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e000      	b.n	8007d8c <xEventGroupWaitBits+0x8c>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10b      	bne.n	8007da8 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	617b      	str	r3, [r7, #20]
}
 8007da2:	bf00      	nop
 8007da4:	bf00      	nop
 8007da6:	e7fd      	b.n	8007da4 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8007da8:	f001 fee4 	bl	8009b74 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8007dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	68b9      	ldr	r1, [r7, #8]
 8007db6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007db8:	f000 f98c 	bl	80080d4 <prvTestWaitCondition>
 8007dbc:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8007dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00e      	beq.n	8007de2 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d028      	beq.n	8007e24 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	43db      	mvns	r3, r3
 8007dda:	401a      	ands	r2, r3
 8007ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	e020      	b.n	8007e24 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d104      	bne.n	8007df2 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8007de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8007dec:	2301      	movs	r3, #1
 8007dee:	633b      	str	r3, [r7, #48]	@ 0x30
 8007df0:	e018      	b.n	8007e24 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d003      	beq.n	8007e00 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8007df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e08:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e10:	1d18      	adds	r0, r3, #4
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e16:	4313      	orrs	r3, r2
 8007e18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	f002 f8d8 	bl	8009fd0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8007e20:	2300      	movs	r3, #0
 8007e22:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007e24:	f001 feb4 	bl	8009b90 <xTaskResumeAll>
 8007e28:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d031      	beq.n	8007e94 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8007e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d107      	bne.n	8007e46 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8007e36:	4b1a      	ldr	r3, [pc, #104]	@ (8007ea0 <xEventGroupWaitBits+0x1a0>)
 8007e38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007e46:	f002 fd3f 	bl	800a8c8 <uxTaskResetEventItemValue>
 8007e4a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8007e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d11a      	bne.n	8007e8c <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8007e56:	f003 fb4f 	bl	800b4f8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8007e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	68b9      	ldr	r1, [r7, #8]
 8007e64:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007e66:	f000 f935 	bl	80080d4 <prvTestWaitCondition>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d009      	beq.n	8007e84 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d006      	beq.n	8007e84 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	43db      	mvns	r3, r3
 8007e7e:	401a      	ands	r2, r3
 8007e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e82:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8007e84:	2301      	movs	r3, #1
 8007e86:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8007e88:	f003 fb68 	bl	800b55c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e8e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8007e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3740      	adds	r7, #64	@ 0x40
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	e000ed04 	.word	0xe000ed04

08007ea4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10b      	bne.n	8007ed0 <xEventGroupClearBits+0x2c>
	__asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	60fb      	str	r3, [r7, #12]
}
 8007eca:	bf00      	nop
 8007ecc:	bf00      	nop
 8007ece:	e7fd      	b.n	8007ecc <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ed6:	d30b      	bcc.n	8007ef0 <xEventGroupClearBits+0x4c>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	60bb      	str	r3, [r7, #8]
}
 8007eea:	bf00      	nop
 8007eec:	bf00      	nop
 8007eee:	e7fd      	b.n	8007eec <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8007ef0:	f003 fb02 	bl	800b4f8 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	43db      	mvns	r3, r3
 8007f02:	401a      	ands	r2, r3
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8007f08:	f003 fb28 	bl	800b55c <vPortExitCritical>

	return uxReturn;
 8007f0c:	693b      	ldr	r3, [r7, #16]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
	...

08007f18 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8007f22:	2300      	movs	r3, #0
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	6879      	ldr	r1, [r7, #4]
 8007f28:	4804      	ldr	r0, [pc, #16]	@ (8007f3c <xEventGroupClearBitsFromISR+0x24>)
 8007f2a:	f003 f991 	bl	800b250 <xTimerPendFunctionCallFromISR>
 8007f2e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8007f30:	68fb      	ldr	r3, [r7, #12]
	}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	080080bb 	.word	0x080080bb

08007f40 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8007f40:	b480      	push	{r7}
 8007f42:	b089      	sub	sp, #36	@ 0x24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f4c:	f3ef 8211 	mrs	r2, BASEPRI
 8007f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	60fa      	str	r2, [r7, #12]
 8007f62:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f64:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f66:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	617b      	str	r3, [r7, #20]
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f78:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8007f7a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3724      	adds	r7, #36	@ 0x24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08e      	sub	sp, #56	@ 0x38
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007f92:	2300      	movs	r3, #0
 8007f94:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10b      	bne.n	8007fbc <xEventGroupSetBits+0x34>
	__asm volatile
 8007fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	613b      	str	r3, [r7, #16]
}
 8007fb6:	bf00      	nop
 8007fb8:	bf00      	nop
 8007fba:	e7fd      	b.n	8007fb8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fc2:	d30b      	bcc.n	8007fdc <xEventGroupSetBits+0x54>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	60fb      	str	r3, [r7, #12]
}
 8007fd6:	bf00      	nop
 8007fd8:	bf00      	nop
 8007fda:	e7fd      	b.n	8007fd8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fde:	3304      	adds	r3, #4
 8007fe0:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007fe8:	f001 fdc4 	bl	8009b74 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	431a      	orrs	r2, r3
 8007ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffc:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007ffe:	e03c      	b.n	800807a <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8008000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800800c:	2300      	movs	r3, #0
 800800e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008016:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800801e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d108      	bne.n	800803c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800802a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	4013      	ands	r3, r2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00b      	beq.n	800804e <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8008036:	2301      	movs	r3, #1
 8008038:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800803a:	e008      	b.n	800804e <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800803c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	4013      	ands	r3, r2
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	429a      	cmp	r2, r3
 8008048:	d101      	bne.n	800804e <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800804a:	2301      	movs	r3, #1
 800804c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800804e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008050:	2b00      	cmp	r3, #0
 8008052:	d010      	beq.n	8008076 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800805e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	4313      	orrs	r3, r2
 8008064:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800806e:	4619      	mov	r1, r3
 8008070:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008072:	f002 f883 	bl	800a17c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800807a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	429a      	cmp	r2, r3
 8008080:	d1be      	bne.n	8008000 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	43db      	mvns	r3, r3
 800808a:	401a      	ands	r2, r3
 800808c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808e:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008090:	f001 fd7e 	bl	8009b90 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008096:	681b      	ldr	r3, [r3, #0]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3738      	adds	r7, #56	@ 0x38
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7ff ff6b 	bl	8007f88 <xEventGroupSetBits>
}
 80080b2:	bf00      	nop
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7ff feec 	bl	8007ea4 <xEventGroupClearBits>
}
 80080cc:	bf00      	nop
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80080e0:	2300      	movs	r3, #0
 80080e2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d107      	bne.n	80080fa <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	4013      	ands	r3, r2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00a      	beq.n	800810a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80080f4:	2301      	movs	r3, #1
 80080f6:	617b      	str	r3, [r7, #20]
 80080f8:	e007      	b.n	800810a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	4013      	ands	r3, r2
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	429a      	cmp	r2, r3
 8008104:	d101      	bne.n	800810a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008106:	2301      	movs	r3, #1
 8008108:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800810a:	697b      	ldr	r3, [r7, #20]
}
 800810c:	4618      	mov	r0, r3
 800810e:	371c      	adds	r7, #28
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	68f9      	ldr	r1, [r7, #12]
 800812a:	4804      	ldr	r0, [pc, #16]	@ (800813c <xEventGroupSetBitsFromISR+0x24>)
 800812c:	f003 f890 	bl	800b250 <xTimerPendFunctionCallFromISR>
 8008130:	6178      	str	r0, [r7, #20]

		return xReturn;
 8008132:	697b      	ldr	r3, [r7, #20]
	}
 8008134:	4618      	mov	r0, r3
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	080080a1 	.word	0x080080a1

08008140 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f103 0208 	add.w	r2, r3, #8
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008158:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f103 0208 	add.w	r2, r3, #8
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f103 0208 	add.w	r2, r3, #8
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800818e:	bf00      	nop
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	1c5a      	adds	r2, r3, #1
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	601a      	str	r2, [r3, #0]
}
 80081d6:	bf00      	nop
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081e2:	b480      	push	{r7}
 80081e4:	b085      	sub	sp, #20
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081f8:	d103      	bne.n	8008202 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	60fb      	str	r3, [r7, #12]
 8008200:	e00c      	b.n	800821c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	3308      	adds	r3, #8
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	e002      	b.n	8008210 <vListInsert+0x2e>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	60fb      	str	r3, [r7, #12]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	429a      	cmp	r2, r3
 800821a:	d2f6      	bcs.n	800820a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	1c5a      	adds	r2, r3, #1
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	601a      	str	r2, [r3, #0]
}
 8008248:	bf00      	nop
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	6892      	ldr	r2, [r2, #8]
 800826a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	6852      	ldr	r2, [r2, #4]
 8008274:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	429a      	cmp	r2, r3
 800827e:	d103      	bne.n	8008288 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689a      	ldr	r2, [r3, #8]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	1e5a      	subs	r2, r3, #1
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10b      	bne.n	80082d4 <xQueueGenericReset+0x2c>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	60bb      	str	r3, [r7, #8]
}
 80082ce:	bf00      	nop
 80082d0:	bf00      	nop
 80082d2:	e7fd      	b.n	80082d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80082d4:	f003 f910 	bl	800b4f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082e0:	68f9      	ldr	r1, [r7, #12]
 80082e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80082e4:	fb01 f303 	mul.w	r3, r1, r3
 80082e8:	441a      	add	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008304:	3b01      	subs	r3, #1
 8008306:	68f9      	ldr	r1, [r7, #12]
 8008308:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800830a:	fb01 f303 	mul.w	r3, r1, r3
 800830e:	441a      	add	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	22ff      	movs	r2, #255	@ 0xff
 8008318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	22ff      	movs	r2, #255	@ 0xff
 8008320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d114      	bne.n	8008354 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d01a      	beq.n	8008368 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3310      	adds	r3, #16
 8008336:	4618      	mov	r0, r3
 8008338:	f001 feb8 	bl	800a0ac <xTaskRemoveFromEventList>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d012      	beq.n	8008368 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008342:	4b0d      	ldr	r3, [pc, #52]	@ (8008378 <xQueueGenericReset+0xd0>)
 8008344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	e009      	b.n	8008368 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3310      	adds	r3, #16
 8008358:	4618      	mov	r0, r3
 800835a:	f7ff fef1 	bl	8008140 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	3324      	adds	r3, #36	@ 0x24
 8008362:	4618      	mov	r0, r3
 8008364:	f7ff feec 	bl	8008140 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008368:	f003 f8f8 	bl	800b55c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800836c:	2301      	movs	r3, #1
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	e000ed04 	.word	0xe000ed04

0800837c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800837c:	b580      	push	{r7, lr}
 800837e:	b08e      	sub	sp, #56	@ 0x38
 8008380:	af02      	add	r7, sp, #8
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
 8008388:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10b      	bne.n	80083a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80083a2:	bf00      	nop
 80083a4:	bf00      	nop
 80083a6:	e7fd      	b.n	80083a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10b      	bne.n	80083c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80083c0:	bf00      	nop
 80083c2:	bf00      	nop
 80083c4:	e7fd      	b.n	80083c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <xQueueGenericCreateStatic+0x56>
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <xQueueGenericCreateStatic+0x5a>
 80083d2:	2301      	movs	r3, #1
 80083d4:	e000      	b.n	80083d8 <xQueueGenericCreateStatic+0x5c>
 80083d6:	2300      	movs	r3, #0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10b      	bne.n	80083f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	623b      	str	r3, [r7, #32]
}
 80083ee:	bf00      	nop
 80083f0:	bf00      	nop
 80083f2:	e7fd      	b.n	80083f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d102      	bne.n	8008400 <xQueueGenericCreateStatic+0x84>
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <xQueueGenericCreateStatic+0x88>
 8008400:	2301      	movs	r3, #1
 8008402:	e000      	b.n	8008406 <xQueueGenericCreateStatic+0x8a>
 8008404:	2300      	movs	r3, #0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10b      	bne.n	8008422 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	61fb      	str	r3, [r7, #28]
}
 800841c:	bf00      	nop
 800841e:	bf00      	nop
 8008420:	e7fd      	b.n	800841e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008422:	2350      	movs	r3, #80	@ 0x50
 8008424:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	2b50      	cmp	r3, #80	@ 0x50
 800842a:	d00b      	beq.n	8008444 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800842c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	61bb      	str	r3, [r7, #24]
}
 800843e:	bf00      	nop
 8008440:	bf00      	nop
 8008442:	e7fd      	b.n	8008440 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008444:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800844a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00d      	beq.n	800846c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008458:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800845c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	4613      	mov	r3, r2
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	68b9      	ldr	r1, [r7, #8]
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f000 f840 	bl	80084ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800846c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800846e:	4618      	mov	r0, r3
 8008470:	3730      	adds	r7, #48	@ 0x30
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008476:	b580      	push	{r7, lr}
 8008478:	b08a      	sub	sp, #40	@ 0x28
 800847a:	af02      	add	r7, sp, #8
 800847c:	60f8      	str	r0, [r7, #12]
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	4613      	mov	r3, r2
 8008482:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10b      	bne.n	80084a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	613b      	str	r3, [r7, #16]
}
 800849c:	bf00      	nop
 800849e:	bf00      	nop
 80084a0:	e7fd      	b.n	800849e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	fb02 f303 	mul.w	r3, r2, r3
 80084aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	3350      	adds	r3, #80	@ 0x50
 80084b0:	4618      	mov	r0, r3
 80084b2:	f003 f943 	bl	800b73c <pvPortMalloc>
 80084b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d011      	beq.n	80084e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	3350      	adds	r3, #80	@ 0x50
 80084c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084d0:	79fa      	ldrb	r2, [r7, #7]
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	4613      	mov	r3, r2
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	68b9      	ldr	r1, [r7, #8]
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 f805 	bl	80084ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084e2:	69bb      	ldr	r3, [r7, #24]
	}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3720      	adds	r7, #32
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
 80084f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d103      	bne.n	8008508 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	69ba      	ldr	r2, [r7, #24]
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	e002      	b.n	800850e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800851a:	2101      	movs	r1, #1
 800851c:	69b8      	ldr	r0, [r7, #24]
 800851e:	f7ff fec3 	bl	80082a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	78fa      	ldrb	r2, [r7, #3]
 8008526:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800852a:	78fb      	ldrb	r3, [r7, #3]
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	68f9      	ldr	r1, [r7, #12]
 8008530:	2073      	movs	r0, #115	@ 0x73
 8008532:	f003 ffcb 	bl	800c4cc <SEGGER_SYSVIEW_RecordU32x3>
}
 8008536:	bf00      	nop
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800853e:	b580      	push	{r7, lr}
 8008540:	b082      	sub	sp, #8
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00e      	beq.n	800856a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800855e:	2300      	movs	r3, #0
 8008560:	2200      	movs	r2, #0
 8008562:	2100      	movs	r1, #0
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f911 	bl	800878c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800856a:	bf00      	nop
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008572:	b580      	push	{r7, lr}
 8008574:	b086      	sub	sp, #24
 8008576:	af00      	add	r7, sp, #0
 8008578:	4603      	mov	r3, r0
 800857a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800857c:	2301      	movs	r3, #1
 800857e:	617b      	str	r3, [r7, #20]
 8008580:	2300      	movs	r3, #0
 8008582:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008584:	79fb      	ldrb	r3, [r7, #7]
 8008586:	461a      	mov	r2, r3
 8008588:	6939      	ldr	r1, [r7, #16]
 800858a:	6978      	ldr	r0, [r7, #20]
 800858c:	f7ff ff73 	bl	8008476 <xQueueGenericCreate>
 8008590:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f7ff ffd3 	bl	800853e <prvInitialiseMutex>

		return xNewQueue;
 8008598:	68fb      	ldr	r3, [r7, #12]
	}
 800859a:	4618      	mov	r0, r3
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b088      	sub	sp, #32
 80085a6:	af02      	add	r7, sp, #8
 80085a8:	4603      	mov	r3, r0
 80085aa:	6039      	str	r1, [r7, #0]
 80085ac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80085ae:	2301      	movs	r3, #1
 80085b0:	617b      	str	r3, [r7, #20]
 80085b2:	2300      	movs	r3, #0
 80085b4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80085b6:	79fb      	ldrb	r3, [r7, #7]
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2200      	movs	r2, #0
 80085be:	6939      	ldr	r1, [r7, #16]
 80085c0:	6978      	ldr	r0, [r7, #20]
 80085c2:	f7ff fedb 	bl	800837c <xQueueGenericCreateStatic>
 80085c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f7ff ffb8 	bl	800853e <prvInitialiseMutex>

		return xNewQueue;
 80085ce:	68fb      	ldr	r3, [r7, #12]
	}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80085d8:	b590      	push	{r4, r7, lr}
 80085da:	b087      	sub	sp, #28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10b      	bne.n	8008602 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	60fb      	str	r3, [r7, #12]
}
 80085fc:	bf00      	nop
 80085fe:	bf00      	nop
 8008600:	e7fd      	b.n	80085fe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	689c      	ldr	r4, [r3, #8]
 8008606:	f001 ffbb 	bl	800a580 <xTaskGetCurrentTaskHandle>
 800860a:	4603      	mov	r3, r0
 800860c:	429c      	cmp	r4, r3
 800860e:	d111      	bne.n	8008634 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	1e5a      	subs	r2, r3, #1
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d105      	bne.n	800862e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008622:	2300      	movs	r3, #0
 8008624:	2200      	movs	r2, #0
 8008626:	2100      	movs	r1, #0
 8008628:	6938      	ldr	r0, [r7, #16]
 800862a:	f000 f8af 	bl	800878c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800862e:	2301      	movs	r3, #1
 8008630:	617b      	str	r3, [r7, #20]
 8008632:	e001      	b.n	8008638 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008634:	2300      	movs	r3, #0
 8008636:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008638:	697b      	ldr	r3, [r7, #20]
	}
 800863a:	4618      	mov	r0, r3
 800863c:	371c      	adds	r7, #28
 800863e:	46bd      	mov	sp, r7
 8008640:	bd90      	pop	{r4, r7, pc}

08008642 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008642:	b590      	push	{r4, r7, lr}
 8008644:	b087      	sub	sp, #28
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10b      	bne.n	800866e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8008656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	60fb      	str	r3, [r7, #12]
}
 8008668:	bf00      	nop
 800866a:	bf00      	nop
 800866c:	e7fd      	b.n	800866a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	689c      	ldr	r4, [r3, #8]
 8008672:	f001 ff85 	bl	800a580 <xTaskGetCurrentTaskHandle>
 8008676:	4603      	mov	r3, r0
 8008678:	429c      	cmp	r4, r3
 800867a:	d107      	bne.n	800868c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008686:	2301      	movs	r3, #1
 8008688:	617b      	str	r3, [r7, #20]
 800868a:	e00c      	b.n	80086a6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6938      	ldr	r0, [r7, #16]
 8008690:	f000 fc10 	bl	8008eb4 <xQueueSemaphoreTake>
 8008694:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d004      	beq.n	80086a6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80086a6:	697b      	ldr	r3, [r7, #20]
	}
 80086a8:	4618      	mov	r0, r3
 80086aa:	371c      	adds	r7, #28
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd90      	pop	{r4, r7, pc}

080086b0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08a      	sub	sp, #40	@ 0x28
 80086b4:	af02      	add	r7, sp, #8
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10b      	bne.n	80086da <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	61bb      	str	r3, [r7, #24]
}
 80086d4:	bf00      	nop
 80086d6:	bf00      	nop
 80086d8:	e7fd      	b.n	80086d6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d90b      	bls.n	80086fa <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	617b      	str	r3, [r7, #20]
}
 80086f4:	bf00      	nop
 80086f6:	bf00      	nop
 80086f8:	e7fd      	b.n	80086f6 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80086fa:	2302      	movs	r3, #2
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	2100      	movs	r1, #0
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f7ff fe39 	bl	800837c <xQueueGenericCreateStatic>
 800870a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d002      	beq.n	8008718 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008718:	69fb      	ldr	r3, [r7, #28]
	}
 800871a:	4618      	mov	r0, r3
 800871c:	3720      	adds	r7, #32
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008722:	b580      	push	{r7, lr}
 8008724:	b086      	sub	sp, #24
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10b      	bne.n	800874a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	613b      	str	r3, [r7, #16]
}
 8008744:	bf00      	nop
 8008746:	bf00      	nop
 8008748:	e7fd      	b.n	8008746 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	429a      	cmp	r2, r3
 8008750:	d90b      	bls.n	800876a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8008752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008756:	f383 8811 	msr	BASEPRI, r3
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	60fb      	str	r3, [r7, #12]
}
 8008764:	bf00      	nop
 8008766:	bf00      	nop
 8008768:	e7fd      	b.n	8008766 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800876a:	2202      	movs	r2, #2
 800876c:	2100      	movs	r1, #0
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff fe81 	bl	8008476 <xQueueGenericCreate>
 8008774:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	683a      	ldr	r2, [r7, #0]
 8008780:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008782:	697b      	ldr	r3, [r7, #20]
	}
 8008784:	4618      	mov	r0, r3
 8008786:	3718      	adds	r7, #24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b090      	sub	sp, #64	@ 0x40
 8008790:	af02      	add	r7, sp, #8
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800879a:	2300      	movs	r3, #0
 800879c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80087a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10b      	bne.n	80087c0 <xQueueGenericSend+0x34>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80087ba:	bf00      	nop
 80087bc:	bf00      	nop
 80087be:	e7fd      	b.n	80087bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d103      	bne.n	80087ce <xQueueGenericSend+0x42>
 80087c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <xQueueGenericSend+0x46>
 80087ce:	2301      	movs	r3, #1
 80087d0:	e000      	b.n	80087d4 <xQueueGenericSend+0x48>
 80087d2:	2300      	movs	r3, #0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10b      	bne.n	80087f0 <xQueueGenericSend+0x64>
	__asm volatile
 80087d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087dc:	f383 8811 	msr	BASEPRI, r3
 80087e0:	f3bf 8f6f 	isb	sy
 80087e4:	f3bf 8f4f 	dsb	sy
 80087e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087ea:	bf00      	nop
 80087ec:	bf00      	nop
 80087ee:	e7fd      	b.n	80087ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d103      	bne.n	80087fe <xQueueGenericSend+0x72>
 80087f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d101      	bne.n	8008802 <xQueueGenericSend+0x76>
 80087fe:	2301      	movs	r3, #1
 8008800:	e000      	b.n	8008804 <xQueueGenericSend+0x78>
 8008802:	2300      	movs	r3, #0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10b      	bne.n	8008820 <xQueueGenericSend+0x94>
	__asm volatile
 8008808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	623b      	str	r3, [r7, #32]
}
 800881a:	bf00      	nop
 800881c:	bf00      	nop
 800881e:	e7fd      	b.n	800881c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008820:	f001 febe 	bl	800a5a0 <xTaskGetSchedulerState>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d102      	bne.n	8008830 <xQueueGenericSend+0xa4>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <xQueueGenericSend+0xa8>
 8008830:	2301      	movs	r3, #1
 8008832:	e000      	b.n	8008836 <xQueueGenericSend+0xaa>
 8008834:	2300      	movs	r3, #0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10b      	bne.n	8008852 <xQueueGenericSend+0xc6>
	__asm volatile
 800883a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	61fb      	str	r3, [r7, #28]
}
 800884c:	bf00      	nop
 800884e:	bf00      	nop
 8008850:	e7fd      	b.n	800884e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008852:	f002 fe51 	bl	800b4f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800885a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800885e:	429a      	cmp	r2, r3
 8008860:	d302      	bcc.n	8008868 <xQueueGenericSend+0xdc>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b02      	cmp	r3, #2
 8008866:	d136      	bne.n	80088d6 <xQueueGenericSend+0x14a>
			{
				traceQUEUE_SEND( pxQueue );
 8008868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886a:	4618      	mov	r0, r3
 800886c:	f004 fae0 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	6879      	ldr	r1, [r7, #4]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	460b      	mov	r3, r1
 800887a:	4601      	mov	r1, r0
 800887c:	205a      	movs	r0, #90	@ 0x5a
 800887e:	f003 fe9b 	bl	800c5b8 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	68b9      	ldr	r1, [r7, #8]
 8008886:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008888:	f000 fd39 	bl	80092fe <prvCopyDataToQueue>
 800888c:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800888e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008892:	2b00      	cmp	r3, #0
 8008894:	d010      	beq.n	80088b8 <xQueueGenericSend+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008898:	3324      	adds	r3, #36	@ 0x24
 800889a:	4618      	mov	r0, r3
 800889c:	f001 fc06 	bl	800a0ac <xTaskRemoveFromEventList>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d013      	beq.n	80088ce <xQueueGenericSend+0x142>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088a6:	4b4d      	ldr	r3, [pc, #308]	@ (80089dc <xQueueGenericSend+0x250>)
 80088a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	e00a      	b.n	80088ce <xQueueGenericSend+0x142>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80088b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d007      	beq.n	80088ce <xQueueGenericSend+0x142>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088be:	4b47      	ldr	r3, [pc, #284]	@ (80089dc <xQueueGenericSend+0x250>)
 80088c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80088ce:	f002 fe45 	bl	800b55c <vPortExitCritical>
				return pdPASS;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e07d      	b.n	80089d2 <xQueueGenericSend+0x246>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d110      	bne.n	80088fe <xQueueGenericSend+0x172>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088dc:	f002 fe3e 	bl	800b55c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80088e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e2:	4618      	mov	r0, r3
 80088e4:	f004 faa4 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	6879      	ldr	r1, [r7, #4]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	460b      	mov	r3, r1
 80088f2:	4601      	mov	r1, r0
 80088f4:	205a      	movs	r0, #90	@ 0x5a
 80088f6:	f003 fe5f 	bl	800c5b8 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80088fa:	2300      	movs	r3, #0
 80088fc:	e069      	b.n	80089d2 <xQueueGenericSend+0x246>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008900:	2b00      	cmp	r3, #0
 8008902:	d106      	bne.n	8008912 <xQueueGenericSend+0x186>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008904:	f107 0314 	add.w	r3, r7, #20
 8008908:	4618      	mov	r0, r3
 800890a:	f001 fc9f 	bl	800a24c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800890e:	2301      	movs	r3, #1
 8008910:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008912:	f002 fe23 	bl	800b55c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008916:	f001 f92d 	bl	8009b74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800891a:	f002 fded 	bl	800b4f8 <vPortEnterCritical>
 800891e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008920:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008924:	b25b      	sxtb	r3, r3
 8008926:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800892a:	d103      	bne.n	8008934 <xQueueGenericSend+0x1a8>
 800892c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892e:	2200      	movs	r2, #0
 8008930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008936:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800893a:	b25b      	sxtb	r3, r3
 800893c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008940:	d103      	bne.n	800894a <xQueueGenericSend+0x1be>
 8008942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800894a:	f002 fe07 	bl	800b55c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800894e:	1d3a      	adds	r2, r7, #4
 8008950:	f107 0314 	add.w	r3, r7, #20
 8008954:	4611      	mov	r1, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f001 fc8e 	bl	800a278 <xTaskCheckForTimeOut>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d124      	bne.n	80089ac <xQueueGenericSend+0x220>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008962:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008964:	f000 fdc3 	bl	80094ee <prvIsQueueFull>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d018      	beq.n	80089a0 <xQueueGenericSend+0x214>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800896e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008970:	3310      	adds	r3, #16
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	4611      	mov	r1, r2
 8008976:	4618      	mov	r0, r3
 8008978:	f001 fb04 	bl	8009f84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800897c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800897e:	f000 fd4e 	bl	800941e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008982:	f001 f905 	bl	8009b90 <xTaskResumeAll>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	f47f af62 	bne.w	8008852 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800898e:	4b13      	ldr	r3, [pc, #76]	@ (80089dc <xQueueGenericSend+0x250>)
 8008990:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	e758      	b.n	8008852 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089a2:	f000 fd3c 	bl	800941e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089a6:	f001 f8f3 	bl	8009b90 <xTaskResumeAll>
 80089aa:	e752      	b.n	8008852 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089ae:	f000 fd36 	bl	800941e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089b2:	f001 f8ed 	bl	8009b90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80089b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b8:	4618      	mov	r0, r3
 80089ba:	f004 fa39 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	6879      	ldr	r1, [r7, #4]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	460b      	mov	r3, r1
 80089c8:	4601      	mov	r1, r0
 80089ca:	205a      	movs	r0, #90	@ 0x5a
 80089cc:	f003 fdf4 	bl	800c5b8 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80089d0:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3738      	adds	r7, #56	@ 0x38
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	e000ed04 	.word	0xe000ed04

080089e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b090      	sub	sp, #64	@ 0x40
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
 80089ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80089f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10b      	bne.n	8008a10 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a0a:	bf00      	nop
 8008a0c:	bf00      	nop
 8008a0e:	e7fd      	b.n	8008a0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d103      	bne.n	8008a1e <xQueueGenericSendFromISR+0x3e>
 8008a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <xQueueGenericSendFromISR+0x42>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e000      	b.n	8008a24 <xQueueGenericSendFromISR+0x44>
 8008a22:	2300      	movs	r3, #0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10b      	bne.n	8008a40 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a3a:	bf00      	nop
 8008a3c:	bf00      	nop
 8008a3e:	e7fd      	b.n	8008a3c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d103      	bne.n	8008a4e <xQueueGenericSendFromISR+0x6e>
 8008a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d101      	bne.n	8008a52 <xQueueGenericSendFromISR+0x72>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e000      	b.n	8008a54 <xQueueGenericSendFromISR+0x74>
 8008a52:	2300      	movs	r3, #0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10b      	bne.n	8008a70 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	623b      	str	r3, [r7, #32]
}
 8008a6a:	bf00      	nop
 8008a6c:	bf00      	nop
 8008a6e:	e7fd      	b.n	8008a6c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a70:	f002 fe22 	bl	800b6b8 <vPortValidateInterruptPriority>
	__asm volatile
 8008a74:	f3ef 8211 	mrs	r2, BASEPRI
 8008a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	61fa      	str	r2, [r7, #28]
 8008a8a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a8e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d302      	bcc.n	8008aa2 <xQueueGenericSendFromISR+0xc2>
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d139      	bne.n	8008b16 <xQueueGenericSendFromISR+0x136>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008aa8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f004 f9bb 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8008aba:	4601      	mov	r1, r0
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	2060      	movs	r0, #96	@ 0x60
 8008ac2:	f003 fca9 	bl	800c418 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	68b9      	ldr	r1, [r7, #8]
 8008aca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008acc:	f000 fc17 	bl	80092fe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ad0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ad8:	d112      	bne.n	8008b00 <xQueueGenericSendFromISR+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d016      	beq.n	8008b10 <xQueueGenericSendFromISR+0x130>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae4:	3324      	adds	r3, #36	@ 0x24
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f001 fae0 	bl	800a0ac <xTaskRemoveFromEventList>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00e      	beq.n	8008b10 <xQueueGenericSendFromISR+0x130>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00b      	beq.n	8008b10 <xQueueGenericSendFromISR+0x130>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	e007      	b.n	8008b10 <xQueueGenericSendFromISR+0x130>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008b04:	3301      	adds	r3, #1
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	b25a      	sxtb	r2, r3
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008b10:	2301      	movs	r3, #1
 8008b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008b14:	e00b      	b.n	8008b2e <xQueueGenericSendFromISR+0x14e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8008b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f004 f989 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8008b1e:	4601      	mov	r1, r0
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	461a      	mov	r2, r3
 8008b24:	2060      	movs	r0, #96	@ 0x60
 8008b26:	f003 fc77 	bl	800c418 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b30:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f383 8811 	msr	BASEPRI, r3
}
 8008b38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3740      	adds	r7, #64	@ 0x40
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08e      	sub	sp, #56	@ 0x38
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10b      	bne.n	8008b70 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	623b      	str	r3, [r7, #32]
}
 8008b6a:	bf00      	nop
 8008b6c:	bf00      	nop
 8008b6e:	e7fd      	b.n	8008b6c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00b      	beq.n	8008b90 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	61fb      	str	r3, [r7, #28]
}
 8008b8a:	bf00      	nop
 8008b8c:	bf00      	nop
 8008b8e:	e7fd      	b.n	8008b8c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d103      	bne.n	8008ba0 <xQueueGiveFromISR+0x5c>
 8008b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <xQueueGiveFromISR+0x60>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e000      	b.n	8008ba6 <xQueueGiveFromISR+0x62>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10b      	bne.n	8008bc2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	61bb      	str	r3, [r7, #24]
}
 8008bbc:	bf00      	nop
 8008bbe:	bf00      	nop
 8008bc0:	e7fd      	b.n	8008bbe <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bc2:	f002 fd79 	bl	800b6b8 <vPortValidateInterruptPriority>
	__asm volatile
 8008bc6:	f3ef 8211 	mrs	r2, BASEPRI
 8008bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	617a      	str	r2, [r7, #20]
 8008bdc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008bde:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008be6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d235      	bcs.n	8008c5e <xQueueGiveFromISR+0x11a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f004 f916 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8008c04:	4601      	mov	r1, r0
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	461a      	mov	r2, r3
 8008c0a:	2060      	movs	r0, #96	@ 0x60
 8008c0c:	f003 fc04 	bl	800c418 <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c12:	1c5a      	adds	r2, r3, #1
 8008c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c16:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c18:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c20:	d112      	bne.n	8008c48 <xQueueGiveFromISR+0x104>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d016      	beq.n	8008c58 <xQueueGiveFromISR+0x114>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2c:	3324      	adds	r3, #36	@ 0x24
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f001 fa3c 	bl	800a0ac <xTaskRemoveFromEventList>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00e      	beq.n	8008c58 <xQueueGiveFromISR+0x114>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00b      	beq.n	8008c58 <xQueueGiveFromISR+0x114>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2201      	movs	r2, #1
 8008c44:	601a      	str	r2, [r3, #0]
 8008c46:	e007      	b.n	8008c58 <xQueueGiveFromISR+0x114>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	b25a      	sxtb	r2, r3
 8008c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c5c:	e00b      	b.n	8008c76 <xQueueGiveFromISR+0x132>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c60:	4618      	mov	r0, r3
 8008c62:	f004 f8e5 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8008c66:	4601      	mov	r1, r0
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	2060      	movs	r0, #96	@ 0x60
 8008c6e:	f003 fbd3 	bl	800c418 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8008c72:	2300      	movs	r3, #0
 8008c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c78:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f383 8811 	msr	BASEPRI, r3
}
 8008c80:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3738      	adds	r7, #56	@ 0x38
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c8c:	b590      	push	{r4, r7, lr}
 8008c8e:	b08f      	sub	sp, #60	@ 0x3c
 8008c90:	af02      	add	r7, sp, #8
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10b      	bne.n	8008cbe <xQueueReceive+0x32>
	__asm volatile
 8008ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	623b      	str	r3, [r7, #32]
}
 8008cb8:	bf00      	nop
 8008cba:	bf00      	nop
 8008cbc:	e7fd      	b.n	8008cba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d103      	bne.n	8008ccc <xQueueReceive+0x40>
 8008cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d101      	bne.n	8008cd0 <xQueueReceive+0x44>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e000      	b.n	8008cd2 <xQueueReceive+0x46>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10b      	bne.n	8008cee <xQueueReceive+0x62>
	__asm volatile
 8008cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	61fb      	str	r3, [r7, #28]
}
 8008ce8:	bf00      	nop
 8008cea:	bf00      	nop
 8008cec:	e7fd      	b.n	8008cea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cee:	f001 fc57 	bl	800a5a0 <xTaskGetSchedulerState>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d102      	bne.n	8008cfe <xQueueReceive+0x72>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <xQueueReceive+0x76>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e000      	b.n	8008d04 <xQueueReceive+0x78>
 8008d02:	2300      	movs	r3, #0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10b      	bne.n	8008d20 <xQueueReceive+0x94>
	__asm volatile
 8008d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d0c:	f383 8811 	msr	BASEPRI, r3
 8008d10:	f3bf 8f6f 	isb	sy
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	61bb      	str	r3, [r7, #24]
}
 8008d1a:	bf00      	nop
 8008d1c:	bf00      	nop
 8008d1e:	e7fd      	b.n	8008d1c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d20:	f002 fbea 	bl	800b4f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d28:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d02f      	beq.n	8008d90 <xQueueReceive+0x104>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d30:	68b9      	ldr	r1, [r7, #8]
 8008d32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d34:	f000 fb4d 	bl	80093d2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8008d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f004 f878 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8008d40:	4604      	mov	r4, r0
 8008d42:	2000      	movs	r0, #0
 8008d44:	f004 f874 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2101      	movs	r1, #1
 8008d4e:	9100      	str	r1, [sp, #0]
 8008d50:	4621      	mov	r1, r4
 8008d52:	205c      	movs	r0, #92	@ 0x5c
 8008d54:	f003 fc30 	bl	800c5b8 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5a:	1e5a      	subs	r2, r3, #1
 8008d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d62:	691b      	ldr	r3, [r3, #16]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00f      	beq.n	8008d88 <xQueueReceive+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6a:	3310      	adds	r3, #16
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f001 f99d 	bl	800a0ac <xTaskRemoveFromEventList>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d007      	beq.n	8008d88 <xQueueReceive+0xfc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d78:	4b4d      	ldr	r3, [pc, #308]	@ (8008eb0 <xQueueReceive+0x224>)
 8008d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d88:	f002 fbe8 	bl	800b55c <vPortExitCritical>
				return pdPASS;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e08a      	b.n	8008ea6 <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d113      	bne.n	8008dbe <xQueueReceive+0x132>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d96:	f002 fbe1 	bl	800b55c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f004 f847 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8008da2:	4604      	mov	r4, r0
 8008da4:	2000      	movs	r0, #0
 8008da6:	f004 f843 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8008daa:	4602      	mov	r2, r0
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2101      	movs	r1, #1
 8008db0:	9100      	str	r1, [sp, #0]
 8008db2:	4621      	mov	r1, r4
 8008db4:	205c      	movs	r0, #92	@ 0x5c
 8008db6:	f003 fbff 	bl	800c5b8 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	e073      	b.n	8008ea6 <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d106      	bne.n	8008dd2 <xQueueReceive+0x146>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dc4:	f107 0310 	add.w	r3, r7, #16
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f001 fa3f 	bl	800a24c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dd2:	f002 fbc3 	bl	800b55c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dd6:	f000 fecd 	bl	8009b74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dda:	f002 fb8d 	bl	800b4f8 <vPortEnterCritical>
 8008dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008de4:	b25b      	sxtb	r3, r3
 8008de6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008dea:	d103      	bne.n	8008df4 <xQueueReceive+0x168>
 8008dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008dfa:	b25b      	sxtb	r3, r3
 8008dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e00:	d103      	bne.n	8008e0a <xQueueReceive+0x17e>
 8008e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e0a:	f002 fba7 	bl	800b55c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e0e:	1d3a      	adds	r2, r7, #4
 8008e10:	f107 0310 	add.w	r3, r7, #16
 8008e14:	4611      	mov	r1, r2
 8008e16:	4618      	mov	r0, r3
 8008e18:	f001 fa2e 	bl	800a278 <xTaskCheckForTimeOut>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d124      	bne.n	8008e6c <xQueueReceive+0x1e0>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e24:	f000 fb4d 	bl	80094c2 <prvIsQueueEmpty>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d018      	beq.n	8008e60 <xQueueReceive+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e30:	3324      	adds	r3, #36	@ 0x24
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	4611      	mov	r1, r2
 8008e36:	4618      	mov	r0, r3
 8008e38:	f001 f8a4 	bl	8009f84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e3e:	f000 faee 	bl	800941e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e42:	f000 fea5 	bl	8009b90 <xTaskResumeAll>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f47f af69 	bne.w	8008d20 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e4e:	4b18      	ldr	r3, [pc, #96]	@ (8008eb0 <xQueueReceive+0x224>)
 8008e50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	e75f      	b.n	8008d20 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e62:	f000 fadc 	bl	800941e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e66:	f000 fe93 	bl	8009b90 <xTaskResumeAll>
 8008e6a:	e759      	b.n	8008d20 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e6e:	f000 fad6 	bl	800941e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e72:	f000 fe8d 	bl	8009b90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e78:	f000 fb23 	bl	80094c2 <prvIsQueueEmpty>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f43f af4e 	beq.w	8008d20 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e86:	4618      	mov	r0, r3
 8008e88:	f003 ffd2 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	2000      	movs	r0, #0
 8008e90:	f003 ffce 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8008e94:	4602      	mov	r2, r0
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2101      	movs	r1, #1
 8008e9a:	9100      	str	r1, [sp, #0]
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	205c      	movs	r0, #92	@ 0x5c
 8008ea0:	f003 fb8a 	bl	800c5b8 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8008ea4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3734      	adds	r7, #52	@ 0x34
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd90      	pop	{r4, r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	e000ed04 	.word	0xe000ed04

08008eb4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008eb4:	b590      	push	{r4, r7, lr}
 8008eb6:	b091      	sub	sp, #68	@ 0x44
 8008eb8:	af02      	add	r7, sp, #8
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10b      	bne.n	8008ee8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	623b      	str	r3, [r7, #32]
}
 8008ee2:	bf00      	nop
 8008ee4:	bf00      	nop
 8008ee6:	e7fd      	b.n	8008ee4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00b      	beq.n	8008f08 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	61fb      	str	r3, [r7, #28]
}
 8008f02:	bf00      	nop
 8008f04:	bf00      	nop
 8008f06:	e7fd      	b.n	8008f04 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f08:	f001 fb4a 	bl	800a5a0 <xTaskGetSchedulerState>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d102      	bne.n	8008f18 <xQueueSemaphoreTake+0x64>
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <xQueueSemaphoreTake+0x68>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e000      	b.n	8008f1e <xQueueSemaphoreTake+0x6a>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10b      	bne.n	8008f3a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	61bb      	str	r3, [r7, #24]
}
 8008f34:	bf00      	nop
 8008f36:	bf00      	nop
 8008f38:	e7fd      	b.n	8008f36 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f3a:	f002 fadd 	bl	800b4f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f42:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d034      	beq.n	8008fb4 <xQueueSemaphoreTake+0x100>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8008f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f003 ff6f 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8008f52:	4604      	mov	r4, r0
 8008f54:	2000      	movs	r0, #0
 8008f56:	f003 ff6b 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2101      	movs	r1, #1
 8008f60:	9100      	str	r1, [sp, #0]
 8008f62:	4621      	mov	r1, r4
 8008f64:	205c      	movs	r0, #92	@ 0x5c
 8008f66:	f003 fb27 	bl	800c5b8 <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f6c:	1e5a      	subs	r2, r3, #1
 8008f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f70:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d104      	bne.n	8008f84 <xQueueSemaphoreTake+0xd0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008f7a:	f001 fcbd 	bl	800a8f8 <pvTaskIncrementMutexHeldCount>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f82:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00f      	beq.n	8008fac <xQueueSemaphoreTake+0xf8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8e:	3310      	adds	r3, #16
 8008f90:	4618      	mov	r0, r3
 8008f92:	f001 f88b 	bl	800a0ac <xTaskRemoveFromEventList>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d007      	beq.n	8008fac <xQueueSemaphoreTake+0xf8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f9c:	4b64      	ldr	r3, [pc, #400]	@ (8009130 <xQueueSemaphoreTake+0x27c>)
 8008f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008fac:	f002 fad6 	bl	800b55c <vPortExitCritical>
				return pdPASS;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e0b8      	b.n	8009126 <xQueueSemaphoreTake+0x272>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d122      	bne.n	8009000 <xQueueSemaphoreTake+0x14c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00b      	beq.n	8008fd8 <xQueueSemaphoreTake+0x124>
	__asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	617b      	str	r3, [r7, #20]
}
 8008fd2:	bf00      	nop
 8008fd4:	bf00      	nop
 8008fd6:	e7fd      	b.n	8008fd4 <xQueueSemaphoreTake+0x120>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008fd8:	f002 fac0 	bl	800b55c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f003 ff26 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	f003 ff22 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8008fec:	4602      	mov	r2, r0
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	9100      	str	r1, [sp, #0]
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	205c      	movs	r0, #92	@ 0x5c
 8008ff8:	f003 fade 	bl	800c5b8 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	e092      	b.n	8009126 <xQueueSemaphoreTake+0x272>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009002:	2b00      	cmp	r3, #0
 8009004:	d106      	bne.n	8009014 <xQueueSemaphoreTake+0x160>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009006:	f107 030c 	add.w	r3, r7, #12
 800900a:	4618      	mov	r0, r3
 800900c:	f001 f91e 	bl	800a24c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009010:	2301      	movs	r3, #1
 8009012:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009014:	f002 faa2 	bl	800b55c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009018:	f000 fdac 	bl	8009b74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800901c:	f002 fa6c 	bl	800b4f8 <vPortEnterCritical>
 8009020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009022:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009026:	b25b      	sxtb	r3, r3
 8009028:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800902c:	d103      	bne.n	8009036 <xQueueSemaphoreTake+0x182>
 800902e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009030:	2200      	movs	r2, #0
 8009032:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009038:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800903c:	b25b      	sxtb	r3, r3
 800903e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009042:	d103      	bne.n	800904c <xQueueSemaphoreTake+0x198>
 8009044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009046:	2200      	movs	r2, #0
 8009048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800904c:	f002 fa86 	bl	800b55c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009050:	463a      	mov	r2, r7
 8009052:	f107 030c 	add.w	r3, r7, #12
 8009056:	4611      	mov	r1, r2
 8009058:	4618      	mov	r0, r3
 800905a:	f001 f90d 	bl	800a278 <xTaskCheckForTimeOut>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d132      	bne.n	80090ca <xQueueSemaphoreTake+0x216>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009064:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009066:	f000 fa2c 	bl	80094c2 <prvIsQueueEmpty>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d026      	beq.n	80090be <xQueueSemaphoreTake+0x20a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d109      	bne.n	800908c <xQueueSemaphoreTake+0x1d8>
					{
						taskENTER_CRITICAL();
 8009078:	f002 fa3e 	bl	800b4f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800907c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	4618      	mov	r0, r3
 8009082:	f001 faab 	bl	800a5dc <xTaskPriorityInherit>
 8009086:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009088:	f002 fa68 	bl	800b55c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800908c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800908e:	3324      	adds	r3, #36	@ 0x24
 8009090:	683a      	ldr	r2, [r7, #0]
 8009092:	4611      	mov	r1, r2
 8009094:	4618      	mov	r0, r3
 8009096:	f000 ff75 	bl	8009f84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800909a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800909c:	f000 f9bf 	bl	800941e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090a0:	f000 fd76 	bl	8009b90 <xTaskResumeAll>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f47f af47 	bne.w	8008f3a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80090ac:	4b20      	ldr	r3, [pc, #128]	@ (8009130 <xQueueSemaphoreTake+0x27c>)
 80090ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090b2:	601a      	str	r2, [r3, #0]
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	e73d      	b.n	8008f3a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80090be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090c0:	f000 f9ad 	bl	800941e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090c4:	f000 fd64 	bl	8009b90 <xTaskResumeAll>
 80090c8:	e737      	b.n	8008f3a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80090ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090cc:	f000 f9a7 	bl	800941e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090d0:	f000 fd5e 	bl	8009b90 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090d6:	f000 f9f4 	bl	80094c2 <prvIsQueueEmpty>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f43f af2c 	beq.w	8008f3a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80090e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00d      	beq.n	8009104 <xQueueSemaphoreTake+0x250>
					{
						taskENTER_CRITICAL();
 80090e8:	f002 fa06 	bl	800b4f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80090ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090ee:	f000 f8ee 	bl	80092ce <prvGetDisinheritPriorityAfterTimeout>
 80090f2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80090f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80090fa:	4618      	mov	r0, r3
 80090fc:	f001 fb58 	bl	800a7b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009100:	f002 fa2c 	bl	800b55c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009106:	4618      	mov	r0, r3
 8009108:	f003 fe92 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 800910c:	4604      	mov	r4, r0
 800910e:	2000      	movs	r0, #0
 8009110:	f003 fe8e 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8009114:	4602      	mov	r2, r0
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	2101      	movs	r1, #1
 800911a:	9100      	str	r1, [sp, #0]
 800911c:	4621      	mov	r1, r4
 800911e:	205c      	movs	r0, #92	@ 0x5c
 8009120:	f003 fa4a 	bl	800c5b8 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8009124:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009126:	4618      	mov	r0, r3
 8009128:	373c      	adds	r7, #60	@ 0x3c
 800912a:	46bd      	mov	sp, r7
 800912c:	bd90      	pop	{r4, r7, pc}
 800912e:	bf00      	nop
 8009130:	e000ed04 	.word	0xe000ed04

08009134 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009134:	b590      	push	{r4, r7, lr}
 8009136:	b08f      	sub	sp, #60	@ 0x3c
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10b      	bne.n	8009162 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800914a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	623b      	str	r3, [r7, #32]
}
 800915c:	bf00      	nop
 800915e:	bf00      	nop
 8009160:	e7fd      	b.n	800915e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d103      	bne.n	8009170 <xQueueReceiveFromISR+0x3c>
 8009168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <xQueueReceiveFromISR+0x40>
 8009170:	2301      	movs	r3, #1
 8009172:	e000      	b.n	8009176 <xQueueReceiveFromISR+0x42>
 8009174:	2300      	movs	r3, #0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10b      	bne.n	8009192 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800917a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917e:	f383 8811 	msr	BASEPRI, r3
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	61fb      	str	r3, [r7, #28]
}
 800918c:	bf00      	nop
 800918e:	bf00      	nop
 8009190:	e7fd      	b.n	800918e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009192:	f002 fa91 	bl	800b6b8 <vPortValidateInterruptPriority>
	__asm volatile
 8009196:	f3ef 8211 	mrs	r2, BASEPRI
 800919a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	61ba      	str	r2, [r7, #24]
 80091ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80091ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d03e      	beq.n	800923c <xQueueReceiveFromISR+0x108>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80091be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 80091c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ca:	4618      	mov	r0, r3
 80091cc:	f003 fe30 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 80091d0:	4604      	mov	r4, r0
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f003 fe2b 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 80091da:	4602      	mov	r2, r0
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4621      	mov	r1, r4
 80091e0:	2062      	movs	r0, #98	@ 0x62
 80091e2:	f003 f973 	bl	800c4cc <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091e6:	68b9      	ldr	r1, [r7, #8]
 80091e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091ea:	f000 f8f2 	bl	80093d2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f0:	1e5a      	subs	r2, r3, #1
 80091f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f4:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80091f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80091fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091fe:	d112      	bne.n	8009226 <xQueueReceiveFromISR+0xf2>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d016      	beq.n	8009236 <xQueueReceiveFromISR+0x102>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920a:	3310      	adds	r3, #16
 800920c:	4618      	mov	r0, r3
 800920e:	f000 ff4d 	bl	800a0ac <xTaskRemoveFromEventList>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00e      	beq.n	8009236 <xQueueReceiveFromISR+0x102>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00b      	beq.n	8009236 <xQueueReceiveFromISR+0x102>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	e007      	b.n	8009236 <xQueueReceiveFromISR+0x102>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009226:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800922a:	3301      	adds	r3, #1
 800922c:	b2db      	uxtb	r3, r3
 800922e:	b25a      	sxtb	r2, r3
 8009230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009232:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009236:	2301      	movs	r3, #1
 8009238:	637b      	str	r3, [r7, #52]	@ 0x34
 800923a:	e010      	b.n	800925e <xQueueReceiveFromISR+0x12a>
		}
		else
		{
			xReturn = pdFAIL;
 800923c:	2300      	movs	r3, #0
 800923e:	637b      	str	r3, [r7, #52]	@ 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8009240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009242:	4618      	mov	r0, r3
 8009244:	f003 fdf4 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8009248:	4604      	mov	r4, r0
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	4618      	mov	r0, r3
 800924e:	f003 fdef 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 8009252:	4602      	mov	r2, r0
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4621      	mov	r1, r4
 8009258:	2062      	movs	r0, #98	@ 0x62
 800925a:	f003 f937 	bl	800c4cc <SEGGER_SYSVIEW_RecordU32x3>
 800925e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009260:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	f383 8811 	msr	BASEPRI, r3
}
 8009268:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800926a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800926c:	4618      	mov	r0, r3
 800926e:	373c      	adds	r7, #60	@ 0x3c
 8009270:	46bd      	mov	sp, r7
 8009272:	bd90      	pop	{r4, r7, pc}

08009274 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10b      	bne.n	800929e <vQueueDelete+0x2a>
	__asm volatile
 8009286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928a:	f383 8811 	msr	BASEPRI, r3
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	60bb      	str	r3, [r7, #8]
}
 8009298:	bf00      	nop
 800929a:	bf00      	nop
 800929c:	e7fd      	b.n	800929a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f003 fdc5 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 80092a6:	4603      	mov	r3, r0
 80092a8:	4619      	mov	r1, r3
 80092aa:	205f      	movs	r0, #95	@ 0x5f
 80092ac:	f003 f878 	bl	800c3a0 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f000 f967 	bl	8009584 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d102      	bne.n	80092c6 <vQueueDelete+0x52>
		{
			vPortFree( pxQueue );
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f002 fb09 	bl	800b8d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80092c6:	bf00      	nop
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80092ce:	b480      	push	{r7}
 80092d0:	b085      	sub	sp, #20
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d006      	beq.n	80092ec <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	e001      	b.n	80092f0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80092ec:	2300      	movs	r3, #0
 80092ee:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80092f0:	68fb      	ldr	r3, [r7, #12]
	}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3714      	adds	r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b086      	sub	sp, #24
 8009302:	af00      	add	r7, sp, #0
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800930a:	2300      	movs	r3, #0
 800930c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009312:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10d      	bne.n	8009338 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d14d      	bne.n	80093c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	4618      	mov	r0, r3
 800932a:	f001 f9c9 	bl	800a6c0 <xTaskPriorityDisinherit>
 800932e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	609a      	str	r2, [r3, #8]
 8009336:	e043      	b.n	80093c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d119      	bne.n	8009372 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6858      	ldr	r0, [r3, #4]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009346:	461a      	mov	r2, r3
 8009348:	68b9      	ldr	r1, [r7, #8]
 800934a:	f004 fa8b 	bl	800d864 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009356:	441a      	add	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	429a      	cmp	r2, r3
 8009366:	d32b      	bcc.n	80093c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	605a      	str	r2, [r3, #4]
 8009370:	e026      	b.n	80093c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	68d8      	ldr	r0, [r3, #12]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937a:	461a      	mov	r2, r3
 800937c:	68b9      	ldr	r1, [r7, #8]
 800937e:	f004 fa71 	bl	800d864 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	68da      	ldr	r2, [r3, #12]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800938a:	425b      	negs	r3, r3
 800938c:	441a      	add	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	68da      	ldr	r2, [r3, #12]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	429a      	cmp	r2, r3
 800939c:	d207      	bcs.n	80093ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	689a      	ldr	r2, [r3, #8]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093a6:	425b      	negs	r3, r3
 80093a8:	441a      	add	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d105      	bne.n	80093c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d002      	beq.n	80093c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	3b01      	subs	r3, #1
 80093be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	1c5a      	adds	r2, r3, #1
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80093c8:	697b      	ldr	r3, [r7, #20]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3718      	adds	r7, #24
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b082      	sub	sp, #8
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
 80093da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d018      	beq.n	8009416 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	68da      	ldr	r2, [r3, #12]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ec:	441a      	add	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68da      	ldr	r2, [r3, #12]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d303      	bcc.n	8009406 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	68d9      	ldr	r1, [r3, #12]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800940e:	461a      	mov	r2, r3
 8009410:	6838      	ldr	r0, [r7, #0]
 8009412:	f004 fa27 	bl	800d864 <memcpy>
	}
}
 8009416:	bf00      	nop
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009426:	f002 f867 	bl	800b4f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009430:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009432:	e011      	b.n	8009458 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009438:	2b00      	cmp	r3, #0
 800943a:	d012      	beq.n	8009462 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3324      	adds	r3, #36	@ 0x24
 8009440:	4618      	mov	r0, r3
 8009442:	f000 fe33 	bl	800a0ac <xTaskRemoveFromEventList>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800944c:	f000 ff78 	bl	800a340 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009450:	7bfb      	ldrb	r3, [r7, #15]
 8009452:	3b01      	subs	r3, #1
 8009454:	b2db      	uxtb	r3, r3
 8009456:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800945c:	2b00      	cmp	r3, #0
 800945e:	dce9      	bgt.n	8009434 <prvUnlockQueue+0x16>
 8009460:	e000      	b.n	8009464 <prvUnlockQueue+0x46>
					break;
 8009462:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	22ff      	movs	r2, #255	@ 0xff
 8009468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800946c:	f002 f876 	bl	800b55c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009470:	f002 f842 	bl	800b4f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800947a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800947c:	e011      	b.n	80094a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d012      	beq.n	80094ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	3310      	adds	r3, #16
 800948a:	4618      	mov	r0, r3
 800948c:	f000 fe0e 	bl	800a0ac <xTaskRemoveFromEventList>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009496:	f000 ff53 	bl	800a340 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800949a:	7bbb      	ldrb	r3, [r7, #14]
 800949c:	3b01      	subs	r3, #1
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	dce9      	bgt.n	800947e <prvUnlockQueue+0x60>
 80094aa:	e000      	b.n	80094ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80094ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	22ff      	movs	r2, #255	@ 0xff
 80094b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80094b6:	f002 f851 	bl	800b55c <vPortExitCritical>
}
 80094ba:	bf00      	nop
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094ca:	f002 f815 	bl	800b4f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d102      	bne.n	80094dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80094d6:	2301      	movs	r3, #1
 80094d8:	60fb      	str	r3, [r7, #12]
 80094da:	e001      	b.n	80094e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80094dc:	2300      	movs	r3, #0
 80094de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094e0:	f002 f83c 	bl	800b55c <vPortExitCritical>

	return xReturn;
 80094e4:	68fb      	ldr	r3, [r7, #12]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b084      	sub	sp, #16
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094f6:	f001 ffff 	bl	800b4f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009502:	429a      	cmp	r2, r3
 8009504:	d102      	bne.n	800950c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009506:	2301      	movs	r3, #1
 8009508:	60fb      	str	r3, [r7, #12]
 800950a:	e001      	b.n	8009510 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800950c:	2300      	movs	r3, #0
 800950e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009510:	f002 f824 	bl	800b55c <vPortExitCritical>

	return xReturn;
 8009514:	68fb      	ldr	r3, [r7, #12]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800952a:	2300      	movs	r3, #0
 800952c:	60fb      	str	r3, [r7, #12]
 800952e:	e01e      	b.n	800956e <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009530:	4a13      	ldr	r2, [pc, #76]	@ (8009580 <vQueueAddToRegistry+0x60>)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d115      	bne.n	8009568 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800953c:	4910      	ldr	r1, [pc, #64]	@ (8009580 <vQueueAddToRegistry+0x60>)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009546:	4a0e      	ldr	r2, [pc, #56]	@ (8009580 <vQueueAddToRegistry+0x60>)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	00db      	lsls	r3, r3, #3
 800954c:	4413      	add	r3, r2
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4618      	mov	r0, r3
 8009556:	f003 fc6b 	bl	800ce30 <SEGGER_SYSVIEW_ShrinkId>
 800955a:	4601      	mov	r1, r0
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	2071      	movs	r0, #113	@ 0x71
 8009562:	f002 ff59 	bl	800c418 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8009566:	e006      	b.n	8009576 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	3301      	adds	r3, #1
 800956c:	60fb      	str	r3, [r7, #12]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2b07      	cmp	r3, #7
 8009572:	d9dd      	bls.n	8009530 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009574:	bf00      	nop
 8009576:	bf00      	nop
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	2002651c 	.word	0x2002651c

08009584 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800958c:	2300      	movs	r3, #0
 800958e:	60fb      	str	r3, [r7, #12]
 8009590:	e016      	b.n	80095c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009592:	4a10      	ldr	r2, [pc, #64]	@ (80095d4 <vQueueUnregisterQueue+0x50>)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	4413      	add	r3, r2
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d10b      	bne.n	80095ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80095a2:	4a0c      	ldr	r2, [pc, #48]	@ (80095d4 <vQueueUnregisterQueue+0x50>)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2100      	movs	r1, #0
 80095a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80095ac:	4a09      	ldr	r2, [pc, #36]	@ (80095d4 <vQueueUnregisterQueue+0x50>)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	00db      	lsls	r3, r3, #3
 80095b2:	4413      	add	r3, r2
 80095b4:	2200      	movs	r2, #0
 80095b6:	605a      	str	r2, [r3, #4]
				break;
 80095b8:	e006      	b.n	80095c8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	3301      	adds	r3, #1
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b07      	cmp	r3, #7
 80095c4:	d9e5      	bls.n	8009592 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80095c6:	bf00      	nop
 80095c8:	bf00      	nop
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	2002651c 	.word	0x2002651c

080095d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80095e8:	f001 ff86 	bl	800b4f8 <vPortEnterCritical>
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095f2:	b25b      	sxtb	r3, r3
 80095f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095f8:	d103      	bne.n	8009602 <vQueueWaitForMessageRestricted+0x2a>
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009608:	b25b      	sxtb	r3, r3
 800960a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800960e:	d103      	bne.n	8009618 <vQueueWaitForMessageRestricted+0x40>
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009618:	f001 ffa0 	bl	800b55c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009620:	2b00      	cmp	r3, #0
 8009622:	d106      	bne.n	8009632 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	3324      	adds	r3, #36	@ 0x24
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	68b9      	ldr	r1, [r7, #8]
 800962c:	4618      	mov	r0, r3
 800962e:	f000 fd0d 	bl	800a04c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009632:	6978      	ldr	r0, [r7, #20]
 8009634:	f7ff fef3 	bl	800941e <prvUnlockQueue>
	}
 8009638:	bf00      	nop
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009640:	b580      	push	{r7, lr}
 8009642:	b08e      	sub	sp, #56	@ 0x38
 8009644:	af04      	add	r7, sp, #16
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
 800964c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800964e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10b      	bne.n	800966c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	623b      	str	r3, [r7, #32]
}
 8009666:	bf00      	nop
 8009668:	bf00      	nop
 800966a:	e7fd      	b.n	8009668 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800966c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10b      	bne.n	800968a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009676:	f383 8811 	msr	BASEPRI, r3
 800967a:	f3bf 8f6f 	isb	sy
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	61fb      	str	r3, [r7, #28]
}
 8009684:	bf00      	nop
 8009686:	bf00      	nop
 8009688:	e7fd      	b.n	8009686 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800968a:	23a8      	movs	r3, #168	@ 0xa8
 800968c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	2ba8      	cmp	r3, #168	@ 0xa8
 8009692:	d00b      	beq.n	80096ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8009694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	61bb      	str	r3, [r7, #24]
}
 80096a6:	bf00      	nop
 80096a8:	bf00      	nop
 80096aa:	e7fd      	b.n	80096a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80096ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80096ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d01e      	beq.n	80096f2 <xTaskCreateStatic+0xb2>
 80096b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d01b      	beq.n	80096f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80096be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80096c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c6:	2202      	movs	r2, #2
 80096c8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80096cc:	2300      	movs	r3, #0
 80096ce:	9303      	str	r3, [sp, #12]
 80096d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d2:	9302      	str	r3, [sp, #8]
 80096d4:	f107 0314 	add.w	r3, r7, #20
 80096d8:	9301      	str	r3, [sp, #4]
 80096da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	68b9      	ldr	r1, [r7, #8]
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f000 f851 	bl	800978c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80096ec:	f000 f8f6 	bl	80098dc <prvAddNewTaskToReadyList>
 80096f0:	e001      	b.n	80096f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80096f2:	2300      	movs	r3, #0
 80096f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80096f6:	697b      	ldr	r3, [r7, #20]
	}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3728      	adds	r7, #40	@ 0x28
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009700:	b580      	push	{r7, lr}
 8009702:	b08c      	sub	sp, #48	@ 0x30
 8009704:	af04      	add	r7, sp, #16
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	603b      	str	r3, [r7, #0]
 800970c:	4613      	mov	r3, r2
 800970e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009710:	88fb      	ldrh	r3, [r7, #6]
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4618      	mov	r0, r3
 8009716:	f002 f811 	bl	800b73c <pvPortMalloc>
 800971a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00e      	beq.n	8009740 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009722:	20a8      	movs	r0, #168	@ 0xa8
 8009724:	f002 f80a 	bl	800b73c <pvPortMalloc>
 8009728:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d003      	beq.n	8009738 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	631a      	str	r2, [r3, #48]	@ 0x30
 8009736:	e005      	b.n	8009744 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009738:	6978      	ldr	r0, [r7, #20]
 800973a:	f002 f8cd 	bl	800b8d8 <vPortFree>
 800973e:	e001      	b.n	8009744 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009740:	2300      	movs	r3, #0
 8009742:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d017      	beq.n	800977a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009752:	88fa      	ldrh	r2, [r7, #6]
 8009754:	2300      	movs	r3, #0
 8009756:	9303      	str	r3, [sp, #12]
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	9302      	str	r3, [sp, #8]
 800975c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975e:	9301      	str	r3, [sp, #4]
 8009760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	68b9      	ldr	r1, [r7, #8]
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f000 f80f 	bl	800978c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800976e:	69f8      	ldr	r0, [r7, #28]
 8009770:	f000 f8b4 	bl	80098dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009774:	2301      	movs	r3, #1
 8009776:	61bb      	str	r3, [r7, #24]
 8009778:	e002      	b.n	8009780 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800977a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800977e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009780:	69bb      	ldr	r3, [r7, #24]
	}
 8009782:	4618      	mov	r0, r3
 8009784:	3720      	adds	r7, #32
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
	...

0800978c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800979a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	461a      	mov	r2, r3
 80097a4:	21a5      	movs	r1, #165	@ 0xa5
 80097a6:	f003 ffbb 	bl	800d720 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80097aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80097b4:	3b01      	subs	r3, #1
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	f023 0307 	bic.w	r3, r3, #7
 80097c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00b      	beq.n	80097e6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	617b      	str	r3, [r7, #20]
}
 80097e0:	bf00      	nop
 80097e2:	bf00      	nop
 80097e4:	e7fd      	b.n	80097e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d01f      	beq.n	800982c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097ec:	2300      	movs	r3, #0
 80097ee:	61fb      	str	r3, [r7, #28]
 80097f0:	e012      	b.n	8009818 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80097f2:	68ba      	ldr	r2, [r7, #8]
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	4413      	add	r3, r2
 80097f8:	7819      	ldrb	r1, [r3, #0]
 80097fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	4413      	add	r3, r2
 8009800:	3334      	adds	r3, #52	@ 0x34
 8009802:	460a      	mov	r2, r1
 8009804:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009806:	68ba      	ldr	r2, [r7, #8]
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	4413      	add	r3, r2
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d006      	beq.n	8009820 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	3301      	adds	r3, #1
 8009816:	61fb      	str	r3, [r7, #28]
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	2b0f      	cmp	r3, #15
 800981c:	d9e9      	bls.n	80097f2 <prvInitialiseNewTask+0x66>
 800981e:	e000      	b.n	8009822 <prvInitialiseNewTask+0x96>
			{
				break;
 8009820:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800982a:	e003      	b.n	8009834 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800982c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009836:	2b37      	cmp	r3, #55	@ 0x37
 8009838:	d901      	bls.n	800983e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800983a:	2337      	movs	r3, #55	@ 0x37
 800983c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800983e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009842:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009846:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009848:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800984a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984c:	2200      	movs	r2, #0
 800984e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009852:	3304      	adds	r3, #4
 8009854:	4618      	mov	r0, r3
 8009856:	f7fe fc93 	bl	8008180 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800985a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985c:	3318      	adds	r3, #24
 800985e:	4618      	mov	r0, r3
 8009860:	f7fe fc8e 	bl	8008180 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009868:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800986a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009872:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009878:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800987a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987c:	2200      	movs	r2, #0
 800987e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009884:	2200      	movs	r2, #0
 8009886:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800988a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800988c:	3354      	adds	r3, #84	@ 0x54
 800988e:	224c      	movs	r2, #76	@ 0x4c
 8009890:	2100      	movs	r1, #0
 8009892:	4618      	mov	r0, r3
 8009894:	f003 ff44 	bl	800d720 <memset>
 8009898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989a:	4a0d      	ldr	r2, [pc, #52]	@ (80098d0 <prvInitialiseNewTask+0x144>)
 800989c:	659a      	str	r2, [r3, #88]	@ 0x58
 800989e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a0:	4a0c      	ldr	r2, [pc, #48]	@ (80098d4 <prvInitialiseNewTask+0x148>)
 80098a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80098a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a6:	4a0c      	ldr	r2, [pc, #48]	@ (80098d8 <prvInitialiseNewTask+0x14c>)
 80098a8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	68f9      	ldr	r1, [r7, #12]
 80098ae:	69b8      	ldr	r0, [r7, #24]
 80098b0:	f001 fcee 	bl	800b290 <pxPortInitialiseStack>
 80098b4:	4602      	mov	r2, r0
 80098b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80098ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80098c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098c6:	bf00      	nop
 80098c8:	3720      	adds	r7, #32
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	2002b234 	.word	0x2002b234
 80098d4:	2002b29c 	.word	0x2002b29c
 80098d8:	2002b304 	.word	0x2002b304

080098dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80098dc:	b5b0      	push	{r4, r5, r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af02      	add	r7, sp, #8
 80098e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80098e4:	f001 fe08 	bl	800b4f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80098e8:	4b3c      	ldr	r3, [pc, #240]	@ (80099dc <prvAddNewTaskToReadyList+0x100>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3301      	adds	r3, #1
 80098ee:	4a3b      	ldr	r2, [pc, #236]	@ (80099dc <prvAddNewTaskToReadyList+0x100>)
 80098f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80098f2:	4b3b      	ldr	r3, [pc, #236]	@ (80099e0 <prvAddNewTaskToReadyList+0x104>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d109      	bne.n	800990e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80098fa:	4a39      	ldr	r2, [pc, #228]	@ (80099e0 <prvAddNewTaskToReadyList+0x104>)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009900:	4b36      	ldr	r3, [pc, #216]	@ (80099dc <prvAddNewTaskToReadyList+0x100>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d110      	bne.n	800992a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009908:	f000 fd3e 	bl	800a388 <prvInitialiseTaskLists>
 800990c:	e00d      	b.n	800992a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800990e:	4b35      	ldr	r3, [pc, #212]	@ (80099e4 <prvAddNewTaskToReadyList+0x108>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d109      	bne.n	800992a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009916:	4b32      	ldr	r3, [pc, #200]	@ (80099e0 <prvAddNewTaskToReadyList+0x104>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009920:	429a      	cmp	r2, r3
 8009922:	d802      	bhi.n	800992a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009924:	4a2e      	ldr	r2, [pc, #184]	@ (80099e0 <prvAddNewTaskToReadyList+0x104>)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800992a:	4b2f      	ldr	r3, [pc, #188]	@ (80099e8 <prvAddNewTaskToReadyList+0x10c>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3301      	adds	r3, #1
 8009930:	4a2d      	ldr	r2, [pc, #180]	@ (80099e8 <prvAddNewTaskToReadyList+0x10c>)
 8009932:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009934:	4b2c      	ldr	r3, [pc, #176]	@ (80099e8 <prvAddNewTaskToReadyList+0x10c>)
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d016      	beq.n	8009970 <prvAddNewTaskToReadyList+0x94>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4618      	mov	r0, r3
 8009946:	f003 f9ad 	bl	800cca4 <SEGGER_SYSVIEW_OnTaskCreate>
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800995a:	461d      	mov	r5, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	461c      	mov	r4, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009966:	1ae3      	subs	r3, r4, r3
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	462b      	mov	r3, r5
 800996c:	f003 fd2c 	bl	800d3c8 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4618      	mov	r0, r3
 8009974:	f003 fa1a 	bl	800cdac <SEGGER_SYSVIEW_OnTaskStartReady>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800997c:	4b1b      	ldr	r3, [pc, #108]	@ (80099ec <prvAddNewTaskToReadyList+0x110>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	429a      	cmp	r2, r3
 8009982:	d903      	bls.n	800998c <prvAddNewTaskToReadyList+0xb0>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009988:	4a18      	ldr	r2, [pc, #96]	@ (80099ec <prvAddNewTaskToReadyList+0x110>)
 800998a:	6013      	str	r3, [r2, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009990:	4613      	mov	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	4a15      	ldr	r2, [pc, #84]	@ (80099f0 <prvAddNewTaskToReadyList+0x114>)
 800999a:	441a      	add	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	3304      	adds	r3, #4
 80099a0:	4619      	mov	r1, r3
 80099a2:	4610      	mov	r0, r2
 80099a4:	f7fe fbf9 	bl	800819a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80099a8:	f001 fdd8 	bl	800b55c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80099ac:	4b0d      	ldr	r3, [pc, #52]	@ (80099e4 <prvAddNewTaskToReadyList+0x108>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00e      	beq.n	80099d2 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80099b4:	4b0a      	ldr	r3, [pc, #40]	@ (80099e0 <prvAddNewTaskToReadyList+0x104>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099be:	429a      	cmp	r2, r3
 80099c0:	d207      	bcs.n	80099d2 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80099c2:	4b0c      	ldr	r3, [pc, #48]	@ (80099f4 <prvAddNewTaskToReadyList+0x118>)
 80099c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099c8:	601a      	str	r2, [r3, #0]
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099d2:	bf00      	nop
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bdb0      	pop	{r4, r5, r7, pc}
 80099da:	bf00      	nop
 80099dc:	20026a30 	.word	0x20026a30
 80099e0:	2002655c 	.word	0x2002655c
 80099e4:	20026a3c 	.word	0x20026a3c
 80099e8:	20026a4c 	.word	0x20026a4c
 80099ec:	20026a38 	.word	0x20026a38
 80099f0:	20026560 	.word	0x20026560
 80099f4:	e000ed04 	.word	0xe000ed04

080099f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a00:	2300      	movs	r3, #0
 8009a02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d01c      	beq.n	8009a44 <vTaskDelay+0x4c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a0a:	4b16      	ldr	r3, [pc, #88]	@ (8009a64 <vTaskDelay+0x6c>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00b      	beq.n	8009a2a <vTaskDelay+0x32>
	__asm volatile
 8009a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	60bb      	str	r3, [r7, #8]
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop
 8009a28:	e7fd      	b.n	8009a26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009a2a:	f000 f8a3 	bl	8009b74 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8009a2e:	6879      	ldr	r1, [r7, #4]
 8009a30:	2023      	movs	r0, #35	@ 0x23
 8009a32:	f002 fcb5 	bl	800c3a0 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a36:	2100      	movs	r1, #0
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 ff71 	bl	800a920 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009a3e:	f000 f8a7 	bl	8009b90 <xTaskResumeAll>
 8009a42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d107      	bne.n	8009a5a <vTaskDelay+0x62>
		{
			portYIELD_WITHIN_API();
 8009a4a:	4b07      	ldr	r3, [pc, #28]	@ (8009a68 <vTaskDelay+0x70>)
 8009a4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a5a:	bf00      	nop
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	20026a58 	.word	0x20026a58
 8009a68:	e000ed04 	.word	0xe000ed04

08009a6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08a      	sub	sp, #40	@ 0x28
 8009a70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009a72:	2300      	movs	r3, #0
 8009a74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009a76:	2300      	movs	r3, #0
 8009a78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009a7a:	463a      	mov	r2, r7
 8009a7c:	1d39      	adds	r1, r7, #4
 8009a7e:	f107 0308 	add.w	r3, r7, #8
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fe f8b4 	bl	8007bf0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	9202      	str	r2, [sp, #8]
 8009a90:	9301      	str	r3, [sp, #4]
 8009a92:	2300      	movs	r3, #0
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	2300      	movs	r3, #0
 8009a98:	460a      	mov	r2, r1
 8009a9a:	492e      	ldr	r1, [pc, #184]	@ (8009b54 <vTaskStartScheduler+0xe8>)
 8009a9c:	482e      	ldr	r0, [pc, #184]	@ (8009b58 <vTaskStartScheduler+0xec>)
 8009a9e:	f7ff fdcf 	bl	8009640 <xTaskCreateStatic>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8009b5c <vTaskStartScheduler+0xf0>)
 8009aa6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8009b5c <vTaskStartScheduler+0xf0>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d002      	beq.n	8009ab6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	617b      	str	r3, [r7, #20]
 8009ab4:	e001      	b.n	8009aba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d102      	bne.n	8009ac6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009ac0:	f000 ff82 	bl	800a9c8 <xTimerCreateTimerTask>
 8009ac4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d12e      	bne.n	8009b2a <vTaskStartScheduler+0xbe>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	613b      	str	r3, [r7, #16]
}
 8009ade:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8009b60 <vTaskStartScheduler+0xf4>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	3354      	adds	r3, #84	@ 0x54
 8009ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8009b64 <vTaskStartScheduler+0xf8>)
 8009ae8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009aea:	4b1f      	ldr	r3, [pc, #124]	@ (8009b68 <vTaskStartScheduler+0xfc>)
 8009aec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009af0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009af2:	4b1e      	ldr	r3, [pc, #120]	@ (8009b6c <vTaskStartScheduler+0x100>)
 8009af4:	2201      	movs	r2, #1
 8009af6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009af8:	4b1d      	ldr	r3, [pc, #116]	@ (8009b70 <vTaskStartScheduler+0x104>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8009afe:	4b18      	ldr	r3, [pc, #96]	@ (8009b60 <vTaskStartScheduler+0xf4>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	3334      	adds	r3, #52	@ 0x34
 8009b04:	2205      	movs	r2, #5
 8009b06:	4913      	ldr	r1, [pc, #76]	@ (8009b54 <vTaskStartScheduler+0xe8>)
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f003 fdf9 	bl	800d700 <memcmp>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d005      	beq.n	8009b20 <vTaskStartScheduler+0xb4>
 8009b14:	4b12      	ldr	r3, [pc, #72]	@ (8009b60 <vTaskStartScheduler+0xf4>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f003 f905 	bl	800cd28 <SEGGER_SYSVIEW_OnTaskStartExec>
 8009b1e:	e001      	b.n	8009b24 <vTaskStartScheduler+0xb8>
 8009b20:	f003 f8a4 	bl	800cc6c <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b24:	f001 fc44 	bl	800b3b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b28:	e00f      	b.n	8009b4a <vTaskStartScheduler+0xde>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b30:	d10b      	bne.n	8009b4a <vTaskStartScheduler+0xde>
	__asm volatile
 8009b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b36:	f383 8811 	msr	BASEPRI, r3
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	60fb      	str	r3, [r7, #12]
}
 8009b44:	bf00      	nop
 8009b46:	bf00      	nop
 8009b48:	e7fd      	b.n	8009b46 <vTaskStartScheduler+0xda>
}
 8009b4a:	bf00      	nop
 8009b4c:	3718      	adds	r7, #24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	08010450 	.word	0x08010450
 8009b58:	0800a359 	.word	0x0800a359
 8009b5c:	20026a54 	.word	0x20026a54
 8009b60:	2002655c 	.word	0x2002655c
 8009b64:	20000234 	.word	0x20000234
 8009b68:	20026a50 	.word	0x20026a50
 8009b6c:	20026a3c 	.word	0x20026a3c
 8009b70:	20026a34 	.word	0x20026a34

08009b74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b74:	b480      	push	{r7}
 8009b76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009b78:	4b04      	ldr	r3, [pc, #16]	@ (8009b8c <vTaskSuspendAll+0x18>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	4a03      	ldr	r2, [pc, #12]	@ (8009b8c <vTaskSuspendAll+0x18>)
 8009b80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009b82:	bf00      	nop
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	20026a58 	.word	0x20026a58

08009b90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b96:	2300      	movs	r3, #0
 8009b98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b9e:	4b44      	ldr	r3, [pc, #272]	@ (8009cb0 <xTaskResumeAll+0x120>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10b      	bne.n	8009bbe <xTaskResumeAll+0x2e>
	__asm volatile
 8009ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009baa:	f383 8811 	msr	BASEPRI, r3
 8009bae:	f3bf 8f6f 	isb	sy
 8009bb2:	f3bf 8f4f 	dsb	sy
 8009bb6:	603b      	str	r3, [r7, #0]
}
 8009bb8:	bf00      	nop
 8009bba:	bf00      	nop
 8009bbc:	e7fd      	b.n	8009bba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009bbe:	f001 fc9b 	bl	800b4f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009bc2:	4b3b      	ldr	r3, [pc, #236]	@ (8009cb0 <xTaskResumeAll+0x120>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	4a39      	ldr	r2, [pc, #228]	@ (8009cb0 <xTaskResumeAll+0x120>)
 8009bca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bcc:	4b38      	ldr	r3, [pc, #224]	@ (8009cb0 <xTaskResumeAll+0x120>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d166      	bne.n	8009ca2 <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009bd4:	4b37      	ldr	r3, [pc, #220]	@ (8009cb4 <xTaskResumeAll+0x124>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d062      	beq.n	8009ca2 <xTaskResumeAll+0x112>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bdc:	e033      	b.n	8009c46 <xTaskResumeAll+0xb6>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bde:	4b36      	ldr	r3, [pc, #216]	@ (8009cb8 <xTaskResumeAll+0x128>)
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	3318      	adds	r3, #24
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fe fb32 	bl	8008254 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7fe fb2d 	bl	8008254 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f003 f8d5 	bl	800cdac <SEGGER_SYSVIEW_OnTaskStartReady>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c06:	4b2d      	ldr	r3, [pc, #180]	@ (8009cbc <xTaskResumeAll+0x12c>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d903      	bls.n	8009c16 <xTaskResumeAll+0x86>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c12:	4a2a      	ldr	r2, [pc, #168]	@ (8009cbc <xTaskResumeAll+0x12c>)
 8009c14:	6013      	str	r3, [r2, #0]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	4413      	add	r3, r2
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4a27      	ldr	r2, [pc, #156]	@ (8009cc0 <xTaskResumeAll+0x130>)
 8009c24:	441a      	add	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3304      	adds	r3, #4
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	f7fe fab4 	bl	800819a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c36:	4b23      	ldr	r3, [pc, #140]	@ (8009cc4 <xTaskResumeAll+0x134>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d302      	bcc.n	8009c46 <xTaskResumeAll+0xb6>
					{
						xYieldPending = pdTRUE;
 8009c40:	4b21      	ldr	r3, [pc, #132]	@ (8009cc8 <xTaskResumeAll+0x138>)
 8009c42:	2201      	movs	r2, #1
 8009c44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c46:	4b1c      	ldr	r3, [pc, #112]	@ (8009cb8 <xTaskResumeAll+0x128>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1c7      	bne.n	8009bde <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <xTaskResumeAll+0xc8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c54:	f000 fc74 	bl	800a540 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009c58:	4b1c      	ldr	r3, [pc, #112]	@ (8009ccc <xTaskResumeAll+0x13c>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d010      	beq.n	8009c86 <xTaskResumeAll+0xf6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c64:	f000 f858 	bl	8009d18 <xTaskIncrementTick>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d002      	beq.n	8009c74 <xTaskResumeAll+0xe4>
							{
								xYieldPending = pdTRUE;
 8009c6e:	4b16      	ldr	r3, [pc, #88]	@ (8009cc8 <xTaskResumeAll+0x138>)
 8009c70:	2201      	movs	r2, #1
 8009c72:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	3b01      	subs	r3, #1
 8009c78:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1f1      	bne.n	8009c64 <xTaskResumeAll+0xd4>

						xPendedTicks = 0;
 8009c80:	4b12      	ldr	r3, [pc, #72]	@ (8009ccc <xTaskResumeAll+0x13c>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c86:	4b10      	ldr	r3, [pc, #64]	@ (8009cc8 <xTaskResumeAll+0x138>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d009      	beq.n	8009ca2 <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c92:	4b0f      	ldr	r3, [pc, #60]	@ (8009cd0 <xTaskResumeAll+0x140>)
 8009c94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ca2:	f001 fc5b 	bl	800b55c <vPortExitCritical>

	return xAlreadyYielded;
 8009ca6:	68bb      	ldr	r3, [r7, #8]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	20026a58 	.word	0x20026a58
 8009cb4:	20026a30 	.word	0x20026a30
 8009cb8:	200269f0 	.word	0x200269f0
 8009cbc:	20026a38 	.word	0x20026a38
 8009cc0:	20026560 	.word	0x20026560
 8009cc4:	2002655c 	.word	0x2002655c
 8009cc8:	20026a44 	.word	0x20026a44
 8009ccc:	20026a40 	.word	0x20026a40
 8009cd0:	e000ed04 	.word	0xe000ed04

08009cd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009cda:	4b05      	ldr	r3, [pc, #20]	@ (8009cf0 <xTaskGetTickCount+0x1c>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ce0:	687b      	ldr	r3, [r7, #4]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	20026a34 	.word	0x20026a34

08009cf4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009cfa:	f001 fcdd 	bl	800b6b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009cfe:	2300      	movs	r3, #0
 8009d00:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009d02:	4b04      	ldr	r3, [pc, #16]	@ (8009d14 <xTaskGetTickCountFromISR+0x20>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d08:	683b      	ldr	r3, [r7, #0]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20026a34 	.word	0x20026a34

08009d18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d22:	4b51      	ldr	r3, [pc, #324]	@ (8009e68 <xTaskIncrementTick+0x150>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f040 8094 	bne.w	8009e54 <xTaskIncrementTick+0x13c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d2c:	4b4f      	ldr	r3, [pc, #316]	@ (8009e6c <xTaskIncrementTick+0x154>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	3301      	adds	r3, #1
 8009d32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d34:	4a4d      	ldr	r2, [pc, #308]	@ (8009e6c <xTaskIncrementTick+0x154>)
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d121      	bne.n	8009d84 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d40:	4b4b      	ldr	r3, [pc, #300]	@ (8009e70 <xTaskIncrementTick+0x158>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00b      	beq.n	8009d62 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4e:	f383 8811 	msr	BASEPRI, r3
 8009d52:	f3bf 8f6f 	isb	sy
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	603b      	str	r3, [r7, #0]
}
 8009d5c:	bf00      	nop
 8009d5e:	bf00      	nop
 8009d60:	e7fd      	b.n	8009d5e <xTaskIncrementTick+0x46>
 8009d62:	4b43      	ldr	r3, [pc, #268]	@ (8009e70 <xTaskIncrementTick+0x158>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	4b42      	ldr	r3, [pc, #264]	@ (8009e74 <xTaskIncrementTick+0x15c>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a40      	ldr	r2, [pc, #256]	@ (8009e70 <xTaskIncrementTick+0x158>)
 8009d6e:	6013      	str	r3, [r2, #0]
 8009d70:	4a40      	ldr	r2, [pc, #256]	@ (8009e74 <xTaskIncrementTick+0x15c>)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6013      	str	r3, [r2, #0]
 8009d76:	4b40      	ldr	r3, [pc, #256]	@ (8009e78 <xTaskIncrementTick+0x160>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	4a3e      	ldr	r2, [pc, #248]	@ (8009e78 <xTaskIncrementTick+0x160>)
 8009d7e:	6013      	str	r3, [r2, #0]
 8009d80:	f000 fbde 	bl	800a540 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d84:	4b3d      	ldr	r3, [pc, #244]	@ (8009e7c <xTaskIncrementTick+0x164>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d34d      	bcc.n	8009e2a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d8e:	4b38      	ldr	r3, [pc, #224]	@ (8009e70 <xTaskIncrementTick+0x158>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d104      	bne.n	8009da2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d98:	4b38      	ldr	r3, [pc, #224]	@ (8009e7c <xTaskIncrementTick+0x164>)
 8009d9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d9e:	601a      	str	r2, [r3, #0]
					break;
 8009da0:	e043      	b.n	8009e2a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009da2:	4b33      	ldr	r3, [pc, #204]	@ (8009e70 <xTaskIncrementTick+0x158>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d203      	bcs.n	8009dc2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009dba:	4a30      	ldr	r2, [pc, #192]	@ (8009e7c <xTaskIncrementTick+0x164>)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009dc0:	e033      	b.n	8009e2a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fe fa44 	bl	8008254 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d004      	beq.n	8009dde <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	3318      	adds	r3, #24
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fe fa3b 	bl	8008254 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f002 ffe3 	bl	800cdac <SEGGER_SYSVIEW_OnTaskStartReady>
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dea:	4b25      	ldr	r3, [pc, #148]	@ (8009e80 <xTaskIncrementTick+0x168>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d903      	bls.n	8009dfa <xTaskIncrementTick+0xe2>
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df6:	4a22      	ldr	r2, [pc, #136]	@ (8009e80 <xTaskIncrementTick+0x168>)
 8009df8:	6013      	str	r3, [r2, #0]
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dfe:	4613      	mov	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4413      	add	r3, r2
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	4a1f      	ldr	r2, [pc, #124]	@ (8009e84 <xTaskIncrementTick+0x16c>)
 8009e08:	441a      	add	r2, r3
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	4619      	mov	r1, r3
 8009e10:	4610      	mov	r0, r2
 8009e12:	f7fe f9c2 	bl	800819a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8009e88 <xTaskIncrementTick+0x170>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d3b4      	bcc.n	8009d8e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009e24:	2301      	movs	r3, #1
 8009e26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e28:	e7b1      	b.n	8009d8e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e2a:	4b17      	ldr	r3, [pc, #92]	@ (8009e88 <xTaskIncrementTick+0x170>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e30:	4914      	ldr	r1, [pc, #80]	@ (8009e84 <xTaskIncrementTick+0x16c>)
 8009e32:	4613      	mov	r3, r2
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	4413      	add	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	440b      	add	r3, r1
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d901      	bls.n	8009e46 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8009e42:	2301      	movs	r3, #1
 8009e44:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009e46:	4b11      	ldr	r3, [pc, #68]	@ (8009e8c <xTaskIncrementTick+0x174>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d007      	beq.n	8009e5e <xTaskIncrementTick+0x146>
			{
				xSwitchRequired = pdTRUE;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	617b      	str	r3, [r7, #20]
 8009e52:	e004      	b.n	8009e5e <xTaskIncrementTick+0x146>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009e54:	4b0e      	ldr	r3, [pc, #56]	@ (8009e90 <xTaskIncrementTick+0x178>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	4a0d      	ldr	r2, [pc, #52]	@ (8009e90 <xTaskIncrementTick+0x178>)
 8009e5c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009e5e:	697b      	ldr	r3, [r7, #20]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3718      	adds	r7, #24
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	20026a58 	.word	0x20026a58
 8009e6c:	20026a34 	.word	0x20026a34
 8009e70:	200269e8 	.word	0x200269e8
 8009e74:	200269ec 	.word	0x200269ec
 8009e78:	20026a48 	.word	0x20026a48
 8009e7c:	20026a50 	.word	0x20026a50
 8009e80:	20026a38 	.word	0x20026a38
 8009e84:	20026560 	.word	0x20026560
 8009e88:	2002655c 	.word	0x2002655c
 8009e8c:	20026a44 	.word	0x20026a44
 8009e90:	20026a40 	.word	0x20026a40

08009e94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e9a:	4b33      	ldr	r3, [pc, #204]	@ (8009f68 <vTaskSwitchContext+0xd4>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d003      	beq.n	8009eaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ea2:	4b32      	ldr	r3, [pc, #200]	@ (8009f6c <vTaskSwitchContext+0xd8>)
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ea8:	e05a      	b.n	8009f60 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 8009eaa:	4b30      	ldr	r3, [pc, #192]	@ (8009f6c <vTaskSwitchContext+0xd8>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8009f70 <vTaskSwitchContext+0xdc>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	60fb      	str	r3, [r7, #12]
 8009eb6:	e011      	b.n	8009edc <vTaskSwitchContext+0x48>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10b      	bne.n	8009ed6 <vTaskSwitchContext+0x42>
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	607b      	str	r3, [r7, #4]
}
 8009ed0:	bf00      	nop
 8009ed2:	bf00      	nop
 8009ed4:	e7fd      	b.n	8009ed2 <vTaskSwitchContext+0x3e>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	60fb      	str	r3, [r7, #12]
 8009edc:	4925      	ldr	r1, [pc, #148]	@ (8009f74 <vTaskSwitchContext+0xe0>)
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4413      	add	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	440b      	add	r3, r1
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d0e3      	beq.n	8009eb8 <vTaskSwitchContext+0x24>
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4a1e      	ldr	r2, [pc, #120]	@ (8009f74 <vTaskSwitchContext+0xe0>)
 8009efc:	4413      	add	r3, r2
 8009efe:	60bb      	str	r3, [r7, #8]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	685a      	ldr	r2, [r3, #4]
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	605a      	str	r2, [r3, #4]
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	3308      	adds	r3, #8
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d104      	bne.n	8009f20 <vTaskSwitchContext+0x8c>
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	685a      	ldr	r2, [r3, #4]
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	605a      	str	r2, [r3, #4]
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	4a14      	ldr	r2, [pc, #80]	@ (8009f78 <vTaskSwitchContext+0xe4>)
 8009f28:	6013      	str	r3, [r2, #0]
 8009f2a:	4a11      	ldr	r2, [pc, #68]	@ (8009f70 <vTaskSwitchContext+0xdc>)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8009f30:	4b11      	ldr	r3, [pc, #68]	@ (8009f78 <vTaskSwitchContext+0xe4>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	3334      	adds	r3, #52	@ 0x34
 8009f36:	2205      	movs	r2, #5
 8009f38:	4910      	ldr	r1, [pc, #64]	@ (8009f7c <vTaskSwitchContext+0xe8>)
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f003 fbe0 	bl	800d700 <memcmp>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d005      	beq.n	8009f52 <vTaskSwitchContext+0xbe>
 8009f46:	4b0c      	ldr	r3, [pc, #48]	@ (8009f78 <vTaskSwitchContext+0xe4>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f002 feec 	bl	800cd28 <SEGGER_SYSVIEW_OnTaskStartExec>
 8009f50:	e001      	b.n	8009f56 <vTaskSwitchContext+0xc2>
 8009f52:	f002 fe8b 	bl	800cc6c <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f56:	4b08      	ldr	r3, [pc, #32]	@ (8009f78 <vTaskSwitchContext+0xe4>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3354      	adds	r3, #84	@ 0x54
 8009f5c:	4a08      	ldr	r2, [pc, #32]	@ (8009f80 <vTaskSwitchContext+0xec>)
 8009f5e:	6013      	str	r3, [r2, #0]
}
 8009f60:	bf00      	nop
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	20026a58 	.word	0x20026a58
 8009f6c:	20026a44 	.word	0x20026a44
 8009f70:	20026a38 	.word	0x20026a38
 8009f74:	20026560 	.word	0x20026560
 8009f78:	2002655c 	.word	0x2002655c
 8009f7c:	08010450 	.word	0x08010450
 8009f80:	20000234 	.word	0x20000234

08009f84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10b      	bne.n	8009fac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	60fb      	str	r3, [r7, #12]
}
 8009fa6:	bf00      	nop
 8009fa8:	bf00      	nop
 8009faa:	e7fd      	b.n	8009fa8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fac:	4b07      	ldr	r3, [pc, #28]	@ (8009fcc <vTaskPlaceOnEventList+0x48>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	3318      	adds	r3, #24
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7fe f914 	bl	80081e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009fba:	2101      	movs	r1, #1
 8009fbc:	6838      	ldr	r0, [r7, #0]
 8009fbe:	f000 fcaf 	bl	800a920 <prvAddCurrentTaskToDelayedList>
}
 8009fc2:	bf00      	nop
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	2002655c 	.word	0x2002655c

08009fd0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10b      	bne.n	8009ffa <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8009fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	617b      	str	r3, [r7, #20]
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop
 8009ff8:	e7fd      	b.n	8009ff6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009ffa:	4b12      	ldr	r3, [pc, #72]	@ (800a044 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10b      	bne.n	800a01a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	613b      	str	r3, [r7, #16]
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop
 800a018:	e7fd      	b.n	800a016 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a01a:	4b0b      	ldr	r3, [pc, #44]	@ (800a048 <vTaskPlaceOnUnorderedEventList+0x78>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68ba      	ldr	r2, [r7, #8]
 800a020:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a024:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a026:	4b08      	ldr	r3, [pc, #32]	@ (800a048 <vTaskPlaceOnUnorderedEventList+0x78>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3318      	adds	r3, #24
 800a02c:	4619      	mov	r1, r3
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f7fe f8b3 	bl	800819a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a034:	2101      	movs	r1, #1
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fc72 	bl	800a920 <prvAddCurrentTaskToDelayedList>
}
 800a03c:	bf00      	nop
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	20026a58 	.word	0x20026a58
 800a048:	2002655c 	.word	0x2002655c

0800a04c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b086      	sub	sp, #24
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10b      	bne.n	800a076 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	617b      	str	r3, [r7, #20]
}
 800a070:	bf00      	nop
 800a072:	bf00      	nop
 800a074:	e7fd      	b.n	800a072 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a076:	4b0c      	ldr	r3, [pc, #48]	@ (800a0a8 <vTaskPlaceOnEventListRestricted+0x5c>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3318      	adds	r3, #24
 800a07c:	4619      	mov	r1, r3
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f7fe f88b 	bl	800819a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d002      	beq.n	800a090 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a08a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a08e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800a090:	2024      	movs	r0, #36	@ 0x24
 800a092:	f002 f967 	bl	800c364 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a096:	6879      	ldr	r1, [r7, #4]
 800a098:	68b8      	ldr	r0, [r7, #8]
 800a09a:	f000 fc41 	bl	800a920 <prvAddCurrentTaskToDelayedList>
	}
 800a09e:	bf00      	nop
 800a0a0:	3718      	adds	r7, #24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	2002655c 	.word	0x2002655c

0800a0ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10b      	bne.n	800a0da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	60fb      	str	r3, [r7, #12]
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop
 800a0d8:	e7fd      	b.n	800a0d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	3318      	adds	r3, #24
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fe f8b8 	bl	8008254 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0e4:	4b1f      	ldr	r3, [pc, #124]	@ (800a164 <xTaskRemoveFromEventList+0xb8>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d121      	bne.n	800a130 <xTaskRemoveFromEventList+0x84>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7fe f8af 	bl	8008254 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f002 fe57 	bl	800cdac <SEGGER_SYSVIEW_OnTaskStartReady>
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a102:	4b19      	ldr	r3, [pc, #100]	@ (800a168 <xTaskRemoveFromEventList+0xbc>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	429a      	cmp	r2, r3
 800a108:	d903      	bls.n	800a112 <xTaskRemoveFromEventList+0x66>
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a10e:	4a16      	ldr	r2, [pc, #88]	@ (800a168 <xTaskRemoveFromEventList+0xbc>)
 800a110:	6013      	str	r3, [r2, #0]
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a116:	4613      	mov	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4a13      	ldr	r2, [pc, #76]	@ (800a16c <xTaskRemoveFromEventList+0xc0>)
 800a120:	441a      	add	r2, r3
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	3304      	adds	r3, #4
 800a126:	4619      	mov	r1, r3
 800a128:	4610      	mov	r0, r2
 800a12a:	f7fe f836 	bl	800819a <vListInsertEnd>
 800a12e:	e005      	b.n	800a13c <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	3318      	adds	r3, #24
 800a134:	4619      	mov	r1, r3
 800a136:	480e      	ldr	r0, [pc, #56]	@ (800a170 <xTaskRemoveFromEventList+0xc4>)
 800a138:	f7fe f82f 	bl	800819a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a140:	4b0c      	ldr	r3, [pc, #48]	@ (800a174 <xTaskRemoveFromEventList+0xc8>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a146:	429a      	cmp	r2, r3
 800a148:	d905      	bls.n	800a156 <xTaskRemoveFromEventList+0xaa>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a14a:	2301      	movs	r3, #1
 800a14c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a14e:	4b0a      	ldr	r3, [pc, #40]	@ (800a178 <xTaskRemoveFromEventList+0xcc>)
 800a150:	2201      	movs	r2, #1
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	e001      	b.n	800a15a <xTaskRemoveFromEventList+0xae>
	}
	else
	{
		xReturn = pdFALSE;
 800a156:	2300      	movs	r3, #0
 800a158:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a15a:	697b      	ldr	r3, [r7, #20]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3718      	adds	r7, #24
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	20026a58 	.word	0x20026a58
 800a168:	20026a38 	.word	0x20026a38
 800a16c:	20026560 	.word	0x20026560
 800a170:	200269f0 	.word	0x200269f0
 800a174:	2002655c 	.word	0x2002655c
 800a178:	20026a44 	.word	0x20026a44

0800a17c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b086      	sub	sp, #24
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a186:	4b2c      	ldr	r3, [pc, #176]	@ (800a238 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10b      	bne.n	800a1a6 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	613b      	str	r3, [r7, #16]
}
 800a1a0:	bf00      	nop
 800a1a2:	bf00      	nop
 800a1a4:	e7fd      	b.n	800a1a2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10b      	bne.n	800a1d4 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	60fb      	str	r3, [r7, #12]
}
 800a1ce:	bf00      	nop
 800a1d0:	bf00      	nop
 800a1d2:	e7fd      	b.n	800a1d0 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7fe f83d 	bl	8008254 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	3304      	adds	r3, #4
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7fe f838 	bl	8008254 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f002 fde0 	bl	800cdac <SEGGER_SYSVIEW_OnTaskStartReady>
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1f0:	4b12      	ldr	r3, [pc, #72]	@ (800a23c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d903      	bls.n	800a200 <vTaskRemoveFromUnorderedEventList+0x84>
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1fc:	4a0f      	ldr	r2, [pc, #60]	@ (800a23c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a1fe:	6013      	str	r3, [r2, #0]
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a204:	4613      	mov	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4413      	add	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4a0c      	ldr	r2, [pc, #48]	@ (800a240 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800a20e:	441a      	add	r2, r3
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	3304      	adds	r3, #4
 800a214:	4619      	mov	r1, r3
 800a216:	4610      	mov	r0, r2
 800a218:	f7fd ffbf 	bl	800819a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a220:	4b08      	ldr	r3, [pc, #32]	@ (800a244 <vTaskRemoveFromUnorderedEventList+0xc8>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a226:	429a      	cmp	r2, r3
 800a228:	d902      	bls.n	800a230 <vTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a22a:	4b07      	ldr	r3, [pc, #28]	@ (800a248 <vTaskRemoveFromUnorderedEventList+0xcc>)
 800a22c:	2201      	movs	r2, #1
 800a22e:	601a      	str	r2, [r3, #0]
	}
}
 800a230:	bf00      	nop
 800a232:	3718      	adds	r7, #24
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	20026a58 	.word	0x20026a58
 800a23c:	20026a38 	.word	0x20026a38
 800a240:	20026560 	.word	0x20026560
 800a244:	2002655c 	.word	0x2002655c
 800a248:	20026a44 	.word	0x20026a44

0800a24c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a254:	4b06      	ldr	r3, [pc, #24]	@ (800a270 <vTaskInternalSetTimeOutState+0x24>)
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a25c:	4b05      	ldr	r3, [pc, #20]	@ (800a274 <vTaskInternalSetTimeOutState+0x28>)
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	605a      	str	r2, [r3, #4]
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	20026a48 	.word	0x20026a48
 800a274:	20026a34 	.word	0x20026a34

0800a278 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b088      	sub	sp, #32
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10b      	bne.n	800a2a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a28c:	f383 8811 	msr	BASEPRI, r3
 800a290:	f3bf 8f6f 	isb	sy
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	613b      	str	r3, [r7, #16]
}
 800a29a:	bf00      	nop
 800a29c:	bf00      	nop
 800a29e:	e7fd      	b.n	800a29c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10b      	bne.n	800a2be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	60fb      	str	r3, [r7, #12]
}
 800a2b8:	bf00      	nop
 800a2ba:	bf00      	nop
 800a2bc:	e7fd      	b.n	800a2ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a2be:	f001 f91b 	bl	800b4f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a2c2:	4b1d      	ldr	r3, [pc, #116]	@ (800a338 <xTaskCheckForTimeOut+0xc0>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	69ba      	ldr	r2, [r7, #24]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a2da:	d102      	bne.n	800a2e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	61fb      	str	r3, [r7, #28]
 800a2e0:	e023      	b.n	800a32a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	4b15      	ldr	r3, [pc, #84]	@ (800a33c <xTaskCheckForTimeOut+0xc4>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d007      	beq.n	800a2fe <xTaskCheckForTimeOut+0x86>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	69ba      	ldr	r2, [r7, #24]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d302      	bcc.n	800a2fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	61fb      	str	r3, [r7, #28]
 800a2fc:	e015      	b.n	800a32a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	697a      	ldr	r2, [r7, #20]
 800a304:	429a      	cmp	r2, r3
 800a306:	d20b      	bcs.n	800a320 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	1ad2      	subs	r2, r2, r3
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f7ff ff99 	bl	800a24c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a31a:	2300      	movs	r3, #0
 800a31c:	61fb      	str	r3, [r7, #28]
 800a31e:	e004      	b.n	800a32a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a326:	2301      	movs	r3, #1
 800a328:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a32a:	f001 f917 	bl	800b55c <vPortExitCritical>

	return xReturn;
 800a32e:	69fb      	ldr	r3, [r7, #28]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3720      	adds	r7, #32
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	20026a34 	.word	0x20026a34
 800a33c:	20026a48 	.word	0x20026a48

0800a340 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a340:	b480      	push	{r7}
 800a342:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a344:	4b03      	ldr	r3, [pc, #12]	@ (800a354 <vTaskMissedYield+0x14>)
 800a346:	2201      	movs	r2, #1
 800a348:	601a      	str	r2, [r3, #0]
}
 800a34a:	bf00      	nop
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr
 800a354:	20026a44 	.word	0x20026a44

0800a358 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a360:	f000 f852 	bl	800a408 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a364:	4b06      	ldr	r3, [pc, #24]	@ (800a380 <prvIdleTask+0x28>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d9f9      	bls.n	800a360 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a36c:	4b05      	ldr	r3, [pc, #20]	@ (800a384 <prvIdleTask+0x2c>)
 800a36e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a37c:	e7f0      	b.n	800a360 <prvIdleTask+0x8>
 800a37e:	bf00      	nop
 800a380:	20026560 	.word	0x20026560
 800a384:	e000ed04 	.word	0xe000ed04

0800a388 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a38e:	2300      	movs	r3, #0
 800a390:	607b      	str	r3, [r7, #4]
 800a392:	e00c      	b.n	800a3ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	4613      	mov	r3, r2
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	4413      	add	r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4a12      	ldr	r2, [pc, #72]	@ (800a3e8 <prvInitialiseTaskLists+0x60>)
 800a3a0:	4413      	add	r3, r2
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fd fecc 	bl	8008140 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	607b      	str	r3, [r7, #4]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b37      	cmp	r3, #55	@ 0x37
 800a3b2:	d9ef      	bls.n	800a394 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a3b4:	480d      	ldr	r0, [pc, #52]	@ (800a3ec <prvInitialiseTaskLists+0x64>)
 800a3b6:	f7fd fec3 	bl	8008140 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a3ba:	480d      	ldr	r0, [pc, #52]	@ (800a3f0 <prvInitialiseTaskLists+0x68>)
 800a3bc:	f7fd fec0 	bl	8008140 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a3c0:	480c      	ldr	r0, [pc, #48]	@ (800a3f4 <prvInitialiseTaskLists+0x6c>)
 800a3c2:	f7fd febd 	bl	8008140 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a3c6:	480c      	ldr	r0, [pc, #48]	@ (800a3f8 <prvInitialiseTaskLists+0x70>)
 800a3c8:	f7fd feba 	bl	8008140 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a3cc:	480b      	ldr	r0, [pc, #44]	@ (800a3fc <prvInitialiseTaskLists+0x74>)
 800a3ce:	f7fd feb7 	bl	8008140 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a3d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a400 <prvInitialiseTaskLists+0x78>)
 800a3d4:	4a05      	ldr	r2, [pc, #20]	@ (800a3ec <prvInitialiseTaskLists+0x64>)
 800a3d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a3d8:	4b0a      	ldr	r3, [pc, #40]	@ (800a404 <prvInitialiseTaskLists+0x7c>)
 800a3da:	4a05      	ldr	r2, [pc, #20]	@ (800a3f0 <prvInitialiseTaskLists+0x68>)
 800a3dc:	601a      	str	r2, [r3, #0]
}
 800a3de:	bf00      	nop
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20026560 	.word	0x20026560
 800a3ec:	200269c0 	.word	0x200269c0
 800a3f0:	200269d4 	.word	0x200269d4
 800a3f4:	200269f0 	.word	0x200269f0
 800a3f8:	20026a04 	.word	0x20026a04
 800a3fc:	20026a1c 	.word	0x20026a1c
 800a400:	200269e8 	.word	0x200269e8
 800a404:	200269ec 	.word	0x200269ec

0800a408 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a40e:	e019      	b.n	800a444 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a410:	f001 f872 	bl	800b4f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a414:	4b10      	ldr	r3, [pc, #64]	@ (800a458 <prvCheckTasksWaitingTermination+0x50>)
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3304      	adds	r3, #4
 800a420:	4618      	mov	r0, r3
 800a422:	f7fd ff17 	bl	8008254 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a426:	4b0d      	ldr	r3, [pc, #52]	@ (800a45c <prvCheckTasksWaitingTermination+0x54>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	4a0b      	ldr	r2, [pc, #44]	@ (800a45c <prvCheckTasksWaitingTermination+0x54>)
 800a42e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a430:	4b0b      	ldr	r3, [pc, #44]	@ (800a460 <prvCheckTasksWaitingTermination+0x58>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	3b01      	subs	r3, #1
 800a436:	4a0a      	ldr	r2, [pc, #40]	@ (800a460 <prvCheckTasksWaitingTermination+0x58>)
 800a438:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a43a:	f001 f88f 	bl	800b55c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f848 	bl	800a4d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a444:	4b06      	ldr	r3, [pc, #24]	@ (800a460 <prvCheckTasksWaitingTermination+0x58>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1e1      	bne.n	800a410 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a44c:	bf00      	nop
 800a44e:	bf00      	nop
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	20026a04 	.word	0x20026a04
 800a45c:	20026a30 	.word	0x20026a30
 800a460:	20026a18 	.word	0x20026a18

0800a464 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a470:	e005      	b.n	800a47e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	3301      	adds	r3, #1
 800a476:	607b      	str	r3, [r7, #4]
			ulCount++;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	3301      	adds	r3, #1
 800a47c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	2ba5      	cmp	r3, #165	@ 0xa5
 800a484:	d0f5      	beq.n	800a472 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	089b      	lsrs	r3, r3, #2
 800a48a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	b29b      	uxth	r3, r3
	}
 800a490:	4618      	mov	r0, r3
 800a492:	3714      	adds	r7, #20
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b086      	sub	sp, #24
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d102      	bne.n	800a4b0 <uxTaskGetStackHighWaterMark+0x14>
 800a4aa:	4b09      	ldr	r3, [pc, #36]	@ (800a4d0 <uxTaskGetStackHighWaterMark+0x34>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	e000      	b.n	800a4b2 <uxTaskGetStackHighWaterMark+0x16>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4b8:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800a4ba:	6938      	ldr	r0, [r7, #16]
 800a4bc:	f7ff ffd2 	bl	800a464 <prvTaskCheckFreeStackSpace>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
	}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3718      	adds	r7, #24
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	2002655c 	.word	0x2002655c

0800a4d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	3354      	adds	r3, #84	@ 0x54
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f003 f925 	bl	800d730 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d108      	bne.n	800a502 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f001 f9ef 	bl	800b8d8 <vPortFree>
				vPortFree( pxTCB );
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f001 f9ec 	bl	800b8d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a500:	e019      	b.n	800a536 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d103      	bne.n	800a514 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f001 f9e3 	bl	800b8d8 <vPortFree>
	}
 800a512:	e010      	b.n	800a536 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d00b      	beq.n	800a536 <prvDeleteTCB+0x62>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	60fb      	str	r3, [r7, #12]
}
 800a530:	bf00      	nop
 800a532:	bf00      	nop
 800a534:	e7fd      	b.n	800a532 <prvDeleteTCB+0x5e>
	}
 800a536:	bf00      	nop
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
	...

0800a540 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a546:	4b0c      	ldr	r3, [pc, #48]	@ (800a578 <prvResetNextTaskUnblockTime+0x38>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d104      	bne.n	800a55a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a550:	4b0a      	ldr	r3, [pc, #40]	@ (800a57c <prvResetNextTaskUnblockTime+0x3c>)
 800a552:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a556:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a558:	e008      	b.n	800a56c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a55a:	4b07      	ldr	r3, [pc, #28]	@ (800a578 <prvResetNextTaskUnblockTime+0x38>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	4a04      	ldr	r2, [pc, #16]	@ (800a57c <prvResetNextTaskUnblockTime+0x3c>)
 800a56a:	6013      	str	r3, [r2, #0]
}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	200269e8 	.word	0x200269e8
 800a57c:	20026a50 	.word	0x20026a50

0800a580 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a586:	4b05      	ldr	r3, [pc, #20]	@ (800a59c <xTaskGetCurrentTaskHandle+0x1c>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a58c:	687b      	ldr	r3, [r7, #4]
	}
 800a58e:	4618      	mov	r0, r3
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	2002655c 	.word	0x2002655c

0800a5a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a5a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a5d4 <xTaskGetSchedulerState+0x34>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d102      	bne.n	800a5b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	607b      	str	r3, [r7, #4]
 800a5b2:	e008      	b.n	800a5c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5b4:	4b08      	ldr	r3, [pc, #32]	@ (800a5d8 <xTaskGetSchedulerState+0x38>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d102      	bne.n	800a5c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a5bc:	2302      	movs	r3, #2
 800a5be:	607b      	str	r3, [r7, #4]
 800a5c0:	e001      	b.n	800a5c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a5c6:	687b      	ldr	r3, [r7, #4]
	}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr
 800a5d4:	20026a3c 	.word	0x20026a3c
 800a5d8:	20026a58 	.word	0x20026a58

0800a5dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d05a      	beq.n	800a6a8 <xTaskPriorityInherit+0xcc>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5f6:	4b2f      	ldr	r3, [pc, #188]	@ (800a6b4 <xTaskPriorityInherit+0xd8>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d24a      	bcs.n	800a696 <xTaskPriorityInherit+0xba>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	2b00      	cmp	r3, #0
 800a606:	db06      	blt.n	800a616 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a608:	4b2a      	ldr	r3, [pc, #168]	@ (800a6b4 <xTaskPriorityInherit+0xd8>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a60e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	6959      	ldr	r1, [r3, #20]
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a61e:	4613      	mov	r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	4413      	add	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4a24      	ldr	r2, [pc, #144]	@ (800a6b8 <xTaskPriorityInherit+0xdc>)
 800a628:	4413      	add	r3, r2
 800a62a:	4299      	cmp	r1, r3
 800a62c:	d126      	bne.n	800a67c <xTaskPriorityInherit+0xa0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	3304      	adds	r3, #4
 800a632:	4618      	mov	r0, r3
 800a634:	f7fd fe0e 	bl	8008254 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a638:	4b1e      	ldr	r3, [pc, #120]	@ (800a6b4 <xTaskPriorityInherit+0xd8>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	4618      	mov	r0, r3
 800a646:	f002 fbb1 	bl	800cdac <SEGGER_SYSVIEW_OnTaskStartReady>
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a64e:	4b1b      	ldr	r3, [pc, #108]	@ (800a6bc <xTaskPriorityInherit+0xe0>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d903      	bls.n	800a65e <xTaskPriorityInherit+0x82>
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a65a:	4a18      	ldr	r2, [pc, #96]	@ (800a6bc <xTaskPriorityInherit+0xe0>)
 800a65c:	6013      	str	r3, [r2, #0]
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a662:	4613      	mov	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	4413      	add	r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	4a13      	ldr	r2, [pc, #76]	@ (800a6b8 <xTaskPriorityInherit+0xdc>)
 800a66c:	441a      	add	r2, r3
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	3304      	adds	r3, #4
 800a672:	4619      	mov	r1, r3
 800a674:	4610      	mov	r0, r2
 800a676:	f7fd fd90 	bl	800819a <vListInsertEnd>
 800a67a:	e004      	b.n	800a686 <xTaskPriorityInherit+0xaa>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a67c:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b4 <xTaskPriorityInherit+0xd8>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4619      	mov	r1, r3
 800a68a:	2049      	movs	r0, #73	@ 0x49
 800a68c:	f001 fe88 	bl	800c3a0 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a690:	2301      	movs	r3, #1
 800a692:	60fb      	str	r3, [r7, #12]
 800a694:	e008      	b.n	800a6a8 <xTaskPriorityInherit+0xcc>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a69a:	4b06      	ldr	r3, [pc, #24]	@ (800a6b4 <xTaskPriorityInherit+0xd8>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d201      	bcs.n	800a6a8 <xTaskPriorityInherit+0xcc>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
	}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	2002655c 	.word	0x2002655c
 800a6b8:	20026560 	.word	0x20026560
 800a6bc:	20026a38 	.word	0x20026a38

0800a6c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d061      	beq.n	800a79a <xTaskPriorityDisinherit+0xda>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a6d6:	4b33      	ldr	r3, [pc, #204]	@ (800a7a4 <xTaskPriorityDisinherit+0xe4>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	693a      	ldr	r2, [r7, #16]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d00b      	beq.n	800a6f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	60fb      	str	r3, [r7, #12]
}
 800a6f2:	bf00      	nop
 800a6f4:	bf00      	nop
 800a6f6:	e7fd      	b.n	800a6f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d10b      	bne.n	800a718 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a704:	f383 8811 	msr	BASEPRI, r3
 800a708:	f3bf 8f6f 	isb	sy
 800a70c:	f3bf 8f4f 	dsb	sy
 800a710:	60bb      	str	r3, [r7, #8]
}
 800a712:	bf00      	nop
 800a714:	bf00      	nop
 800a716:	e7fd      	b.n	800a714 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a71c:	1e5a      	subs	r2, r3, #1
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d035      	beq.n	800a79a <xTaskPriorityDisinherit+0xda>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a732:	2b00      	cmp	r3, #0
 800a734:	d131      	bne.n	800a79a <xTaskPriorityDisinherit+0xda>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	3304      	adds	r3, #4
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fd fd8a 	bl	8008254 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4619      	mov	r1, r3
 800a744:	204a      	movs	r0, #74	@ 0x4a
 800a746:	f001 fe2b 	bl	800c3a0 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a756:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	4618      	mov	r0, r3
 800a762:	f002 fb23 	bl	800cdac <SEGGER_SYSVIEW_OnTaskStartReady>
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a76a:	4b0f      	ldr	r3, [pc, #60]	@ (800a7a8 <xTaskPriorityDisinherit+0xe8>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d903      	bls.n	800a77a <xTaskPriorityDisinherit+0xba>
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a776:	4a0c      	ldr	r2, [pc, #48]	@ (800a7a8 <xTaskPriorityDisinherit+0xe8>)
 800a778:	6013      	str	r3, [r2, #0]
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a77e:	4613      	mov	r3, r2
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4413      	add	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4a09      	ldr	r2, [pc, #36]	@ (800a7ac <xTaskPriorityDisinherit+0xec>)
 800a788:	441a      	add	r2, r3
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	3304      	adds	r3, #4
 800a78e:	4619      	mov	r1, r3
 800a790:	4610      	mov	r0, r2
 800a792:	f7fd fd02 	bl	800819a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a796:	2301      	movs	r3, #1
 800a798:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a79a:	697b      	ldr	r3, [r7, #20]
	}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3718      	adds	r7, #24
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	2002655c 	.word	0x2002655c
 800a7a8:	20026a38 	.word	0x20026a38
 800a7ac:	20026560 	.word	0x20026560

0800a7b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b088      	sub	sp, #32
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d075      	beq.n	800a8b4 <vTaskPriorityDisinheritAfterTimeout+0x104>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10b      	bne.n	800a7e8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	60fb      	str	r3, [r7, #12]
}
 800a7e2:	bf00      	nop
 800a7e4:	bf00      	nop
 800a7e6:	e7fd      	b.n	800a7e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7ec:	683a      	ldr	r2, [r7, #0]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d902      	bls.n	800a7f8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	61fb      	str	r3, [r7, #28]
 800a7f6:	e002      	b.n	800a7fe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7fc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a802:	69fa      	ldr	r2, [r7, #28]
 800a804:	429a      	cmp	r2, r3
 800a806:	d055      	beq.n	800a8b4 <vTaskPriorityDisinheritAfterTimeout+0x104>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a80c:	697a      	ldr	r2, [r7, #20]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d150      	bne.n	800a8b4 <vTaskPriorityDisinheritAfterTimeout+0x104>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a812:	4b2a      	ldr	r3, [pc, #168]	@ (800a8bc <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	69ba      	ldr	r2, [r7, #24]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d10b      	bne.n	800a834 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	60bb      	str	r3, [r7, #8]
}
 800a82e:	bf00      	nop
 800a830:	bf00      	nop
 800a832:	e7fd      	b.n	800a830 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4619      	mov	r1, r3
 800a838:	204a      	movs	r0, #74	@ 0x4a
 800a83a:	f001 fdb1 	bl	800c3a0 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a842:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	69fa      	ldr	r2, [r7, #28]
 800a848:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	db04      	blt.n	800a85c <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	6959      	ldr	r1, [r3, #20]
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	4613      	mov	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	4413      	add	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	4a15      	ldr	r2, [pc, #84]	@ (800a8c0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800a86c:	4413      	add	r3, r2
 800a86e:	4299      	cmp	r1, r3
 800a870:	d120      	bne.n	800a8b4 <vTaskPriorityDisinheritAfterTimeout+0x104>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	3304      	adds	r3, #4
 800a876:	4618      	mov	r0, r3
 800a878:	f7fd fcec 	bl	8008254 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	4618      	mov	r0, r3
 800a880:	f002 fa94 	bl	800cdac <SEGGER_SYSVIEW_OnTaskStartReady>
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a888:	4b0e      	ldr	r3, [pc, #56]	@ (800a8c4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d903      	bls.n	800a898 <vTaskPriorityDisinheritAfterTimeout+0xe8>
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a894:	4a0b      	ldr	r2, [pc, #44]	@ (800a8c4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a896:	6013      	str	r3, [r2, #0]
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a89c:	4613      	mov	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4a06      	ldr	r2, [pc, #24]	@ (800a8c0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800a8a6:	441a      	add	r2, r3
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	3304      	adds	r3, #4
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4610      	mov	r0, r2
 800a8b0:	f7fd fc73 	bl	800819a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a8b4:	bf00      	nop
 800a8b6:	3720      	adds	r7, #32
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	2002655c 	.word	0x2002655c
 800a8c0:	20026560 	.word	0x20026560
 800a8c4:	20026a38 	.word	0x20026a38

0800a8c8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a8ce:	4b09      	ldr	r3, [pc, #36]	@ (800a8f4 <uxTaskResetEventItemValue+0x2c>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	699b      	ldr	r3, [r3, #24]
 800a8d4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8d6:	4b07      	ldr	r3, [pc, #28]	@ (800a8f4 <uxTaskResetEventItemValue+0x2c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8dc:	4b05      	ldr	r3, [pc, #20]	@ (800a8f4 <uxTaskResetEventItemValue+0x2c>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800a8e4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a8e6:	687b      	ldr	r3, [r7, #4]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	2002655c 	.word	0x2002655c

0800a8f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a8f8:	b480      	push	{r7}
 800a8fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a8fc:	4b07      	ldr	r3, [pc, #28]	@ (800a91c <pvTaskIncrementMutexHeldCount+0x24>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d004      	beq.n	800a90e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a904:	4b05      	ldr	r3, [pc, #20]	@ (800a91c <pvTaskIncrementMutexHeldCount+0x24>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a90a:	3201      	adds	r2, #1
 800a90c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a90e:	4b03      	ldr	r3, [pc, #12]	@ (800a91c <pvTaskIncrementMutexHeldCount+0x24>)
 800a910:	681b      	ldr	r3, [r3, #0]
	}
 800a912:	4618      	mov	r0, r3
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	2002655c 	.word	0x2002655c

0800a920 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a92a:	4b21      	ldr	r3, [pc, #132]	@ (800a9b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a930:	4b20      	ldr	r3, [pc, #128]	@ (800a9b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3304      	adds	r3, #4
 800a936:	4618      	mov	r0, r3
 800a938:	f7fd fc8c 	bl	8008254 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a942:	d10a      	bne.n	800a95a <prvAddCurrentTaskToDelayedList+0x3a>
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d007      	beq.n	800a95a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a94a:	4b1a      	ldr	r3, [pc, #104]	@ (800a9b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3304      	adds	r3, #4
 800a950:	4619      	mov	r1, r3
 800a952:	4819      	ldr	r0, [pc, #100]	@ (800a9b8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a954:	f7fd fc21 	bl	800819a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a958:	e026      	b.n	800a9a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4413      	add	r3, r2
 800a960:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a962:	4b14      	ldr	r3, [pc, #80]	@ (800a9b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d209      	bcs.n	800a986 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a972:	4b12      	ldr	r3, [pc, #72]	@ (800a9bc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	4b0f      	ldr	r3, [pc, #60]	@ (800a9b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	3304      	adds	r3, #4
 800a97c:	4619      	mov	r1, r3
 800a97e:	4610      	mov	r0, r2
 800a980:	f7fd fc2f 	bl	80081e2 <vListInsert>
}
 800a984:	e010      	b.n	800a9a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a986:	4b0e      	ldr	r3, [pc, #56]	@ (800a9c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	4b0a      	ldr	r3, [pc, #40]	@ (800a9b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3304      	adds	r3, #4
 800a990:	4619      	mov	r1, r3
 800a992:	4610      	mov	r0, r2
 800a994:	f7fd fc25 	bl	80081e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a998:	4b0a      	ldr	r3, [pc, #40]	@ (800a9c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d202      	bcs.n	800a9a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a9a2:	4a08      	ldr	r2, [pc, #32]	@ (800a9c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	6013      	str	r3, [r2, #0]
}
 800a9a8:	bf00      	nop
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	20026a34 	.word	0x20026a34
 800a9b4:	2002655c 	.word	0x2002655c
 800a9b8:	20026a1c 	.word	0x20026a1c
 800a9bc:	200269ec 	.word	0x200269ec
 800a9c0:	200269e8 	.word	0x200269e8
 800a9c4:	20026a50 	.word	0x20026a50

0800a9c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b08a      	sub	sp, #40	@ 0x28
 800a9cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a9d2:	f000 fbb1 	bl	800b138 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a9d6:	4b1d      	ldr	r3, [pc, #116]	@ (800aa4c <xTimerCreateTimerTask+0x84>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d021      	beq.n	800aa22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a9e6:	1d3a      	adds	r2, r7, #4
 800a9e8:	f107 0108 	add.w	r1, r7, #8
 800a9ec:	f107 030c 	add.w	r3, r7, #12
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7fd f917 	bl	8007c24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a9f6:	6879      	ldr	r1, [r7, #4]
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	68fa      	ldr	r2, [r7, #12]
 800a9fc:	9202      	str	r2, [sp, #8]
 800a9fe:	9301      	str	r3, [sp, #4]
 800aa00:	2302      	movs	r3, #2
 800aa02:	9300      	str	r3, [sp, #0]
 800aa04:	2300      	movs	r3, #0
 800aa06:	460a      	mov	r2, r1
 800aa08:	4911      	ldr	r1, [pc, #68]	@ (800aa50 <xTimerCreateTimerTask+0x88>)
 800aa0a:	4812      	ldr	r0, [pc, #72]	@ (800aa54 <xTimerCreateTimerTask+0x8c>)
 800aa0c:	f7fe fe18 	bl	8009640 <xTaskCreateStatic>
 800aa10:	4603      	mov	r3, r0
 800aa12:	4a11      	ldr	r2, [pc, #68]	@ (800aa58 <xTimerCreateTimerTask+0x90>)
 800aa14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aa16:	4b10      	ldr	r3, [pc, #64]	@ (800aa58 <xTimerCreateTimerTask+0x90>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10b      	bne.n	800aa40 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800aa28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa2c:	f383 8811 	msr	BASEPRI, r3
 800aa30:	f3bf 8f6f 	isb	sy
 800aa34:	f3bf 8f4f 	dsb	sy
 800aa38:	613b      	str	r3, [r7, #16]
}
 800aa3a:	bf00      	nop
 800aa3c:	bf00      	nop
 800aa3e:	e7fd      	b.n	800aa3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aa40:	697b      	ldr	r3, [r7, #20]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3718      	adds	r7, #24
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	20026a8c 	.word	0x20026a8c
 800aa50:	08010458 	.word	0x08010458
 800aa54:	0800acd1 	.word	0x0800acd1
 800aa58:	20026a90 	.word	0x20026a90

0800aa5c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b088      	sub	sp, #32
 800aa60:	af02      	add	r7, sp, #8
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	607a      	str	r2, [r7, #4]
 800aa68:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800aa6a:	202c      	movs	r0, #44	@ 0x2c
 800aa6c:	f000 fe66 	bl	800b73c <pvPortMalloc>
 800aa70:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00d      	beq.n	800aa94 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	9301      	str	r3, [sp, #4]
 800aa84:	6a3b      	ldr	r3, [r7, #32]
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	68b9      	ldr	r1, [r7, #8]
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f000 f845 	bl	800ab1e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800aa94:	697b      	ldr	r3, [r7, #20]
	}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b08a      	sub	sp, #40	@ 0x28
 800aaa2:	af02      	add	r7, sp, #8
 800aaa4:	60f8      	str	r0, [r7, #12]
 800aaa6:	60b9      	str	r1, [r7, #8]
 800aaa8:	607a      	str	r2, [r7, #4]
 800aaaa:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800aaac:	232c      	movs	r3, #44	@ 0x2c
 800aaae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	2b2c      	cmp	r3, #44	@ 0x2c
 800aab4:	d00b      	beq.n	800aace <xTimerCreateStatic+0x30>
	__asm volatile
 800aab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaba:	f383 8811 	msr	BASEPRI, r3
 800aabe:	f3bf 8f6f 	isb	sy
 800aac2:	f3bf 8f4f 	dsb	sy
 800aac6:	61bb      	str	r3, [r7, #24]
}
 800aac8:	bf00      	nop
 800aaca:	bf00      	nop
 800aacc:	e7fd      	b.n	800aaca <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aace:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800aad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10b      	bne.n	800aaee <xTimerCreateStatic+0x50>
	__asm volatile
 800aad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aada:	f383 8811 	msr	BASEPRI, r3
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	617b      	str	r3, [r7, #20]
}
 800aae8:	bf00      	nop
 800aaea:	bf00      	nop
 800aaec:	e7fd      	b.n	800aaea <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800aaee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00d      	beq.n	800ab14 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	2202      	movs	r2, #2
 800aafc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	9301      	str	r3, [sp, #4]
 800ab04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	68b9      	ldr	r1, [r7, #8]
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f000 f805 	bl	800ab1e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ab14:	69fb      	ldr	r3, [r7, #28]
	}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3720      	adds	r7, #32
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b086      	sub	sp, #24
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	60f8      	str	r0, [r7, #12]
 800ab26:	60b9      	str	r1, [r7, #8]
 800ab28:	607a      	str	r2, [r7, #4]
 800ab2a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d10b      	bne.n	800ab4a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800ab32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab36:	f383 8811 	msr	BASEPRI, r3
 800ab3a:	f3bf 8f6f 	isb	sy
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	617b      	str	r3, [r7, #20]
}
 800ab44:	bf00      	nop
 800ab46:	bf00      	nop
 800ab48:	e7fd      	b.n	800ab46 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d01e      	beq.n	800ab8e <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ab50:	f000 faf2 	bl	800b138 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ab54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5c:	68ba      	ldr	r2, [r7, #8]
 800ab5e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ab60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ab66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab68:	6a3a      	ldr	r2, [r7, #32]
 800ab6a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6e:	3304      	adds	r3, #4
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7fd fb05 	bl	8008180 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d008      	beq.n	800ab8e <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab82:	f043 0304 	orr.w	r3, r3, #4
 800ab86:	b2da      	uxtb	r2, r3
 800ab88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ab8e:	bf00      	nop
 800ab90:	3718      	adds	r7, #24
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
	...

0800ab98 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b08a      	sub	sp, #40	@ 0x28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
 800aba4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aba6:	2300      	movs	r3, #0
 800aba8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d10b      	bne.n	800abc8 <xTimerGenericCommand+0x30>
	__asm volatile
 800abb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb4:	f383 8811 	msr	BASEPRI, r3
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	623b      	str	r3, [r7, #32]
}
 800abc2:	bf00      	nop
 800abc4:	bf00      	nop
 800abc6:	e7fd      	b.n	800abc4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800abc8:	4b19      	ldr	r3, [pc, #100]	@ (800ac30 <xTimerGenericCommand+0x98>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d02a      	beq.n	800ac26 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	2b05      	cmp	r3, #5
 800abe0:	dc18      	bgt.n	800ac14 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800abe2:	f7ff fcdd 	bl	800a5a0 <xTaskGetSchedulerState>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d109      	bne.n	800ac00 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800abec:	4b10      	ldr	r3, [pc, #64]	@ (800ac30 <xTimerGenericCommand+0x98>)
 800abee:	6818      	ldr	r0, [r3, #0]
 800abf0:	f107 0110 	add.w	r1, r7, #16
 800abf4:	2300      	movs	r3, #0
 800abf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abf8:	f7fd fdc8 	bl	800878c <xQueueGenericSend>
 800abfc:	6278      	str	r0, [r7, #36]	@ 0x24
 800abfe:	e012      	b.n	800ac26 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac00:	4b0b      	ldr	r3, [pc, #44]	@ (800ac30 <xTimerGenericCommand+0x98>)
 800ac02:	6818      	ldr	r0, [r3, #0]
 800ac04:	f107 0110 	add.w	r1, r7, #16
 800ac08:	2300      	movs	r3, #0
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f7fd fdbe 	bl	800878c <xQueueGenericSend>
 800ac10:	6278      	str	r0, [r7, #36]	@ 0x24
 800ac12:	e008      	b.n	800ac26 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac14:	4b06      	ldr	r3, [pc, #24]	@ (800ac30 <xTimerGenericCommand+0x98>)
 800ac16:	6818      	ldr	r0, [r3, #0]
 800ac18:	f107 0110 	add.w	r1, r7, #16
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	f7fd fede 	bl	80089e0 <xQueueGenericSendFromISR>
 800ac24:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3728      	adds	r7, #40	@ 0x28
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	20026a8c 	.word	0x20026a8c

0800ac34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b088      	sub	sp, #32
 800ac38:	af02      	add	r7, sp, #8
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac3e:	4b23      	ldr	r3, [pc, #140]	@ (800accc <prvProcessExpiredTimer+0x98>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	3304      	adds	r3, #4
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7fd fb01 	bl	8008254 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac58:	f003 0304 	and.w	r3, r3, #4
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d023      	beq.n	800aca8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	699a      	ldr	r2, [r3, #24]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	18d1      	adds	r1, r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	6978      	ldr	r0, [r7, #20]
 800ac6e:	f000 f8d5 	bl	800ae1c <prvInsertTimerInActiveList>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d020      	beq.n	800acba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac78:	2300      	movs	r3, #0
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	2100      	movs	r1, #0
 800ac82:	6978      	ldr	r0, [r7, #20]
 800ac84:	f7ff ff88 	bl	800ab98 <xTimerGenericCommand>
 800ac88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d114      	bne.n	800acba <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	60fb      	str	r3, [r7, #12]
}
 800aca2:	bf00      	nop
 800aca4:	bf00      	nop
 800aca6:	e7fd      	b.n	800aca4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acae:	f023 0301 	bic.w	r3, r3, #1
 800acb2:	b2da      	uxtb	r2, r3
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	6a1b      	ldr	r3, [r3, #32]
 800acbe:	6978      	ldr	r0, [r7, #20]
 800acc0:	4798      	blx	r3
}
 800acc2:	bf00      	nop
 800acc4:	3718      	adds	r7, #24
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	20026a84 	.word	0x20026a84

0800acd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acd8:	f107 0308 	add.w	r3, r7, #8
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 f859 	bl	800ad94 <prvGetNextExpireTime>
 800ace2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	4619      	mov	r1, r3
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f000 f805 	bl	800acf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800acee:	f000 f8d7 	bl	800aea0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acf2:	bf00      	nop
 800acf4:	e7f0      	b.n	800acd8 <prvTimerTask+0x8>
	...

0800acf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ad02:	f7fe ff37 	bl	8009b74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad06:	f107 0308 	add.w	r3, r7, #8
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f000 f866 	bl	800addc <prvSampleTimeNow>
 800ad10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d130      	bne.n	800ad7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d10a      	bne.n	800ad34 <prvProcessTimerOrBlockTask+0x3c>
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d806      	bhi.n	800ad34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad26:	f7fe ff33 	bl	8009b90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad2a:	68f9      	ldr	r1, [r7, #12]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f7ff ff81 	bl	800ac34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad32:	e024      	b.n	800ad7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d008      	beq.n	800ad4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad3a:	4b13      	ldr	r3, [pc, #76]	@ (800ad88 <prvProcessTimerOrBlockTask+0x90>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d101      	bne.n	800ad48 <prvProcessTimerOrBlockTask+0x50>
 800ad44:	2301      	movs	r3, #1
 800ad46:	e000      	b.n	800ad4a <prvProcessTimerOrBlockTask+0x52>
 800ad48:	2300      	movs	r3, #0
 800ad4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad4c:	4b0f      	ldr	r3, [pc, #60]	@ (800ad8c <prvProcessTimerOrBlockTask+0x94>)
 800ad4e:	6818      	ldr	r0, [r3, #0]
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	1ad3      	subs	r3, r2, r3
 800ad56:	683a      	ldr	r2, [r7, #0]
 800ad58:	4619      	mov	r1, r3
 800ad5a:	f7fe fc3d 	bl	80095d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ad5e:	f7fe ff17 	bl	8009b90 <xTaskResumeAll>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10a      	bne.n	800ad7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ad68:	4b09      	ldr	r3, [pc, #36]	@ (800ad90 <prvProcessTimerOrBlockTask+0x98>)
 800ad6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad6e:	601a      	str	r2, [r3, #0]
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	f3bf 8f6f 	isb	sy
}
 800ad78:	e001      	b.n	800ad7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ad7a:	f7fe ff09 	bl	8009b90 <xTaskResumeAll>
}
 800ad7e:	bf00      	nop
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	20026a88 	.word	0x20026a88
 800ad8c:	20026a8c 	.word	0x20026a8c
 800ad90:	e000ed04 	.word	0xe000ed04

0800ad94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad9c:	4b0e      	ldr	r3, [pc, #56]	@ (800add8 <prvGetNextExpireTime+0x44>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d101      	bne.n	800adaa <prvGetNextExpireTime+0x16>
 800ada6:	2201      	movs	r2, #1
 800ada8:	e000      	b.n	800adac <prvGetNextExpireTime+0x18>
 800adaa:	2200      	movs	r2, #0
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d105      	bne.n	800adc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800adb8:	4b07      	ldr	r3, [pc, #28]	@ (800add8 <prvGetNextExpireTime+0x44>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	60fb      	str	r3, [r7, #12]
 800adc2:	e001      	b.n	800adc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800adc4:	2300      	movs	r3, #0
 800adc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800adc8:	68fb      	ldr	r3, [r7, #12]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3714      	adds	r7, #20
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	20026a84 	.word	0x20026a84

0800addc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ade4:	f7fe ff76 	bl	8009cd4 <xTaskGetTickCount>
 800ade8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800adea:	4b0b      	ldr	r3, [pc, #44]	@ (800ae18 <prvSampleTimeNow+0x3c>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d205      	bcs.n	800ae00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800adf4:	f000 f93a 	bl	800b06c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2201      	movs	r2, #1
 800adfc:	601a      	str	r2, [r3, #0]
 800adfe:	e002      	b.n	800ae06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ae06:	4a04      	ldr	r2, [pc, #16]	@ (800ae18 <prvSampleTimeNow+0x3c>)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20026a94 	.word	0x20026a94

0800ae1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b086      	sub	sp, #24
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
 800ae28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae3a:	68ba      	ldr	r2, [r7, #8]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d812      	bhi.n	800ae68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	1ad2      	subs	r2, r2, r3
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	699b      	ldr	r3, [r3, #24]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d302      	bcc.n	800ae56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ae50:	2301      	movs	r3, #1
 800ae52:	617b      	str	r3, [r7, #20]
 800ae54:	e01b      	b.n	800ae8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae56:	4b10      	ldr	r3, [pc, #64]	@ (800ae98 <prvInsertTimerInActiveList+0x7c>)
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	4619      	mov	r1, r3
 800ae60:	4610      	mov	r0, r2
 800ae62:	f7fd f9be 	bl	80081e2 <vListInsert>
 800ae66:	e012      	b.n	800ae8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d206      	bcs.n	800ae7e <prvInsertTimerInActiveList+0x62>
 800ae70:	68ba      	ldr	r2, [r7, #8]
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d302      	bcc.n	800ae7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	617b      	str	r3, [r7, #20]
 800ae7c:	e007      	b.n	800ae8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae7e:	4b07      	ldr	r3, [pc, #28]	@ (800ae9c <prvInsertTimerInActiveList+0x80>)
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	3304      	adds	r3, #4
 800ae86:	4619      	mov	r1, r3
 800ae88:	4610      	mov	r0, r2
 800ae8a:	f7fd f9aa 	bl	80081e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ae8e:	697b      	ldr	r3, [r7, #20]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3718      	adds	r7, #24
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	20026a88 	.word	0x20026a88
 800ae9c:	20026a84 	.word	0x20026a84

0800aea0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b08e      	sub	sp, #56	@ 0x38
 800aea4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aea6:	e0ce      	b.n	800b046 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	da19      	bge.n	800aee2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aeae:	1d3b      	adds	r3, r7, #4
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aeb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d10b      	bne.n	800aed2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800aeba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aebe:	f383 8811 	msr	BASEPRI, r3
 800aec2:	f3bf 8f6f 	isb	sy
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	61fb      	str	r3, [r7, #28]
}
 800aecc:	bf00      	nop
 800aece:	bf00      	nop
 800aed0:	e7fd      	b.n	800aece <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aed8:	6850      	ldr	r0, [r2, #4]
 800aeda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aedc:	6892      	ldr	r2, [r2, #8]
 800aede:	4611      	mov	r1, r2
 800aee0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f2c0 80ae 	blt.w	800b046 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aeee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef0:	695b      	ldr	r3, [r3, #20]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d004      	beq.n	800af00 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef8:	3304      	adds	r3, #4
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fd f9aa 	bl	8008254 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af00:	463b      	mov	r3, r7
 800af02:	4618      	mov	r0, r3
 800af04:	f7ff ff6a 	bl	800addc <prvSampleTimeNow>
 800af08:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2b09      	cmp	r3, #9
 800af0e:	f200 8097 	bhi.w	800b040 <prvProcessReceivedCommands+0x1a0>
 800af12:	a201      	add	r2, pc, #4	@ (adr r2, 800af18 <prvProcessReceivedCommands+0x78>)
 800af14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af18:	0800af41 	.word	0x0800af41
 800af1c:	0800af41 	.word	0x0800af41
 800af20:	0800af41 	.word	0x0800af41
 800af24:	0800afb7 	.word	0x0800afb7
 800af28:	0800afcb 	.word	0x0800afcb
 800af2c:	0800b017 	.word	0x0800b017
 800af30:	0800af41 	.word	0x0800af41
 800af34:	0800af41 	.word	0x0800af41
 800af38:	0800afb7 	.word	0x0800afb7
 800af3c:	0800afcb 	.word	0x0800afcb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af46:	f043 0301 	orr.w	r3, r3, #1
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af52:	68ba      	ldr	r2, [r7, #8]
 800af54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af56:	699b      	ldr	r3, [r3, #24]
 800af58:	18d1      	adds	r1, r2, r3
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af60:	f7ff ff5c 	bl	800ae1c <prvInsertTimerInActiveList>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d06c      	beq.n	800b044 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af6c:	6a1b      	ldr	r3, [r3, #32]
 800af6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af78:	f003 0304 	and.w	r3, r3, #4
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d061      	beq.n	800b044 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800af80:	68ba      	ldr	r2, [r7, #8]
 800af82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	441a      	add	r2, r3
 800af88:	2300      	movs	r3, #0
 800af8a:	9300      	str	r3, [sp, #0]
 800af8c:	2300      	movs	r3, #0
 800af8e:	2100      	movs	r1, #0
 800af90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af92:	f7ff fe01 	bl	800ab98 <xTimerGenericCommand>
 800af96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800af98:	6a3b      	ldr	r3, [r7, #32]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d152      	bne.n	800b044 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800af9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa2:	f383 8811 	msr	BASEPRI, r3
 800afa6:	f3bf 8f6f 	isb	sy
 800afaa:	f3bf 8f4f 	dsb	sy
 800afae:	61bb      	str	r3, [r7, #24]
}
 800afb0:	bf00      	nop
 800afb2:	bf00      	nop
 800afb4:	e7fd      	b.n	800afb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afbc:	f023 0301 	bic.w	r3, r3, #1
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800afc8:	e03d      	b.n	800b046 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afd0:	f043 0301 	orr.w	r3, r3, #1
 800afd4:	b2da      	uxtb	r2, r3
 800afd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800afdc:	68ba      	ldr	r2, [r7, #8]
 800afde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800afe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10b      	bne.n	800b002 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800afea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afee:	f383 8811 	msr	BASEPRI, r3
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	f3bf 8f4f 	dsb	sy
 800affa:	617b      	str	r3, [r7, #20]
}
 800affc:	bf00      	nop
 800affe:	bf00      	nop
 800b000:	e7fd      	b.n	800affe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b004:	699a      	ldr	r2, [r3, #24]
 800b006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b008:	18d1      	adds	r1, r2, r3
 800b00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b00c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b00e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b010:	f7ff ff04 	bl	800ae1c <prvInsertTimerInActiveList>
					break;
 800b014:	e017      	b.n	800b046 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b018:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b01c:	f003 0302 	and.w	r3, r3, #2
 800b020:	2b00      	cmp	r3, #0
 800b022:	d103      	bne.n	800b02c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b024:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b026:	f000 fc57 	bl	800b8d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b02a:	e00c      	b.n	800b046 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b02e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b032:	f023 0301 	bic.w	r3, r3, #1
 800b036:	b2da      	uxtb	r2, r3
 800b038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b03a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b03e:	e002      	b.n	800b046 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b040:	bf00      	nop
 800b042:	e000      	b.n	800b046 <prvProcessReceivedCommands+0x1a6>
					break;
 800b044:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b046:	4b08      	ldr	r3, [pc, #32]	@ (800b068 <prvProcessReceivedCommands+0x1c8>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	1d39      	adds	r1, r7, #4
 800b04c:	2200      	movs	r2, #0
 800b04e:	4618      	mov	r0, r3
 800b050:	f7fd fe1c 	bl	8008c8c <xQueueReceive>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	f47f af26 	bne.w	800aea8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b05c:	bf00      	nop
 800b05e:	bf00      	nop
 800b060:	3730      	adds	r7, #48	@ 0x30
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20026a8c 	.word	0x20026a8c

0800b06c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b088      	sub	sp, #32
 800b070:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b072:	e049      	b.n	800b108 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b074:	4b2e      	ldr	r3, [pc, #184]	@ (800b130 <prvSwitchTimerLists+0xc4>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b07e:	4b2c      	ldr	r3, [pc, #176]	@ (800b130 <prvSwitchTimerLists+0xc4>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	3304      	adds	r3, #4
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7fd f8e1 	bl	8008254 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	68f8      	ldr	r0, [r7, #12]
 800b098:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0a0:	f003 0304 	and.w	r3, r3, #4
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d02f      	beq.n	800b108 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	699b      	ldr	r3, [r3, #24]
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b0b2:	68ba      	ldr	r2, [r7, #8]
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d90e      	bls.n	800b0d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	68ba      	ldr	r2, [r7, #8]
 800b0be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0c6:	4b1a      	ldr	r3, [pc, #104]	@ (800b130 <prvSwitchTimerLists+0xc4>)
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	3304      	adds	r3, #4
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	f7fd f886 	bl	80081e2 <vListInsert>
 800b0d6:	e017      	b.n	800b108 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0d8:	2300      	movs	r3, #0
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	2300      	movs	r3, #0
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	68f8      	ldr	r0, [r7, #12]
 800b0e4:	f7ff fd58 	bl	800ab98 <xTimerGenericCommand>
 800b0e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d10b      	bne.n	800b108 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0f4:	f383 8811 	msr	BASEPRI, r3
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	603b      	str	r3, [r7, #0]
}
 800b102:	bf00      	nop
 800b104:	bf00      	nop
 800b106:	e7fd      	b.n	800b104 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b108:	4b09      	ldr	r3, [pc, #36]	@ (800b130 <prvSwitchTimerLists+0xc4>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1b0      	bne.n	800b074 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b112:	4b07      	ldr	r3, [pc, #28]	@ (800b130 <prvSwitchTimerLists+0xc4>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b118:	4b06      	ldr	r3, [pc, #24]	@ (800b134 <prvSwitchTimerLists+0xc8>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a04      	ldr	r2, [pc, #16]	@ (800b130 <prvSwitchTimerLists+0xc4>)
 800b11e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b120:	4a04      	ldr	r2, [pc, #16]	@ (800b134 <prvSwitchTimerLists+0xc8>)
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	6013      	str	r3, [r2, #0]
}
 800b126:	bf00      	nop
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	20026a84 	.word	0x20026a84
 800b134:	20026a88 	.word	0x20026a88

0800b138 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b13e:	f000 f9db 	bl	800b4f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b142:	4b15      	ldr	r3, [pc, #84]	@ (800b198 <prvCheckForValidListAndQueue+0x60>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d120      	bne.n	800b18c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b14a:	4814      	ldr	r0, [pc, #80]	@ (800b19c <prvCheckForValidListAndQueue+0x64>)
 800b14c:	f7fc fff8 	bl	8008140 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b150:	4813      	ldr	r0, [pc, #76]	@ (800b1a0 <prvCheckForValidListAndQueue+0x68>)
 800b152:	f7fc fff5 	bl	8008140 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b156:	4b13      	ldr	r3, [pc, #76]	@ (800b1a4 <prvCheckForValidListAndQueue+0x6c>)
 800b158:	4a10      	ldr	r2, [pc, #64]	@ (800b19c <prvCheckForValidListAndQueue+0x64>)
 800b15a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b15c:	4b12      	ldr	r3, [pc, #72]	@ (800b1a8 <prvCheckForValidListAndQueue+0x70>)
 800b15e:	4a10      	ldr	r2, [pc, #64]	@ (800b1a0 <prvCheckForValidListAndQueue+0x68>)
 800b160:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b162:	2300      	movs	r3, #0
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	4b11      	ldr	r3, [pc, #68]	@ (800b1ac <prvCheckForValidListAndQueue+0x74>)
 800b168:	4a11      	ldr	r2, [pc, #68]	@ (800b1b0 <prvCheckForValidListAndQueue+0x78>)
 800b16a:	2110      	movs	r1, #16
 800b16c:	200a      	movs	r0, #10
 800b16e:	f7fd f905 	bl	800837c <xQueueGenericCreateStatic>
 800b172:	4603      	mov	r3, r0
 800b174:	4a08      	ldr	r2, [pc, #32]	@ (800b198 <prvCheckForValidListAndQueue+0x60>)
 800b176:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b178:	4b07      	ldr	r3, [pc, #28]	@ (800b198 <prvCheckForValidListAndQueue+0x60>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d005      	beq.n	800b18c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b180:	4b05      	ldr	r3, [pc, #20]	@ (800b198 <prvCheckForValidListAndQueue+0x60>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	490b      	ldr	r1, [pc, #44]	@ (800b1b4 <prvCheckForValidListAndQueue+0x7c>)
 800b186:	4618      	mov	r0, r3
 800b188:	f7fe f9ca 	bl	8009520 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b18c:	f000 f9e6 	bl	800b55c <vPortExitCritical>
}
 800b190:	bf00      	nop
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	20026a8c 	.word	0x20026a8c
 800b19c:	20026a5c 	.word	0x20026a5c
 800b1a0:	20026a70 	.word	0x20026a70
 800b1a4:	20026a84 	.word	0x20026a84
 800b1a8:	20026a88 	.word	0x20026a88
 800b1ac:	20026b38 	.word	0x20026b38
 800b1b0:	20026a98 	.word	0x20026a98
 800b1b4:	08010460 	.word	0x08010460

0800b1b8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10b      	bne.n	800b1e2 <xTimerIsTimerActive+0x2a>
	__asm volatile
 800b1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	60fb      	str	r3, [r7, #12]
}
 800b1dc:	bf00      	nop
 800b1de:	bf00      	nop
 800b1e0:	e7fd      	b.n	800b1de <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800b1e2:	f000 f989 	bl	800b4f8 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1ec:	f003 0301 	and.w	r3, r3, #1
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d102      	bne.n	800b1fa <xTimerIsTimerActive+0x42>
		{
			xReturn = pdFALSE;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	617b      	str	r3, [r7, #20]
 800b1f8:	e001      	b.n	800b1fe <xTimerIsTimerActive+0x46>
		}
		else
		{
			xReturn = pdTRUE;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800b1fe:	f000 f9ad 	bl	800b55c <vPortExitCritical>

	return xReturn;
 800b202:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800b204:	4618      	mov	r0, r3
 800b206:	3718      	adds	r7, #24
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10b      	bne.n	800b236 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	60fb      	str	r3, [r7, #12]
}
 800b230:	bf00      	nop
 800b232:	bf00      	nop
 800b234:	e7fd      	b.n	800b232 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800b236:	f000 f95f 	bl	800b4f8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	69db      	ldr	r3, [r3, #28]
 800b23e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b240:	f000 f98c 	bl	800b55c <vPortExitCritical>

	return pvReturn;
 800b244:	693b      	ldr	r3, [r7, #16]
}
 800b246:	4618      	mov	r0, r3
 800b248:	3718      	adds	r7, #24
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
	...

0800b250 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b250:	b580      	push	{r7, lr}
 800b252:	b08a      	sub	sp, #40	@ 0x28
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800b25e:	f06f 0301 	mvn.w	r3, #1
 800b262:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b270:	4b06      	ldr	r3, [pc, #24]	@ (800b28c <xTimerPendFunctionCallFromISR+0x3c>)
 800b272:	6818      	ldr	r0, [r3, #0]
 800b274:	f107 0114 	add.w	r1, r7, #20
 800b278:	2300      	movs	r3, #0
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	f7fd fbb0 	bl	80089e0 <xQueueGenericSendFromISR>
 800b280:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800b282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b284:	4618      	mov	r0, r3
 800b286:	3728      	adds	r7, #40	@ 0x28
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	20026a8c 	.word	0x20026a8c

0800b290 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b290:	b480      	push	{r7}
 800b292:	b085      	sub	sp, #20
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	3b04      	subs	r3, #4
 800b2a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b2a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	3b04      	subs	r3, #4
 800b2ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	f023 0201 	bic.w	r2, r3, #1
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	3b04      	subs	r3, #4
 800b2be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b2c0:	4a0c      	ldr	r2, [pc, #48]	@ (800b2f4 <pxPortInitialiseStack+0x64>)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	3b14      	subs	r3, #20
 800b2ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	3b04      	subs	r3, #4
 800b2d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f06f 0202 	mvn.w	r2, #2
 800b2de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	3b20      	subs	r3, #32
 800b2e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3714      	adds	r7, #20
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr
 800b2f4:	0800b2f9 	.word	0x0800b2f9

0800b2f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b2fe:	2300      	movs	r3, #0
 800b300:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b302:	4b13      	ldr	r3, [pc, #76]	@ (800b350 <prvTaskExitError+0x58>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b30a:	d00b      	beq.n	800b324 <prvTaskExitError+0x2c>
	__asm volatile
 800b30c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b310:	f383 8811 	msr	BASEPRI, r3
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	60fb      	str	r3, [r7, #12]
}
 800b31e:	bf00      	nop
 800b320:	bf00      	nop
 800b322:	e7fd      	b.n	800b320 <prvTaskExitError+0x28>
	__asm volatile
 800b324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b328:	f383 8811 	msr	BASEPRI, r3
 800b32c:	f3bf 8f6f 	isb	sy
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	60bb      	str	r3, [r7, #8]
}
 800b336:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b338:	bf00      	nop
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d0fc      	beq.n	800b33a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b340:	bf00      	nop
 800b342:	bf00      	nop
 800b344:	3714      	adds	r7, #20
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	20000230 	.word	0x20000230
	...

0800b360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b360:	4b07      	ldr	r3, [pc, #28]	@ (800b380 <pxCurrentTCBConst2>)
 800b362:	6819      	ldr	r1, [r3, #0]
 800b364:	6808      	ldr	r0, [r1, #0]
 800b366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36a:	f380 8809 	msr	PSP, r0
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f04f 0000 	mov.w	r0, #0
 800b376:	f380 8811 	msr	BASEPRI, r0
 800b37a:	4770      	bx	lr
 800b37c:	f3af 8000 	nop.w

0800b380 <pxCurrentTCBConst2>:
 800b380:	2002655c 	.word	0x2002655c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b384:	bf00      	nop
 800b386:	bf00      	nop

0800b388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b388:	4808      	ldr	r0, [pc, #32]	@ (800b3ac <prvPortStartFirstTask+0x24>)
 800b38a:	6800      	ldr	r0, [r0, #0]
 800b38c:	6800      	ldr	r0, [r0, #0]
 800b38e:	f380 8808 	msr	MSP, r0
 800b392:	f04f 0000 	mov.w	r0, #0
 800b396:	f380 8814 	msr	CONTROL, r0
 800b39a:	b662      	cpsie	i
 800b39c:	b661      	cpsie	f
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	df00      	svc	0
 800b3a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3aa:	bf00      	nop
 800b3ac:	e000ed08 	.word	0xe000ed08

0800b3b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b3b6:	4b47      	ldr	r3, [pc, #284]	@ (800b4d4 <xPortStartScheduler+0x124>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a47      	ldr	r2, [pc, #284]	@ (800b4d8 <xPortStartScheduler+0x128>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d10b      	bne.n	800b3d8 <xPortStartScheduler+0x28>
	__asm volatile
 800b3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	60fb      	str	r3, [r7, #12]
}
 800b3d2:	bf00      	nop
 800b3d4:	bf00      	nop
 800b3d6:	e7fd      	b.n	800b3d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b3d8:	4b3e      	ldr	r3, [pc, #248]	@ (800b4d4 <xPortStartScheduler+0x124>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a3f      	ldr	r2, [pc, #252]	@ (800b4dc <xPortStartScheduler+0x12c>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d10b      	bne.n	800b3fa <xPortStartScheduler+0x4a>
	__asm volatile
 800b3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	613b      	str	r3, [r7, #16]
}
 800b3f4:	bf00      	nop
 800b3f6:	bf00      	nop
 800b3f8:	e7fd      	b.n	800b3f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b3fa:	4b39      	ldr	r3, [pc, #228]	@ (800b4e0 <xPortStartScheduler+0x130>)
 800b3fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	b2db      	uxtb	r3, r3
 800b404:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	22ff      	movs	r2, #255	@ 0xff
 800b40a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	b2db      	uxtb	r3, r3
 800b412:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b414:	78fb      	ldrb	r3, [r7, #3]
 800b416:	b2db      	uxtb	r3, r3
 800b418:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b41c:	b2da      	uxtb	r2, r3
 800b41e:	4b31      	ldr	r3, [pc, #196]	@ (800b4e4 <xPortStartScheduler+0x134>)
 800b420:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b422:	4b31      	ldr	r3, [pc, #196]	@ (800b4e8 <xPortStartScheduler+0x138>)
 800b424:	2207      	movs	r2, #7
 800b426:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b428:	e009      	b.n	800b43e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b42a:	4b2f      	ldr	r3, [pc, #188]	@ (800b4e8 <xPortStartScheduler+0x138>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	3b01      	subs	r3, #1
 800b430:	4a2d      	ldr	r2, [pc, #180]	@ (800b4e8 <xPortStartScheduler+0x138>)
 800b432:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b434:	78fb      	ldrb	r3, [r7, #3]
 800b436:	b2db      	uxtb	r3, r3
 800b438:	005b      	lsls	r3, r3, #1
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b43e:	78fb      	ldrb	r3, [r7, #3]
 800b440:	b2db      	uxtb	r3, r3
 800b442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b446:	2b80      	cmp	r3, #128	@ 0x80
 800b448:	d0ef      	beq.n	800b42a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b44a:	4b27      	ldr	r3, [pc, #156]	@ (800b4e8 <xPortStartScheduler+0x138>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f1c3 0307 	rsb	r3, r3, #7
 800b452:	2b04      	cmp	r3, #4
 800b454:	d00b      	beq.n	800b46e <xPortStartScheduler+0xbe>
	__asm volatile
 800b456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b45a:	f383 8811 	msr	BASEPRI, r3
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	f3bf 8f4f 	dsb	sy
 800b466:	60bb      	str	r3, [r7, #8]
}
 800b468:	bf00      	nop
 800b46a:	bf00      	nop
 800b46c:	e7fd      	b.n	800b46a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b46e:	4b1e      	ldr	r3, [pc, #120]	@ (800b4e8 <xPortStartScheduler+0x138>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	021b      	lsls	r3, r3, #8
 800b474:	4a1c      	ldr	r2, [pc, #112]	@ (800b4e8 <xPortStartScheduler+0x138>)
 800b476:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b478:	4b1b      	ldr	r3, [pc, #108]	@ (800b4e8 <xPortStartScheduler+0x138>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b480:	4a19      	ldr	r2, [pc, #100]	@ (800b4e8 <xPortStartScheduler+0x138>)
 800b482:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	b2da      	uxtb	r2, r3
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b48c:	4b17      	ldr	r3, [pc, #92]	@ (800b4ec <xPortStartScheduler+0x13c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a16      	ldr	r2, [pc, #88]	@ (800b4ec <xPortStartScheduler+0x13c>)
 800b492:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b496:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b498:	4b14      	ldr	r3, [pc, #80]	@ (800b4ec <xPortStartScheduler+0x13c>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a13      	ldr	r2, [pc, #76]	@ (800b4ec <xPortStartScheduler+0x13c>)
 800b49e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b4a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4a4:	f000 f8da 	bl	800b65c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4a8:	4b11      	ldr	r3, [pc, #68]	@ (800b4f0 <xPortStartScheduler+0x140>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b4ae:	f000 f8f9 	bl	800b6a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b4b2:	4b10      	ldr	r3, [pc, #64]	@ (800b4f4 <xPortStartScheduler+0x144>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a0f      	ldr	r2, [pc, #60]	@ (800b4f4 <xPortStartScheduler+0x144>)
 800b4b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b4bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4be:	f7ff ff63 	bl	800b388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4c2:	f7fe fce7 	bl	8009e94 <vTaskSwitchContext>
	prvTaskExitError();
 800b4c6:	f7ff ff17 	bl	800b2f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b4ca:	2300      	movs	r3, #0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3718      	adds	r7, #24
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	e000ed00 	.word	0xe000ed00
 800b4d8:	410fc271 	.word	0x410fc271
 800b4dc:	410fc270 	.word	0x410fc270
 800b4e0:	e000e400 	.word	0xe000e400
 800b4e4:	20026b88 	.word	0x20026b88
 800b4e8:	20026b8c 	.word	0x20026b8c
 800b4ec:	e000ed20 	.word	0xe000ed20
 800b4f0:	20000230 	.word	0x20000230
 800b4f4:	e000ef34 	.word	0xe000ef34

0800b4f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	607b      	str	r3, [r7, #4]
}
 800b510:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b512:	4b10      	ldr	r3, [pc, #64]	@ (800b554 <vPortEnterCritical+0x5c>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3301      	adds	r3, #1
 800b518:	4a0e      	ldr	r2, [pc, #56]	@ (800b554 <vPortEnterCritical+0x5c>)
 800b51a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b51c:	4b0d      	ldr	r3, [pc, #52]	@ (800b554 <vPortEnterCritical+0x5c>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2b01      	cmp	r3, #1
 800b522:	d110      	bne.n	800b546 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b524:	4b0c      	ldr	r3, [pc, #48]	@ (800b558 <vPortEnterCritical+0x60>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00b      	beq.n	800b546 <vPortEnterCritical+0x4e>
	__asm volatile
 800b52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b532:	f383 8811 	msr	BASEPRI, r3
 800b536:	f3bf 8f6f 	isb	sy
 800b53a:	f3bf 8f4f 	dsb	sy
 800b53e:	603b      	str	r3, [r7, #0]
}
 800b540:	bf00      	nop
 800b542:	bf00      	nop
 800b544:	e7fd      	b.n	800b542 <vPortEnterCritical+0x4a>
	}
}
 800b546:	bf00      	nop
 800b548:	370c      	adds	r7, #12
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr
 800b552:	bf00      	nop
 800b554:	20000230 	.word	0x20000230
 800b558:	e000ed04 	.word	0xe000ed04

0800b55c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b562:	4b12      	ldr	r3, [pc, #72]	@ (800b5ac <vPortExitCritical+0x50>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d10b      	bne.n	800b582 <vPortExitCritical+0x26>
	__asm volatile
 800b56a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b56e:	f383 8811 	msr	BASEPRI, r3
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	f3bf 8f4f 	dsb	sy
 800b57a:	607b      	str	r3, [r7, #4]
}
 800b57c:	bf00      	nop
 800b57e:	bf00      	nop
 800b580:	e7fd      	b.n	800b57e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b582:	4b0a      	ldr	r3, [pc, #40]	@ (800b5ac <vPortExitCritical+0x50>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	3b01      	subs	r3, #1
 800b588:	4a08      	ldr	r2, [pc, #32]	@ (800b5ac <vPortExitCritical+0x50>)
 800b58a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b58c:	4b07      	ldr	r3, [pc, #28]	@ (800b5ac <vPortExitCritical+0x50>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d105      	bne.n	800b5a0 <vPortExitCritical+0x44>
 800b594:	2300      	movs	r3, #0
 800b596:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	f383 8811 	msr	BASEPRI, r3
}
 800b59e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr
 800b5ac:	20000230 	.word	0x20000230

0800b5b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5b0:	f3ef 8009 	mrs	r0, PSP
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	4b15      	ldr	r3, [pc, #84]	@ (800b610 <pxCurrentTCBConst>)
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	f01e 0f10 	tst.w	lr, #16
 800b5c0:	bf08      	it	eq
 800b5c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b5c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ca:	6010      	str	r0, [r2, #0]
 800b5cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b5d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b5d4:	f380 8811 	msr	BASEPRI, r0
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f7fe fc58 	bl	8009e94 <vTaskSwitchContext>
 800b5e4:	f04f 0000 	mov.w	r0, #0
 800b5e8:	f380 8811 	msr	BASEPRI, r0
 800b5ec:	bc09      	pop	{r0, r3}
 800b5ee:	6819      	ldr	r1, [r3, #0]
 800b5f0:	6808      	ldr	r0, [r1, #0]
 800b5f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f6:	f01e 0f10 	tst.w	lr, #16
 800b5fa:	bf08      	it	eq
 800b5fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b600:	f380 8809 	msr	PSP, r0
 800b604:	f3bf 8f6f 	isb	sy
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop
 800b60c:	f3af 8000 	nop.w

0800b610 <pxCurrentTCBConst>:
 800b610:	2002655c 	.word	0x2002655c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b614:	bf00      	nop
 800b616:	bf00      	nop

0800b618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
	__asm volatile
 800b61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	607b      	str	r3, [r7, #4]
}
 800b630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b632:	f7fe fb71 	bl	8009d18 <xTaskIncrementTick>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d003      	beq.n	800b644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b63c:	4b06      	ldr	r3, [pc, #24]	@ (800b658 <xPortSysTickHandler+0x40>)
 800b63e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b642:	601a      	str	r2, [r3, #0]
 800b644:	2300      	movs	r3, #0
 800b646:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	f383 8811 	msr	BASEPRI, r3
}
 800b64e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b650:	bf00      	nop
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	e000ed04 	.word	0xe000ed04

0800b65c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b65c:	b480      	push	{r7}
 800b65e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b660:	4b0b      	ldr	r3, [pc, #44]	@ (800b690 <vPortSetupTimerInterrupt+0x34>)
 800b662:	2200      	movs	r2, #0
 800b664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b666:	4b0b      	ldr	r3, [pc, #44]	@ (800b694 <vPortSetupTimerInterrupt+0x38>)
 800b668:	2200      	movs	r2, #0
 800b66a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b66c:	4b0a      	ldr	r3, [pc, #40]	@ (800b698 <vPortSetupTimerInterrupt+0x3c>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a0a      	ldr	r2, [pc, #40]	@ (800b69c <vPortSetupTimerInterrupt+0x40>)
 800b672:	fba2 2303 	umull	r2, r3, r2, r3
 800b676:	099b      	lsrs	r3, r3, #6
 800b678:	4a09      	ldr	r2, [pc, #36]	@ (800b6a0 <vPortSetupTimerInterrupt+0x44>)
 800b67a:	3b01      	subs	r3, #1
 800b67c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b67e:	4b04      	ldr	r3, [pc, #16]	@ (800b690 <vPortSetupTimerInterrupt+0x34>)
 800b680:	2207      	movs	r2, #7
 800b682:	601a      	str	r2, [r3, #0]
}
 800b684:	bf00      	nop
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	e000e010 	.word	0xe000e010
 800b694:	e000e018 	.word	0xe000e018
 800b698:	20000224 	.word	0x20000224
 800b69c:	10624dd3 	.word	0x10624dd3
 800b6a0:	e000e014 	.word	0xe000e014

0800b6a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b6b4 <vPortEnableVFP+0x10>
 800b6a8:	6801      	ldr	r1, [r0, #0]
 800b6aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b6ae:	6001      	str	r1, [r0, #0]
 800b6b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6b2:	bf00      	nop
 800b6b4:	e000ed88 	.word	0xe000ed88

0800b6b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b085      	sub	sp, #20
 800b6bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6be:	f3ef 8305 	mrs	r3, IPSR
 800b6c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2b0f      	cmp	r3, #15
 800b6c8:	d915      	bls.n	800b6f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b6ca:	4a18      	ldr	r2, [pc, #96]	@ (800b72c <vPortValidateInterruptPriority+0x74>)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b6d4:	4b16      	ldr	r3, [pc, #88]	@ (800b730 <vPortValidateInterruptPriority+0x78>)
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	7afa      	ldrb	r2, [r7, #11]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d20b      	bcs.n	800b6f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	607b      	str	r3, [r7, #4]
}
 800b6f0:	bf00      	nop
 800b6f2:	bf00      	nop
 800b6f4:	e7fd      	b.n	800b6f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b6f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b734 <vPortValidateInterruptPriority+0x7c>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b6fe:	4b0e      	ldr	r3, [pc, #56]	@ (800b738 <vPortValidateInterruptPriority+0x80>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	429a      	cmp	r2, r3
 800b704:	d90b      	bls.n	800b71e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b70a:	f383 8811 	msr	BASEPRI, r3
 800b70e:	f3bf 8f6f 	isb	sy
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	603b      	str	r3, [r7, #0]
}
 800b718:	bf00      	nop
 800b71a:	bf00      	nop
 800b71c:	e7fd      	b.n	800b71a <vPortValidateInterruptPriority+0x62>
	}
 800b71e:	bf00      	nop
 800b720:	3714      	adds	r7, #20
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	e000e3f0 	.word	0xe000e3f0
 800b730:	20026b88 	.word	0x20026b88
 800b734:	e000ed0c 	.word	0xe000ed0c
 800b738:	20026b8c 	.word	0x20026b8c

0800b73c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b08a      	sub	sp, #40	@ 0x28
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b744:	2300      	movs	r3, #0
 800b746:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b748:	f7fe fa14 	bl	8009b74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b74c:	4b5c      	ldr	r3, [pc, #368]	@ (800b8c0 <pvPortMalloc+0x184>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d101      	bne.n	800b758 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b754:	f000 f924 	bl	800b9a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b758:	4b5a      	ldr	r3, [pc, #360]	@ (800b8c4 <pvPortMalloc+0x188>)
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	4013      	ands	r3, r2
 800b760:	2b00      	cmp	r3, #0
 800b762:	f040 8095 	bne.w	800b890 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d01e      	beq.n	800b7aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b76c:	2208      	movs	r2, #8
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4413      	add	r3, r2
 800b772:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f003 0307 	and.w	r3, r3, #7
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d015      	beq.n	800b7aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f023 0307 	bic.w	r3, r3, #7
 800b784:	3308      	adds	r3, #8
 800b786:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f003 0307 	and.w	r3, r3, #7
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00b      	beq.n	800b7aa <pvPortMalloc+0x6e>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	617b      	str	r3, [r7, #20]
}
 800b7a4:	bf00      	nop
 800b7a6:	bf00      	nop
 800b7a8:	e7fd      	b.n	800b7a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d06f      	beq.n	800b890 <pvPortMalloc+0x154>
 800b7b0:	4b45      	ldr	r3, [pc, #276]	@ (800b8c8 <pvPortMalloc+0x18c>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d86a      	bhi.n	800b890 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7ba:	4b44      	ldr	r3, [pc, #272]	@ (800b8cc <pvPortMalloc+0x190>)
 800b7bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7be:	4b43      	ldr	r3, [pc, #268]	@ (800b8cc <pvPortMalloc+0x190>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7c4:	e004      	b.n	800b7d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d903      	bls.n	800b7e2 <pvPortMalloc+0xa6>
 800b7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1f1      	bne.n	800b7c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b7e2:	4b37      	ldr	r3, [pc, #220]	@ (800b8c0 <pvPortMalloc+0x184>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d051      	beq.n	800b890 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b7ec:	6a3b      	ldr	r3, [r7, #32]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2208      	movs	r2, #8
 800b7f2:	4413      	add	r3, r2
 800b7f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	6a3b      	ldr	r3, [r7, #32]
 800b7fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b800:	685a      	ldr	r2, [r3, #4]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	1ad2      	subs	r2, r2, r3
 800b806:	2308      	movs	r3, #8
 800b808:	005b      	lsls	r3, r3, #1
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d920      	bls.n	800b850 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b80e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4413      	add	r3, r2
 800b814:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	f003 0307 	and.w	r3, r3, #7
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00b      	beq.n	800b838 <pvPortMalloc+0xfc>
	__asm volatile
 800b820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b824:	f383 8811 	msr	BASEPRI, r3
 800b828:	f3bf 8f6f 	isb	sy
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	613b      	str	r3, [r7, #16]
}
 800b832:	bf00      	nop
 800b834:	bf00      	nop
 800b836:	e7fd      	b.n	800b834 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b83a:	685a      	ldr	r2, [r3, #4]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	1ad2      	subs	r2, r2, r3
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b84a:	69b8      	ldr	r0, [r7, #24]
 800b84c:	f000 f90a 	bl	800ba64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b850:	4b1d      	ldr	r3, [pc, #116]	@ (800b8c8 <pvPortMalloc+0x18c>)
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	4a1b      	ldr	r2, [pc, #108]	@ (800b8c8 <pvPortMalloc+0x18c>)
 800b85c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b85e:	4b1a      	ldr	r3, [pc, #104]	@ (800b8c8 <pvPortMalloc+0x18c>)
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	4b1b      	ldr	r3, [pc, #108]	@ (800b8d0 <pvPortMalloc+0x194>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	429a      	cmp	r2, r3
 800b868:	d203      	bcs.n	800b872 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b86a:	4b17      	ldr	r3, [pc, #92]	@ (800b8c8 <pvPortMalloc+0x18c>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a18      	ldr	r2, [pc, #96]	@ (800b8d0 <pvPortMalloc+0x194>)
 800b870:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b874:	685a      	ldr	r2, [r3, #4]
 800b876:	4b13      	ldr	r3, [pc, #76]	@ (800b8c4 <pvPortMalloc+0x188>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	431a      	orrs	r2, r3
 800b87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b87e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b882:	2200      	movs	r2, #0
 800b884:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b886:	4b13      	ldr	r3, [pc, #76]	@ (800b8d4 <pvPortMalloc+0x198>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	3301      	adds	r3, #1
 800b88c:	4a11      	ldr	r2, [pc, #68]	@ (800b8d4 <pvPortMalloc+0x198>)
 800b88e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b890:	f7fe f97e 	bl	8009b90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	f003 0307 	and.w	r3, r3, #7
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00b      	beq.n	800b8b6 <pvPortMalloc+0x17a>
	__asm volatile
 800b89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a2:	f383 8811 	msr	BASEPRI, r3
 800b8a6:	f3bf 8f6f 	isb	sy
 800b8aa:	f3bf 8f4f 	dsb	sy
 800b8ae:	60fb      	str	r3, [r7, #12]
}
 800b8b0:	bf00      	nop
 800b8b2:	bf00      	nop
 800b8b4:	e7fd      	b.n	800b8b2 <pvPortMalloc+0x176>
	return pvReturn;
 800b8b6:	69fb      	ldr	r3, [r7, #28]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3728      	adds	r7, #40	@ 0x28
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	2002a798 	.word	0x2002a798
 800b8c4:	2002a7ac 	.word	0x2002a7ac
 800b8c8:	2002a79c 	.word	0x2002a79c
 800b8cc:	2002a790 	.word	0x2002a790
 800b8d0:	2002a7a0 	.word	0x2002a7a0
 800b8d4:	2002a7a4 	.word	0x2002a7a4

0800b8d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d04f      	beq.n	800b98a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b8ea:	2308      	movs	r3, #8
 800b8ec:	425b      	negs	r3, r3
 800b8ee:	697a      	ldr	r2, [r7, #20]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	4b25      	ldr	r3, [pc, #148]	@ (800b994 <vPortFree+0xbc>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4013      	ands	r3, r2
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10b      	bne.n	800b91e <vPortFree+0x46>
	__asm volatile
 800b906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	60fb      	str	r3, [r7, #12]
}
 800b918:	bf00      	nop
 800b91a:	bf00      	nop
 800b91c:	e7fd      	b.n	800b91a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d00b      	beq.n	800b93e <vPortFree+0x66>
	__asm volatile
 800b926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b92a:	f383 8811 	msr	BASEPRI, r3
 800b92e:	f3bf 8f6f 	isb	sy
 800b932:	f3bf 8f4f 	dsb	sy
 800b936:	60bb      	str	r3, [r7, #8]
}
 800b938:	bf00      	nop
 800b93a:	bf00      	nop
 800b93c:	e7fd      	b.n	800b93a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	685a      	ldr	r2, [r3, #4]
 800b942:	4b14      	ldr	r3, [pc, #80]	@ (800b994 <vPortFree+0xbc>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4013      	ands	r3, r2
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d01e      	beq.n	800b98a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d11a      	bne.n	800b98a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	685a      	ldr	r2, [r3, #4]
 800b958:	4b0e      	ldr	r3, [pc, #56]	@ (800b994 <vPortFree+0xbc>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	43db      	mvns	r3, r3
 800b95e:	401a      	ands	r2, r3
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b964:	f7fe f906 	bl	8009b74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	685a      	ldr	r2, [r3, #4]
 800b96c:	4b0a      	ldr	r3, [pc, #40]	@ (800b998 <vPortFree+0xc0>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4413      	add	r3, r2
 800b972:	4a09      	ldr	r2, [pc, #36]	@ (800b998 <vPortFree+0xc0>)
 800b974:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b976:	6938      	ldr	r0, [r7, #16]
 800b978:	f000 f874 	bl	800ba64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b97c:	4b07      	ldr	r3, [pc, #28]	@ (800b99c <vPortFree+0xc4>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	3301      	adds	r3, #1
 800b982:	4a06      	ldr	r2, [pc, #24]	@ (800b99c <vPortFree+0xc4>)
 800b984:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b986:	f7fe f903 	bl	8009b90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b98a:	bf00      	nop
 800b98c:	3718      	adds	r7, #24
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	2002a7ac 	.word	0x2002a7ac
 800b998:	2002a79c 	.word	0x2002a79c
 800b99c:	2002a7a8 	.word	0x2002a7a8

0800b9a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b085      	sub	sp, #20
 800b9a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b9a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b9aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b9ac:	4b27      	ldr	r3, [pc, #156]	@ (800ba4c <prvHeapInit+0xac>)
 800b9ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f003 0307 	and.w	r3, r3, #7
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00c      	beq.n	800b9d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	3307      	adds	r3, #7
 800b9be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f023 0307 	bic.w	r3, r3, #7
 800b9c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b9c8:	68ba      	ldr	r2, [r7, #8]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	1ad3      	subs	r3, r2, r3
 800b9ce:	4a1f      	ldr	r2, [pc, #124]	@ (800ba4c <prvHeapInit+0xac>)
 800b9d0:	4413      	add	r3, r2
 800b9d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b9d8:	4a1d      	ldr	r2, [pc, #116]	@ (800ba50 <prvHeapInit+0xb0>)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b9de:	4b1c      	ldr	r3, [pc, #112]	@ (800ba50 <prvHeapInit+0xb0>)
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	68ba      	ldr	r2, [r7, #8]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b9ec:	2208      	movs	r2, #8
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	1a9b      	subs	r3, r3, r2
 800b9f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f023 0307 	bic.w	r3, r3, #7
 800b9fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	4a15      	ldr	r2, [pc, #84]	@ (800ba54 <prvHeapInit+0xb4>)
 800ba00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba02:	4b14      	ldr	r3, [pc, #80]	@ (800ba54 <prvHeapInit+0xb4>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2200      	movs	r2, #0
 800ba08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba0a:	4b12      	ldr	r3, [pc, #72]	@ (800ba54 <prvHeapInit+0xb4>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	1ad2      	subs	r2, r2, r3
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba20:	4b0c      	ldr	r3, [pc, #48]	@ (800ba54 <prvHeapInit+0xb4>)
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	4a0a      	ldr	r2, [pc, #40]	@ (800ba58 <prvHeapInit+0xb8>)
 800ba2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	4a09      	ldr	r2, [pc, #36]	@ (800ba5c <prvHeapInit+0xbc>)
 800ba36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba38:	4b09      	ldr	r3, [pc, #36]	@ (800ba60 <prvHeapInit+0xc0>)
 800ba3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ba3e:	601a      	str	r2, [r3, #0]
}
 800ba40:	bf00      	nop
 800ba42:	3714      	adds	r7, #20
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr
 800ba4c:	20026b90 	.word	0x20026b90
 800ba50:	2002a790 	.word	0x2002a790
 800ba54:	2002a798 	.word	0x2002a798
 800ba58:	2002a7a0 	.word	0x2002a7a0
 800ba5c:	2002a79c 	.word	0x2002a79c
 800ba60:	2002a7ac 	.word	0x2002a7ac

0800ba64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba6c:	4b28      	ldr	r3, [pc, #160]	@ (800bb10 <prvInsertBlockIntoFreeList+0xac>)
 800ba6e:	60fb      	str	r3, [r7, #12]
 800ba70:	e002      	b.n	800ba78 <prvInsertBlockIntoFreeList+0x14>
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	60fb      	str	r3, [r7, #12]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d8f7      	bhi.n	800ba72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d108      	bne.n	800baa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	685a      	ldr	r2, [r3, #4]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	441a      	add	r2, r3
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	68ba      	ldr	r2, [r7, #8]
 800bab0:	441a      	add	r2, r3
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d118      	bne.n	800baec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	4b15      	ldr	r3, [pc, #84]	@ (800bb14 <prvInsertBlockIntoFreeList+0xb0>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d00d      	beq.n	800bae2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	685a      	ldr	r2, [r3, #4]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	441a      	add	r2, r3
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	e008      	b.n	800baf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bae2:	4b0c      	ldr	r3, [pc, #48]	@ (800bb14 <prvInsertBlockIntoFreeList+0xb0>)
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	601a      	str	r2, [r3, #0]
 800baea:	e003      	b.n	800baf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d002      	beq.n	800bb02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb02:	bf00      	nop
 800bb04:	3714      	adds	r7, #20
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	2002a790 	.word	0x2002a790
 800bb14:	2002a798 	.word	0x2002a798

0800bb18 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800bb1e:	4b24      	ldr	r3, [pc, #144]	@ (800bbb0 <_DoInit+0x98>)
 800bb20:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2203      	movs	r2, #3
 800bb26:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2203      	movs	r2, #3
 800bb2c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4a20      	ldr	r2, [pc, #128]	@ (800bbb4 <_DoInit+0x9c>)
 800bb32:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4a20      	ldr	r2, [pc, #128]	@ (800bbb8 <_DoInit+0xa0>)
 800bb38:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bb40:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4a17      	ldr	r2, [pc, #92]	@ (800bbb4 <_DoInit+0x9c>)
 800bb58:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a17      	ldr	r2, [pc, #92]	@ (800bbbc <_DoInit+0xa4>)
 800bb5e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2210      	movs	r2, #16
 800bb64:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	3307      	adds	r3, #7
 800bb7c:	4a10      	ldr	r2, [pc, #64]	@ (800bbc0 <_DoInit+0xa8>)
 800bb7e:	6810      	ldr	r0, [r2, #0]
 800bb80:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800bb82:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4a0e      	ldr	r2, [pc, #56]	@ (800bbc4 <_DoInit+0xac>)
 800bb8a:	6810      	ldr	r0, [r2, #0]
 800bb8c:	6018      	str	r0, [r3, #0]
 800bb8e:	8891      	ldrh	r1, [r2, #4]
 800bb90:	7992      	ldrb	r2, [r2, #6]
 800bb92:	8099      	strh	r1, [r3, #4]
 800bb94:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800bb96:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2220      	movs	r2, #32
 800bb9e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800bba0:	f3bf 8f5f 	dmb	sy
}
 800bba4:	bf00      	nop
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr
 800bbb0:	2002a7b0 	.word	0x2002a7b0
 800bbb4:	08010468 	.word	0x08010468
 800bbb8:	2002a858 	.word	0x2002a858
 800bbbc:	2002ac58 	.word	0x2002ac58
 800bbc0:	08010474 	.word	0x08010474
 800bbc4:	08010478 	.word	0x08010478

0800bbc8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b08c      	sub	sp, #48	@ 0x30
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800bbd4:	4b3e      	ldr	r3, [pc, #248]	@ (800bcd0 <SEGGER_RTT_ReadNoLock+0x108>)
 800bbd6:	623b      	str	r3, [r7, #32]
 800bbd8:	6a3b      	ldr	r3, [r7, #32]
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d101      	bne.n	800bbe6 <SEGGER_RTT_ReadNoLock+0x1e>
 800bbe2:	f7ff ff99 	bl	800bb18 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	005b      	lsls	r3, r3, #1
 800bbec:	4413      	add	r3, r2
 800bbee:	00db      	lsls	r3, r3, #3
 800bbf0:	3360      	adds	r3, #96	@ 0x60
 800bbf2:	4a37      	ldr	r2, [pc, #220]	@ (800bcd0 <SEGGER_RTT_ReadNoLock+0x108>)
 800bbf4:	4413      	add	r3, r2
 800bbf6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800bc0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d92b      	bls.n	800bc6c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	689a      	ldr	r2, [r3, #8]
 800bc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800bc1e:	697a      	ldr	r2, [r7, #20]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4293      	cmp	r3, r2
 800bc24:	bf28      	it	cs
 800bc26:	4613      	movcs	r3, r2
 800bc28:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800bc2a:	69fb      	ldr	r3, [r7, #28]
 800bc2c:	685a      	ldr	r2, [r3, #4]
 800bc2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc30:	4413      	add	r3, r2
 800bc32:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800bc34:	697a      	ldr	r2, [r7, #20]
 800bc36:	6939      	ldr	r1, [r7, #16]
 800bc38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc3a:	f001 fe13 	bl	800d864 <memcpy>
    NumBytesRead += NumBytesRem;
 800bc3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	4413      	add	r3, r2
 800bc44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800bc46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	1ad3      	subs	r3, r2, r3
 800bc54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800bc56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d101      	bne.n	800bc6c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800bc6c:	69ba      	ldr	r2, [r7, #24]
 800bc6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc70:	1ad3      	subs	r3, r2, r3
 800bc72:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800bc74:	697a      	ldr	r2, [r7, #20]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	bf28      	it	cs
 800bc7c:	4613      	movcs	r3, r2
 800bc7e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d019      	beq.n	800bcba <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	685a      	ldr	r2, [r3, #4]
 800bc8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc8c:	4413      	add	r3, r2
 800bc8e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800bc90:	697a      	ldr	r2, [r7, #20]
 800bc92:	6939      	ldr	r1, [r7, #16]
 800bc94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc96:	f001 fde5 	bl	800d864 <memcpy>
    NumBytesRead += NumBytesRem;
 800bc9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	4413      	add	r3, r2
 800bca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800bca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	4413      	add	r3, r2
 800bca8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800bcb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800bcba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d002      	beq.n	800bcc6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcc4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800bcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3730      	adds	r7, #48	@ 0x30
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	2002a7b0 	.word	0x2002a7b0

0800bcd4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b088      	sub	sp, #32
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	607a      	str	r2, [r7, #4]
 800bce0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800bce2:	4b3d      	ldr	r3, [pc, #244]	@ (800bdd8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800bce4:	61bb      	str	r3, [r7, #24]
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d101      	bne.n	800bcf4 <SEGGER_RTT_AllocUpBuffer+0x20>
 800bcf0:	f7ff ff12 	bl	800bb18 <_DoInit>
  SEGGER_RTT_LOCK();
 800bcf4:	f3ef 8311 	mrs	r3, BASEPRI
 800bcf8:	f04f 0120 	mov.w	r1, #32
 800bcfc:	f381 8811 	msr	BASEPRI, r1
 800bd00:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800bd02:	4b35      	ldr	r3, [pc, #212]	@ (800bdd8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800bd04:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800bd06:	2300      	movs	r3, #0
 800bd08:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800bd0a:	6939      	ldr	r1, [r7, #16]
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	1c5a      	adds	r2, r3, #1
 800bd10:	4613      	mov	r3, r2
 800bd12:	005b      	lsls	r3, r3, #1
 800bd14:	4413      	add	r3, r2
 800bd16:	00db      	lsls	r3, r3, #3
 800bd18:	440b      	add	r3, r1
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d008      	beq.n	800bd34 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800bd22:	69fb      	ldr	r3, [r7, #28]
 800bd24:	3301      	adds	r3, #1
 800bd26:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	691b      	ldr	r3, [r3, #16]
 800bd2c:	69fa      	ldr	r2, [r7, #28]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	dbeb      	blt.n	800bd0a <SEGGER_RTT_AllocUpBuffer+0x36>
 800bd32:	e000      	b.n	800bd36 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800bd34:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	691b      	ldr	r3, [r3, #16]
 800bd3a:	69fa      	ldr	r2, [r7, #28]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	da3f      	bge.n	800bdc0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800bd40:	6939      	ldr	r1, [r7, #16]
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	1c5a      	adds	r2, r3, #1
 800bd46:	4613      	mov	r3, r2
 800bd48:	005b      	lsls	r3, r3, #1
 800bd4a:	4413      	add	r3, r2
 800bd4c:	00db      	lsls	r3, r3, #3
 800bd4e:	440b      	add	r3, r1
 800bd50:	68fa      	ldr	r2, [r7, #12]
 800bd52:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800bd54:	6939      	ldr	r1, [r7, #16]
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	1c5a      	adds	r2, r3, #1
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	005b      	lsls	r3, r3, #1
 800bd5e:	4413      	add	r3, r2
 800bd60:	00db      	lsls	r3, r3, #3
 800bd62:	440b      	add	r3, r1
 800bd64:	3304      	adds	r3, #4
 800bd66:	68ba      	ldr	r2, [r7, #8]
 800bd68:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800bd6a:	6939      	ldr	r1, [r7, #16]
 800bd6c:	69fa      	ldr	r2, [r7, #28]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	005b      	lsls	r3, r3, #1
 800bd72:	4413      	add	r3, r2
 800bd74:	00db      	lsls	r3, r3, #3
 800bd76:	440b      	add	r3, r1
 800bd78:	3320      	adds	r3, #32
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800bd7e:	6939      	ldr	r1, [r7, #16]
 800bd80:	69fa      	ldr	r2, [r7, #28]
 800bd82:	4613      	mov	r3, r2
 800bd84:	005b      	lsls	r3, r3, #1
 800bd86:	4413      	add	r3, r2
 800bd88:	00db      	lsls	r3, r3, #3
 800bd8a:	440b      	add	r3, r1
 800bd8c:	3328      	adds	r3, #40	@ 0x28
 800bd8e:	2200      	movs	r2, #0
 800bd90:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800bd92:	6939      	ldr	r1, [r7, #16]
 800bd94:	69fa      	ldr	r2, [r7, #28]
 800bd96:	4613      	mov	r3, r2
 800bd98:	005b      	lsls	r3, r3, #1
 800bd9a:	4413      	add	r3, r2
 800bd9c:	00db      	lsls	r3, r3, #3
 800bd9e:	440b      	add	r3, r1
 800bda0:	3324      	adds	r3, #36	@ 0x24
 800bda2:	2200      	movs	r2, #0
 800bda4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800bda6:	6939      	ldr	r1, [r7, #16]
 800bda8:	69fa      	ldr	r2, [r7, #28]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	005b      	lsls	r3, r3, #1
 800bdae:	4413      	add	r3, r2
 800bdb0:	00db      	lsls	r3, r3, #3
 800bdb2:	440b      	add	r3, r1
 800bdb4:	332c      	adds	r3, #44	@ 0x2c
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800bdba:	f3bf 8f5f 	dmb	sy
 800bdbe:	e002      	b.n	800bdc6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800bdc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bdc4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800bdcc:	69fb      	ldr	r3, [r7, #28]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3720      	adds	r7, #32
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	2002a7b0 	.word	0x2002a7b0

0800bddc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b08a      	sub	sp, #40	@ 0x28
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
 800bde8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800bdea:	4b21      	ldr	r3, [pc, #132]	@ (800be70 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800bdec:	623b      	str	r3, [r7, #32]
 800bdee:	6a3b      	ldr	r3, [r7, #32]
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d101      	bne.n	800bdfc <SEGGER_RTT_ConfigDownBuffer+0x20>
 800bdf8:	f7ff fe8e 	bl	800bb18 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800bdfc:	4b1c      	ldr	r3, [pc, #112]	@ (800be70 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800bdfe:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2b02      	cmp	r3, #2
 800be04:	d82c      	bhi.n	800be60 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800be06:	f3ef 8311 	mrs	r3, BASEPRI
 800be0a:	f04f 0120 	mov.w	r1, #32
 800be0e:	f381 8811 	msr	BASEPRI, r1
 800be12:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	4613      	mov	r3, r2
 800be18:	005b      	lsls	r3, r3, #1
 800be1a:	4413      	add	r3, r2
 800be1c:	00db      	lsls	r3, r3, #3
 800be1e:	3360      	adds	r3, #96	@ 0x60
 800be20:	69fa      	ldr	r2, [r7, #28]
 800be22:	4413      	add	r3, r2
 800be24:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00e      	beq.n	800be4a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	68ba      	ldr	r2, [r7, #8]
 800be30:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	2200      	movs	r2, #0
 800be42:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	2200      	movs	r2, #0
 800be48:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be4e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800be50:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800be54:	69bb      	ldr	r3, [r7, #24]
 800be56:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800be5a:	2300      	movs	r3, #0
 800be5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800be5e:	e002      	b.n	800be66 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800be60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be64:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800be66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3728      	adds	r7, #40	@ 0x28
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	2002a7b0 	.word	0x2002a7b0

0800be74 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800be74:	b480      	push	{r7}
 800be76:	b087      	sub	sp, #28
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800be80:	2300      	movs	r3, #0
 800be82:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00f      	beq.n	800beaa <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800be8a:	e002      	b.n	800be92 <_EncodeStr+0x1e>
      Len++;
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	3301      	adds	r3, #1
 800be90:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	4413      	add	r3, r2
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d1f6      	bne.n	800be8c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800be9e:	693a      	ldr	r2, [r7, #16]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d901      	bls.n	800beaa <_EncodeStr+0x36>
      Len = Limit;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	2bfe      	cmp	r3, #254	@ 0xfe
 800beae:	d806      	bhi.n	800bebe <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	1c5a      	adds	r2, r3, #1
 800beb4:	60fa      	str	r2, [r7, #12]
 800beb6:	693a      	ldr	r2, [r7, #16]
 800beb8:	b2d2      	uxtb	r2, r2
 800beba:	701a      	strb	r2, [r3, #0]
 800bebc:	e011      	b.n	800bee2 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	1c5a      	adds	r2, r3, #1
 800bec2:	60fa      	str	r2, [r7, #12]
 800bec4:	22ff      	movs	r2, #255	@ 0xff
 800bec6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	1c5a      	adds	r2, r3, #1
 800becc:	60fa      	str	r2, [r7, #12]
 800bece:	693a      	ldr	r2, [r7, #16]
 800bed0:	b2d2      	uxtb	r2, r2
 800bed2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	0a19      	lsrs	r1, r3, #8
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	1c5a      	adds	r2, r3, #1
 800bedc:	60fa      	str	r2, [r7, #12]
 800bede:	b2ca      	uxtb	r2, r1
 800bee0:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800bee2:	2300      	movs	r3, #0
 800bee4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800bee6:	e00a      	b.n	800befe <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800bee8:	68ba      	ldr	r2, [r7, #8]
 800beea:	1c53      	adds	r3, r2, #1
 800beec:	60bb      	str	r3, [r7, #8]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	1c59      	adds	r1, r3, #1
 800bef2:	60f9      	str	r1, [r7, #12]
 800bef4:	7812      	ldrb	r2, [r2, #0]
 800bef6:	701a      	strb	r2, [r3, #0]
    n++;
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	3301      	adds	r3, #1
 800befc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d3f0      	bcc.n	800bee8 <_EncodeStr+0x74>
  }
  return pPayload;
 800bf06:	68fb      	ldr	r3, [r7, #12]
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	371c      	adds	r7, #28
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	3304      	adds	r3, #4
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800bf32:	4b35      	ldr	r3, [pc, #212]	@ (800c008 <_HandleIncomingPacket+0xdc>)
 800bf34:	7e1b      	ldrb	r3, [r3, #24]
 800bf36:	4618      	mov	r0, r3
 800bf38:	1cfb      	adds	r3, r7, #3
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	f7ff fe43 	bl	800bbc8 <SEGGER_RTT_ReadNoLock>
 800bf42:	4603      	mov	r3, r0
 800bf44:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	dd59      	ble.n	800c000 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800bf4c:	78fb      	ldrb	r3, [r7, #3]
 800bf4e:	2b80      	cmp	r3, #128	@ 0x80
 800bf50:	d032      	beq.n	800bfb8 <_HandleIncomingPacket+0x8c>
 800bf52:	2b80      	cmp	r3, #128	@ 0x80
 800bf54:	dc42      	bgt.n	800bfdc <_HandleIncomingPacket+0xb0>
 800bf56:	2b07      	cmp	r3, #7
 800bf58:	dc16      	bgt.n	800bf88 <_HandleIncomingPacket+0x5c>
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	dd3e      	ble.n	800bfdc <_HandleIncomingPacket+0xb0>
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	2b06      	cmp	r3, #6
 800bf62:	d83b      	bhi.n	800bfdc <_HandleIncomingPacket+0xb0>
 800bf64:	a201      	add	r2, pc, #4	@ (adr r2, 800bf6c <_HandleIncomingPacket+0x40>)
 800bf66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf6a:	bf00      	nop
 800bf6c:	0800bf8f 	.word	0x0800bf8f
 800bf70:	0800bf95 	.word	0x0800bf95
 800bf74:	0800bf9b 	.word	0x0800bf9b
 800bf78:	0800bfa1 	.word	0x0800bfa1
 800bf7c:	0800bfa7 	.word	0x0800bfa7
 800bf80:	0800bfad 	.word	0x0800bfad
 800bf84:	0800bfb3 	.word	0x0800bfb3
 800bf88:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf8a:	d034      	beq.n	800bff6 <_HandleIncomingPacket+0xca>
 800bf8c:	e026      	b.n	800bfdc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800bf8e:	f000 fba5 	bl	800c6dc <SEGGER_SYSVIEW_Start>
      break;
 800bf92:	e035      	b.n	800c000 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800bf94:	f000 fc5c 	bl	800c850 <SEGGER_SYSVIEW_Stop>
      break;
 800bf98:	e032      	b.n	800c000 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800bf9a:	f000 fe35 	bl	800cc08 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800bf9e:	e02f      	b.n	800c000 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800bfa0:	f000 fdfa 	bl	800cb98 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800bfa4:	e02c      	b.n	800c000 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800bfa6:	f000 fc79 	bl	800c89c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800bfaa:	e029      	b.n	800c000 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800bfac:	f000 ffee 	bl	800cf8c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800bfb0:	e026      	b.n	800c000 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800bfb2:	f000 ffcd 	bl	800cf50 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800bfb6:	e023      	b.n	800c000 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800bfb8:	4b13      	ldr	r3, [pc, #76]	@ (800c008 <_HandleIncomingPacket+0xdc>)
 800bfba:	7e1b      	ldrb	r3, [r3, #24]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	1cfb      	adds	r3, r7, #3
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	f7ff fe00 	bl	800bbc8 <SEGGER_RTT_ReadNoLock>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	dd13      	ble.n	800bffa <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800bfd2:	78fb      	ldrb	r3, [r7, #3]
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f000 ff3b 	bl	800ce50 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800bfda:	e00e      	b.n	800bffa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800bfdc:	78fb      	ldrb	r3, [r7, #3]
 800bfde:	b25b      	sxtb	r3, r3
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	da0c      	bge.n	800bffe <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800bfe4:	4b08      	ldr	r3, [pc, #32]	@ (800c008 <_HandleIncomingPacket+0xdc>)
 800bfe6:	7e1b      	ldrb	r3, [r3, #24]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	1cfb      	adds	r3, r7, #3
 800bfec:	2201      	movs	r2, #1
 800bfee:	4619      	mov	r1, r3
 800bff0:	f7ff fdea 	bl	800bbc8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800bff4:	e003      	b.n	800bffe <_HandleIncomingPacket+0xd2>
      break;
 800bff6:	bf00      	nop
 800bff8:	e002      	b.n	800c000 <_HandleIncomingPacket+0xd4>
      break;
 800bffa:	bf00      	nop
 800bffc:	e000      	b.n	800c000 <_HandleIncomingPacket+0xd4>
      break;
 800bffe:	bf00      	nop
    }
  }
}
 800c000:	bf00      	nop
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	2002b074 	.word	0x2002b074

0800c00c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b08c      	sub	sp, #48	@ 0x30
 800c010:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800c012:	2301      	movs	r3, #1
 800c014:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800c016:	1d3b      	adds	r3, r7, #4
 800c018:	3301      	adds	r3, #1
 800c01a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c020:	4b31      	ldr	r3, [pc, #196]	@ (800c0e8 <_TrySendOverflowPacket+0xdc>)
 800c022:	695b      	ldr	r3, [r3, #20]
 800c024:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c026:	e00b      	b.n	800c040 <_TrySendOverflowPacket+0x34>
 800c028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c02a:	b2da      	uxtb	r2, r3
 800c02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c02e:	1c59      	adds	r1, r3, #1
 800c030:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c032:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c036:	b2d2      	uxtb	r2, r2
 800c038:	701a      	strb	r2, [r3, #0]
 800c03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c03c:	09db      	lsrs	r3, r3, #7
 800c03e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c042:	2b7f      	cmp	r3, #127	@ 0x7f
 800c044:	d8f0      	bhi.n	800c028 <_TrySendOverflowPacket+0x1c>
 800c046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c048:	1c5a      	adds	r2, r3, #1
 800c04a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c04c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c04e:	b2d2      	uxtb	r2, r2
 800c050:	701a      	strb	r2, [r3, #0]
 800c052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c054:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c056:	4b25      	ldr	r3, [pc, #148]	@ (800c0ec <_TrySendOverflowPacket+0xe0>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c05c:	4b22      	ldr	r3, [pc, #136]	@ (800c0e8 <_TrySendOverflowPacket+0xdc>)
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	69ba      	ldr	r2, [r7, #24]
 800c062:	1ad3      	subs	r3, r2, r3
 800c064:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	627b      	str	r3, [r7, #36]	@ 0x24
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	623b      	str	r3, [r7, #32]
 800c06e:	e00b      	b.n	800c088 <_TrySendOverflowPacket+0x7c>
 800c070:	6a3b      	ldr	r3, [r7, #32]
 800c072:	b2da      	uxtb	r2, r3
 800c074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c076:	1c59      	adds	r1, r3, #1
 800c078:	6279      	str	r1, [r7, #36]	@ 0x24
 800c07a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c07e:	b2d2      	uxtb	r2, r2
 800c080:	701a      	strb	r2, [r3, #0]
 800c082:	6a3b      	ldr	r3, [r7, #32]
 800c084:	09db      	lsrs	r3, r3, #7
 800c086:	623b      	str	r3, [r7, #32]
 800c088:	6a3b      	ldr	r3, [r7, #32]
 800c08a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c08c:	d8f0      	bhi.n	800c070 <_TrySendOverflowPacket+0x64>
 800c08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c090:	1c5a      	adds	r2, r3, #1
 800c092:	627a      	str	r2, [r7, #36]	@ 0x24
 800c094:	6a3a      	ldr	r2, [r7, #32]
 800c096:	b2d2      	uxtb	r2, r2
 800c098:	701a      	strb	r2, [r3, #0]
 800c09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800c09e:	4b12      	ldr	r3, [pc, #72]	@ (800c0e8 <_TrySendOverflowPacket+0xdc>)
 800c0a0:	785b      	ldrb	r3, [r3, #1]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	1d3b      	adds	r3, r7, #4
 800c0a6:	69fa      	ldr	r2, [r7, #28]
 800c0a8:	1ad3      	subs	r3, r2, r3
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	1d3b      	adds	r3, r7, #4
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	f7f4 f87e 	bl	80001b0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d009      	beq.n	800c0d2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c0be:	4a0a      	ldr	r2, [pc, #40]	@ (800c0e8 <_TrySendOverflowPacket+0xdc>)
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800c0c4:	4b08      	ldr	r3, [pc, #32]	@ (800c0e8 <_TrySendOverflowPacket+0xdc>)
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	b2da      	uxtb	r2, r3
 800c0cc:	4b06      	ldr	r3, [pc, #24]	@ (800c0e8 <_TrySendOverflowPacket+0xdc>)
 800c0ce:	701a      	strb	r2, [r3, #0]
 800c0d0:	e004      	b.n	800c0dc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800c0d2:	4b05      	ldr	r3, [pc, #20]	@ (800c0e8 <_TrySendOverflowPacket+0xdc>)
 800c0d4:	695b      	ldr	r3, [r3, #20]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	4a03      	ldr	r2, [pc, #12]	@ (800c0e8 <_TrySendOverflowPacket+0xdc>)
 800c0da:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800c0dc:	693b      	ldr	r3, [r7, #16]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3730      	adds	r7, #48	@ 0x30
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	2002b074 	.word	0x2002b074
 800c0ec:	e0001004 	.word	0xe0001004

0800c0f0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b08a      	sub	sp, #40	@ 0x28
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800c0fc:	4b6c      	ldr	r3, [pc, #432]	@ (800c2b0 <_SendPacket+0x1c0>)
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	2b01      	cmp	r3, #1
 800c102:	d010      	beq.n	800c126 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800c104:	4b6a      	ldr	r3, [pc, #424]	@ (800c2b0 <_SendPacket+0x1c0>)
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	f000 80a3 	beq.w	800c254 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800c10e:	4b68      	ldr	r3, [pc, #416]	@ (800c2b0 <_SendPacket+0x1c0>)
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	2b02      	cmp	r3, #2
 800c114:	d109      	bne.n	800c12a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800c116:	f7ff ff79 	bl	800c00c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800c11a:	4b65      	ldr	r3, [pc, #404]	@ (800c2b0 <_SendPacket+0x1c0>)
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	2b01      	cmp	r3, #1
 800c120:	f040 809a 	bne.w	800c258 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800c124:	e001      	b.n	800c12a <_SendPacket+0x3a>
    goto Send;
 800c126:	bf00      	nop
 800c128:	e000      	b.n	800c12c <_SendPacket+0x3c>
Send:
 800c12a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b1f      	cmp	r3, #31
 800c130:	d809      	bhi.n	800c146 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800c132:	4b5f      	ldr	r3, [pc, #380]	@ (800c2b0 <_SendPacket+0x1c0>)
 800c134:	69da      	ldr	r2, [r3, #28]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	fa22 f303 	lsr.w	r3, r2, r3
 800c13c:	f003 0301 	and.w	r3, r3, #1
 800c140:	2b00      	cmp	r3, #0
 800c142:	f040 808b 	bne.w	800c25c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b17      	cmp	r3, #23
 800c14a:	d807      	bhi.n	800c15c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	3b01      	subs	r3, #1
 800c150:	60fb      	str	r3, [r7, #12]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	b2da      	uxtb	r2, r3
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	701a      	strb	r2, [r3, #0]
 800c15a:	e03d      	b.n	800c1d8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800c15c:	68ba      	ldr	r2, [r7, #8]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	1ad3      	subs	r3, r2, r3
 800c162:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	2b7f      	cmp	r3, #127	@ 0x7f
 800c168:	d912      	bls.n	800c190 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	09da      	lsrs	r2, r3, #7
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	3b01      	subs	r3, #1
 800c172:	60fb      	str	r3, [r7, #12]
 800c174:	b2d2      	uxtb	r2, r2
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	3a01      	subs	r2, #1
 800c182:	60fa      	str	r2, [r7, #12]
 800c184:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c188:	b2da      	uxtb	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	701a      	strb	r2, [r3, #0]
 800c18e:	e006      	b.n	800c19e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	3b01      	subs	r3, #1
 800c194:	60fb      	str	r3, [r7, #12]
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	b2da      	uxtb	r2, r3
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2b7f      	cmp	r3, #127	@ 0x7f
 800c1a2:	d912      	bls.n	800c1ca <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	09da      	lsrs	r2, r3, #7
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	60fb      	str	r3, [r7, #12]
 800c1ae:	b2d2      	uxtb	r2, r2
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	68fa      	ldr	r2, [r7, #12]
 800c1ba:	3a01      	subs	r2, #1
 800c1bc:	60fa      	str	r2, [r7, #12]
 800c1be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c1c2:	b2da      	uxtb	r2, r3
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	701a      	strb	r2, [r3, #0]
 800c1c8:	e006      	b.n	800c1d8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	60fb      	str	r3, [r7, #12]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	b2da      	uxtb	r2, r3
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c1d8:	4b36      	ldr	r3, [pc, #216]	@ (800c2b4 <_SendPacket+0x1c4>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c1de:	4b34      	ldr	r3, [pc, #208]	@ (800c2b0 <_SendPacket+0x1c0>)
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	69ba      	ldr	r2, [r7, #24]
 800c1e4:	1ad3      	subs	r3, r2, r3
 800c1e6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	623b      	str	r3, [r7, #32]
 800c1f0:	e00b      	b.n	800c20a <_SendPacket+0x11a>
 800c1f2:	6a3b      	ldr	r3, [r7, #32]
 800c1f4:	b2da      	uxtb	r2, r3
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f8:	1c59      	adds	r1, r3, #1
 800c1fa:	6279      	str	r1, [r7, #36]	@ 0x24
 800c1fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c200:	b2d2      	uxtb	r2, r2
 800c202:	701a      	strb	r2, [r3, #0]
 800c204:	6a3b      	ldr	r3, [r7, #32]
 800c206:	09db      	lsrs	r3, r3, #7
 800c208:	623b      	str	r3, [r7, #32]
 800c20a:	6a3b      	ldr	r3, [r7, #32]
 800c20c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c20e:	d8f0      	bhi.n	800c1f2 <_SendPacket+0x102>
 800c210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c212:	1c5a      	adds	r2, r3, #1
 800c214:	627a      	str	r2, [r7, #36]	@ 0x24
 800c216:	6a3a      	ldr	r2, [r7, #32]
 800c218:	b2d2      	uxtb	r2, r2
 800c21a:	701a      	strb	r2, [r3, #0]
 800c21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800c220:	4b23      	ldr	r3, [pc, #140]	@ (800c2b0 <_SendPacket+0x1c0>)
 800c222:	785b      	ldrb	r3, [r3, #1]
 800c224:	4618      	mov	r0, r3
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	1ad3      	subs	r3, r2, r3
 800c22c:	461a      	mov	r2, r3
 800c22e:	68f9      	ldr	r1, [r7, #12]
 800c230:	f7f3 ffbe 	bl	80001b0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c234:	4603      	mov	r3, r0
 800c236:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d003      	beq.n	800c246 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c23e:	4a1c      	ldr	r2, [pc, #112]	@ (800c2b0 <_SendPacket+0x1c0>)
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	60d3      	str	r3, [r2, #12]
 800c244:	e00b      	b.n	800c25e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800c246:	4b1a      	ldr	r3, [pc, #104]	@ (800c2b0 <_SendPacket+0x1c0>)
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	3301      	adds	r3, #1
 800c24c:	b2da      	uxtb	r2, r3
 800c24e:	4b18      	ldr	r3, [pc, #96]	@ (800c2b0 <_SendPacket+0x1c0>)
 800c250:	701a      	strb	r2, [r3, #0]
 800c252:	e004      	b.n	800c25e <_SendPacket+0x16e>
    goto SendDone;
 800c254:	bf00      	nop
 800c256:	e002      	b.n	800c25e <_SendPacket+0x16e>
      goto SendDone;
 800c258:	bf00      	nop
 800c25a:	e000      	b.n	800c25e <_SendPacket+0x16e>
      goto SendDone;
 800c25c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800c25e:	4b14      	ldr	r3, [pc, #80]	@ (800c2b0 <_SendPacket+0x1c0>)
 800c260:	7e1b      	ldrb	r3, [r3, #24]
 800c262:	4619      	mov	r1, r3
 800c264:	4a14      	ldr	r2, [pc, #80]	@ (800c2b8 <_SendPacket+0x1c8>)
 800c266:	460b      	mov	r3, r1
 800c268:	005b      	lsls	r3, r3, #1
 800c26a:	440b      	add	r3, r1
 800c26c:	00db      	lsls	r3, r3, #3
 800c26e:	4413      	add	r3, r2
 800c270:	336c      	adds	r3, #108	@ 0x6c
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	4b0e      	ldr	r3, [pc, #56]	@ (800c2b0 <_SendPacket+0x1c0>)
 800c276:	7e1b      	ldrb	r3, [r3, #24]
 800c278:	4618      	mov	r0, r3
 800c27a:	490f      	ldr	r1, [pc, #60]	@ (800c2b8 <_SendPacket+0x1c8>)
 800c27c:	4603      	mov	r3, r0
 800c27e:	005b      	lsls	r3, r3, #1
 800c280:	4403      	add	r3, r0
 800c282:	00db      	lsls	r3, r3, #3
 800c284:	440b      	add	r3, r1
 800c286:	3370      	adds	r3, #112	@ 0x70
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d00b      	beq.n	800c2a6 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800c28e:	4b08      	ldr	r3, [pc, #32]	@ (800c2b0 <_SendPacket+0x1c0>)
 800c290:	789b      	ldrb	r3, [r3, #2]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d107      	bne.n	800c2a6 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800c296:	4b06      	ldr	r3, [pc, #24]	@ (800c2b0 <_SendPacket+0x1c0>)
 800c298:	2201      	movs	r2, #1
 800c29a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800c29c:	f7ff fe46 	bl	800bf2c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800c2a0:	4b03      	ldr	r3, [pc, #12]	@ (800c2b0 <_SendPacket+0x1c0>)
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800c2a6:	bf00      	nop
 800c2a8:	3728      	adds	r7, #40	@ 0x28
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	2002b074 	.word	0x2002b074
 800c2b4:	e0001004 	.word	0xe0001004
 800c2b8:	2002a7b0 	.word	0x2002a7b0

0800c2bc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b086      	sub	sp, #24
 800c2c0:	af02      	add	r7, sp, #8
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	607a      	str	r2, [r7, #4]
 800c2c8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c2d0:	4917      	ldr	r1, [pc, #92]	@ (800c330 <SEGGER_SYSVIEW_Init+0x74>)
 800c2d2:	4818      	ldr	r0, [pc, #96]	@ (800c334 <SEGGER_SYSVIEW_Init+0x78>)
 800c2d4:	f7ff fcfe 	bl	800bcd4 <SEGGER_RTT_AllocUpBuffer>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	b2da      	uxtb	r2, r3
 800c2dc:	4b16      	ldr	r3, [pc, #88]	@ (800c338 <SEGGER_SYSVIEW_Init+0x7c>)
 800c2de:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800c2e0:	4b15      	ldr	r3, [pc, #84]	@ (800c338 <SEGGER_SYSVIEW_Init+0x7c>)
 800c2e2:	785a      	ldrb	r2, [r3, #1]
 800c2e4:	4b14      	ldr	r3, [pc, #80]	@ (800c338 <SEGGER_SYSVIEW_Init+0x7c>)
 800c2e6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c2e8:	4b13      	ldr	r3, [pc, #76]	@ (800c338 <SEGGER_SYSVIEW_Init+0x7c>)
 800c2ea:	7e1b      	ldrb	r3, [r3, #24]
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	2308      	movs	r3, #8
 800c2f4:	4a11      	ldr	r2, [pc, #68]	@ (800c33c <SEGGER_SYSVIEW_Init+0x80>)
 800c2f6:	490f      	ldr	r1, [pc, #60]	@ (800c334 <SEGGER_SYSVIEW_Init+0x78>)
 800c2f8:	f7ff fd70 	bl	800bddc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800c2fc:	4b0e      	ldr	r3, [pc, #56]	@ (800c338 <SEGGER_SYSVIEW_Init+0x7c>)
 800c2fe:	2200      	movs	r2, #0
 800c300:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c302:	4b0f      	ldr	r3, [pc, #60]	@ (800c340 <SEGGER_SYSVIEW_Init+0x84>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a0c      	ldr	r2, [pc, #48]	@ (800c338 <SEGGER_SYSVIEW_Init+0x7c>)
 800c308:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800c30a:	4a0b      	ldr	r2, [pc, #44]	@ (800c338 <SEGGER_SYSVIEW_Init+0x7c>)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800c310:	4a09      	ldr	r2, [pc, #36]	@ (800c338 <SEGGER_SYSVIEW_Init+0x7c>)
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800c316:	4a08      	ldr	r2, [pc, #32]	@ (800c338 <SEGGER_SYSVIEW_Init+0x7c>)
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800c31c:	4a06      	ldr	r2, [pc, #24]	@ (800c338 <SEGGER_SYSVIEW_Init+0x7c>)
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800c322:	4b05      	ldr	r3, [pc, #20]	@ (800c338 <SEGGER_SYSVIEW_Init+0x7c>)
 800c324:	2200      	movs	r2, #0
 800c326:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800c328:	bf00      	nop
 800c32a:	3710      	adds	r7, #16
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	2002ac6c 	.word	0x2002ac6c
 800c334:	08010480 	.word	0x08010480
 800c338:	2002b074 	.word	0x2002b074
 800c33c:	2002b06c 	.word	0x2002b06c
 800c340:	e0001004 	.word	0xe0001004

0800c344 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800c34c:	4a04      	ldr	r2, [pc, #16]	@ (800c360 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6113      	str	r3, [r2, #16]
}
 800c352:	bf00      	nop
 800c354:	370c      	adds	r7, #12
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	2002b074 	.word	0x2002b074

0800c364 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c36c:	f3ef 8311 	mrs	r3, BASEPRI
 800c370:	f04f 0120 	mov.w	r1, #32
 800c374:	f381 8811 	msr	BASEPRI, r1
 800c378:	60fb      	str	r3, [r7, #12]
 800c37a:	4808      	ldr	r0, [pc, #32]	@ (800c39c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800c37c:	f7ff fdca 	bl	800bf14 <_PreparePacket>
 800c380:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	68b9      	ldr	r1, [r7, #8]
 800c386:	68b8      	ldr	r0, [r7, #8]
 800c388:	f7ff feb2 	bl	800c0f0 <_SendPacket>
  RECORD_END();
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f383 8811 	msr	BASEPRI, r3
}
 800c392:	bf00      	nop
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	2002b0a4 	.word	0x2002b0a4

0800c3a0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b088      	sub	sp, #32
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c3aa:	f3ef 8311 	mrs	r3, BASEPRI
 800c3ae:	f04f 0120 	mov.w	r1, #32
 800c3b2:	f381 8811 	msr	BASEPRI, r1
 800c3b6:	617b      	str	r3, [r7, #20]
 800c3b8:	4816      	ldr	r0, [pc, #88]	@ (800c414 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800c3ba:	f7ff fdab 	bl	800bf14 <_PreparePacket>
 800c3be:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	61fb      	str	r3, [r7, #28]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	61bb      	str	r3, [r7, #24]
 800c3cc:	e00b      	b.n	800c3e6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	b2da      	uxtb	r2, r3
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	1c59      	adds	r1, r3, #1
 800c3d6:	61f9      	str	r1, [r7, #28]
 800c3d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c3dc:	b2d2      	uxtb	r2, r2
 800c3de:	701a      	strb	r2, [r3, #0]
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	09db      	lsrs	r3, r3, #7
 800c3e4:	61bb      	str	r3, [r7, #24]
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3ea:	d8f0      	bhi.n	800c3ce <SEGGER_SYSVIEW_RecordU32+0x2e>
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	1c5a      	adds	r2, r3, #1
 800c3f0:	61fa      	str	r2, [r7, #28]
 800c3f2:	69ba      	ldr	r2, [r7, #24]
 800c3f4:	b2d2      	uxtb	r2, r2
 800c3f6:	701a      	strb	r2, [r3, #0]
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	68f9      	ldr	r1, [r7, #12]
 800c400:	6938      	ldr	r0, [r7, #16]
 800c402:	f7ff fe75 	bl	800c0f0 <_SendPacket>
  RECORD_END();
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	f383 8811 	msr	BASEPRI, r3
}
 800c40c:	bf00      	nop
 800c40e:	3720      	adds	r7, #32
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	2002b0a4 	.word	0x2002b0a4

0800c418 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800c418:	b580      	push	{r7, lr}
 800c41a:	b08c      	sub	sp, #48	@ 0x30
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c424:	f3ef 8311 	mrs	r3, BASEPRI
 800c428:	f04f 0120 	mov.w	r1, #32
 800c42c:	f381 8811 	msr	BASEPRI, r1
 800c430:	61fb      	str	r3, [r7, #28]
 800c432:	4825      	ldr	r0, [pc, #148]	@ (800c4c8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800c434:	f7ff fd6e 	bl	800bf14 <_PreparePacket>
 800c438:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c446:	e00b      	b.n	800c460 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800c448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c44a:	b2da      	uxtb	r2, r3
 800c44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c44e:	1c59      	adds	r1, r3, #1
 800c450:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c452:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c456:	b2d2      	uxtb	r2, r2
 800c458:	701a      	strb	r2, [r3, #0]
 800c45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c45c:	09db      	lsrs	r3, r3, #7
 800c45e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c462:	2b7f      	cmp	r3, #127	@ 0x7f
 800c464:	d8f0      	bhi.n	800c448 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800c466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c468:	1c5a      	adds	r2, r3, #1
 800c46a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c46c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c46e:	b2d2      	uxtb	r2, r2
 800c470:	701a      	strb	r2, [r3, #0]
 800c472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c474:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	627b      	str	r3, [r7, #36]	@ 0x24
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	623b      	str	r3, [r7, #32]
 800c47e:	e00b      	b.n	800c498 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800c480:	6a3b      	ldr	r3, [r7, #32]
 800c482:	b2da      	uxtb	r2, r3
 800c484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c486:	1c59      	adds	r1, r3, #1
 800c488:	6279      	str	r1, [r7, #36]	@ 0x24
 800c48a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c48e:	b2d2      	uxtb	r2, r2
 800c490:	701a      	strb	r2, [r3, #0]
 800c492:	6a3b      	ldr	r3, [r7, #32]
 800c494:	09db      	lsrs	r3, r3, #7
 800c496:	623b      	str	r3, [r7, #32]
 800c498:	6a3b      	ldr	r3, [r7, #32]
 800c49a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c49c:	d8f0      	bhi.n	800c480 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800c49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a0:	1c5a      	adds	r2, r3, #1
 800c4a2:	627a      	str	r2, [r7, #36]	@ 0x24
 800c4a4:	6a3a      	ldr	r2, [r7, #32]
 800c4a6:	b2d2      	uxtb	r2, r2
 800c4a8:	701a      	strb	r2, [r3, #0]
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ac:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	6979      	ldr	r1, [r7, #20]
 800c4b2:	69b8      	ldr	r0, [r7, #24]
 800c4b4:	f7ff fe1c 	bl	800c0f0 <_SendPacket>
  RECORD_END();
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	f383 8811 	msr	BASEPRI, r3
}
 800c4be:	bf00      	nop
 800c4c0:	3730      	adds	r7, #48	@ 0x30
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	2002b0a4 	.word	0x2002b0a4

0800c4cc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b08e      	sub	sp, #56	@ 0x38
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
 800c4d8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800c4da:	f3ef 8311 	mrs	r3, BASEPRI
 800c4de:	f04f 0120 	mov.w	r1, #32
 800c4e2:	f381 8811 	msr	BASEPRI, r1
 800c4e6:	61fb      	str	r3, [r7, #28]
 800c4e8:	4832      	ldr	r0, [pc, #200]	@ (800c5b4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800c4ea:	f7ff fd13 	bl	800bf14 <_PreparePacket>
 800c4ee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4fc:	e00b      	b.n	800c516 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c500:	b2da      	uxtb	r2, r3
 800c502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c504:	1c59      	adds	r1, r3, #1
 800c506:	6379      	str	r1, [r7, #52]	@ 0x34
 800c508:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c50c:	b2d2      	uxtb	r2, r2
 800c50e:	701a      	strb	r2, [r3, #0]
 800c510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c512:	09db      	lsrs	r3, r3, #7
 800c514:	633b      	str	r3, [r7, #48]	@ 0x30
 800c516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c518:	2b7f      	cmp	r3, #127	@ 0x7f
 800c51a:	d8f0      	bhi.n	800c4fe <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800c51c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c51e:	1c5a      	adds	r2, r3, #1
 800c520:	637a      	str	r2, [r7, #52]	@ 0x34
 800c522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c524:	b2d2      	uxtb	r2, r2
 800c526:	701a      	strb	r2, [r3, #0]
 800c528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c52a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c534:	e00b      	b.n	800c54e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800c536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c538:	b2da      	uxtb	r2, r3
 800c53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c53c:	1c59      	adds	r1, r3, #1
 800c53e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c540:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c544:	b2d2      	uxtb	r2, r2
 800c546:	701a      	strb	r2, [r3, #0]
 800c548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c54a:	09db      	lsrs	r3, r3, #7
 800c54c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c550:	2b7f      	cmp	r3, #127	@ 0x7f
 800c552:	d8f0      	bhi.n	800c536 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800c554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c556:	1c5a      	adds	r2, r3, #1
 800c558:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c55a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c55c:	b2d2      	uxtb	r2, r2
 800c55e:	701a      	strb	r2, [r3, #0]
 800c560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c562:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	627b      	str	r3, [r7, #36]	@ 0x24
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	623b      	str	r3, [r7, #32]
 800c56c:	e00b      	b.n	800c586 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800c56e:	6a3b      	ldr	r3, [r7, #32]
 800c570:	b2da      	uxtb	r2, r3
 800c572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c574:	1c59      	adds	r1, r3, #1
 800c576:	6279      	str	r1, [r7, #36]	@ 0x24
 800c578:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c57c:	b2d2      	uxtb	r2, r2
 800c57e:	701a      	strb	r2, [r3, #0]
 800c580:	6a3b      	ldr	r3, [r7, #32]
 800c582:	09db      	lsrs	r3, r3, #7
 800c584:	623b      	str	r3, [r7, #32]
 800c586:	6a3b      	ldr	r3, [r7, #32]
 800c588:	2b7f      	cmp	r3, #127	@ 0x7f
 800c58a:	d8f0      	bhi.n	800c56e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800c58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58e:	1c5a      	adds	r2, r3, #1
 800c590:	627a      	str	r2, [r7, #36]	@ 0x24
 800c592:	6a3a      	ldr	r2, [r7, #32]
 800c594:	b2d2      	uxtb	r2, r2
 800c596:	701a      	strb	r2, [r3, #0]
 800c598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	6979      	ldr	r1, [r7, #20]
 800c5a0:	69b8      	ldr	r0, [r7, #24]
 800c5a2:	f7ff fda5 	bl	800c0f0 <_SendPacket>
  RECORD_END();
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	f383 8811 	msr	BASEPRI, r3
}
 800c5ac:	bf00      	nop
 800c5ae:	3738      	adds	r7, #56	@ 0x38
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	2002b0a4 	.word	0x2002b0a4

0800c5b8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b090      	sub	sp, #64	@ 0x40
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	60b9      	str	r1, [r7, #8]
 800c5c2:	607a      	str	r2, [r7, #4]
 800c5c4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c5c6:	f3ef 8311 	mrs	r3, BASEPRI
 800c5ca:	f04f 0120 	mov.w	r1, #32
 800c5ce:	f381 8811 	msr	BASEPRI, r1
 800c5d2:	61fb      	str	r3, [r7, #28]
 800c5d4:	4840      	ldr	r0, [pc, #256]	@ (800c6d8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800c5d6:	f7ff fc9d 	bl	800bf14 <_PreparePacket>
 800c5da:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c5e8:	e00b      	b.n	800c602 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800c5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ec:	b2da      	uxtb	r2, r3
 800c5ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5f0:	1c59      	adds	r1, r3, #1
 800c5f2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800c5f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c5f8:	b2d2      	uxtb	r2, r2
 800c5fa:	701a      	strb	r2, [r3, #0]
 800c5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5fe:	09db      	lsrs	r3, r3, #7
 800c600:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c604:	2b7f      	cmp	r3, #127	@ 0x7f
 800c606:	d8f0      	bhi.n	800c5ea <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800c608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c60a:	1c5a      	adds	r2, r3, #1
 800c60c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800c60e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c610:	b2d2      	uxtb	r2, r2
 800c612:	701a      	strb	r2, [r3, #0]
 800c614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c616:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c620:	e00b      	b.n	800c63a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800c622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c624:	b2da      	uxtb	r2, r3
 800c626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c628:	1c59      	adds	r1, r3, #1
 800c62a:	6379      	str	r1, [r7, #52]	@ 0x34
 800c62c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c630:	b2d2      	uxtb	r2, r2
 800c632:	701a      	strb	r2, [r3, #0]
 800c634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c636:	09db      	lsrs	r3, r3, #7
 800c638:	633b      	str	r3, [r7, #48]	@ 0x30
 800c63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c63c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c63e:	d8f0      	bhi.n	800c622 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800c640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c642:	1c5a      	adds	r2, r3, #1
 800c644:	637a      	str	r2, [r7, #52]	@ 0x34
 800c646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c648:	b2d2      	uxtb	r2, r2
 800c64a:	701a      	strb	r2, [r3, #0]
 800c64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c64e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c658:	e00b      	b.n	800c672 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800c65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c65c:	b2da      	uxtb	r2, r3
 800c65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c660:	1c59      	adds	r1, r3, #1
 800c662:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c664:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c668:	b2d2      	uxtb	r2, r2
 800c66a:	701a      	strb	r2, [r3, #0]
 800c66c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c66e:	09db      	lsrs	r3, r3, #7
 800c670:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c674:	2b7f      	cmp	r3, #127	@ 0x7f
 800c676:	d8f0      	bhi.n	800c65a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800c678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c67a:	1c5a      	adds	r2, r3, #1
 800c67c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c67e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c680:	b2d2      	uxtb	r2, r2
 800c682:	701a      	strb	r2, [r3, #0]
 800c684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c686:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c68c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c68e:	623b      	str	r3, [r7, #32]
 800c690:	e00b      	b.n	800c6aa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800c692:	6a3b      	ldr	r3, [r7, #32]
 800c694:	b2da      	uxtb	r2, r3
 800c696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c698:	1c59      	adds	r1, r3, #1
 800c69a:	6279      	str	r1, [r7, #36]	@ 0x24
 800c69c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c6a0:	b2d2      	uxtb	r2, r2
 800c6a2:	701a      	strb	r2, [r3, #0]
 800c6a4:	6a3b      	ldr	r3, [r7, #32]
 800c6a6:	09db      	lsrs	r3, r3, #7
 800c6a8:	623b      	str	r3, [r7, #32]
 800c6aa:	6a3b      	ldr	r3, [r7, #32]
 800c6ac:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6ae:	d8f0      	bhi.n	800c692 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800c6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b2:	1c5a      	adds	r2, r3, #1
 800c6b4:	627a      	str	r2, [r7, #36]	@ 0x24
 800c6b6:	6a3a      	ldr	r2, [r7, #32]
 800c6b8:	b2d2      	uxtb	r2, r2
 800c6ba:	701a      	strb	r2, [r3, #0]
 800c6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6be:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c6c0:	68fa      	ldr	r2, [r7, #12]
 800c6c2:	6979      	ldr	r1, [r7, #20]
 800c6c4:	69b8      	ldr	r0, [r7, #24]
 800c6c6:	f7ff fd13 	bl	800c0f0 <_SendPacket>
  RECORD_END();
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	f383 8811 	msr	BASEPRI, r3
}
 800c6d0:	bf00      	nop
 800c6d2:	3740      	adds	r7, #64	@ 0x40
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	2002b0a4 	.word	0x2002b0a4

0800c6dc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b08c      	sub	sp, #48	@ 0x30
 800c6e0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800c6e2:	4b58      	ldr	r3, [pc, #352]	@ (800c844 <SEGGER_SYSVIEW_Start+0x168>)
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800c6e8:	f3ef 8311 	mrs	r3, BASEPRI
 800c6ec:	f04f 0120 	mov.w	r1, #32
 800c6f0:	f381 8811 	msr	BASEPRI, r1
 800c6f4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800c6f6:	4b53      	ldr	r3, [pc, #332]	@ (800c844 <SEGGER_SYSVIEW_Start+0x168>)
 800c6f8:	785b      	ldrb	r3, [r3, #1]
 800c6fa:	220a      	movs	r2, #10
 800c6fc:	4952      	ldr	r1, [pc, #328]	@ (800c848 <SEGGER_SYSVIEW_Start+0x16c>)
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7f3 fd56 	bl	80001b0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800c70a:	200a      	movs	r0, #10
 800c70c:	f7ff fe2a 	bl	800c364 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c710:	f3ef 8311 	mrs	r3, BASEPRI
 800c714:	f04f 0120 	mov.w	r1, #32
 800c718:	f381 8811 	msr	BASEPRI, r1
 800c71c:	60bb      	str	r3, [r7, #8]
 800c71e:	484b      	ldr	r0, [pc, #300]	@ (800c84c <SEGGER_SYSVIEW_Start+0x170>)
 800c720:	f7ff fbf8 	bl	800bf14 <_PreparePacket>
 800c724:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c72e:	4b45      	ldr	r3, [pc, #276]	@ (800c844 <SEGGER_SYSVIEW_Start+0x168>)
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c734:	e00b      	b.n	800c74e <SEGGER_SYSVIEW_Start+0x72>
 800c736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c738:	b2da      	uxtb	r2, r3
 800c73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c73c:	1c59      	adds	r1, r3, #1
 800c73e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c740:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c744:	b2d2      	uxtb	r2, r2
 800c746:	701a      	strb	r2, [r3, #0]
 800c748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c74a:	09db      	lsrs	r3, r3, #7
 800c74c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c750:	2b7f      	cmp	r3, #127	@ 0x7f
 800c752:	d8f0      	bhi.n	800c736 <SEGGER_SYSVIEW_Start+0x5a>
 800c754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c756:	1c5a      	adds	r2, r3, #1
 800c758:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c75a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c75c:	b2d2      	uxtb	r2, r2
 800c75e:	701a      	strb	r2, [r3, #0]
 800c760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c762:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	627b      	str	r3, [r7, #36]	@ 0x24
 800c768:	4b36      	ldr	r3, [pc, #216]	@ (800c844 <SEGGER_SYSVIEW_Start+0x168>)
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	623b      	str	r3, [r7, #32]
 800c76e:	e00b      	b.n	800c788 <SEGGER_SYSVIEW_Start+0xac>
 800c770:	6a3b      	ldr	r3, [r7, #32]
 800c772:	b2da      	uxtb	r2, r3
 800c774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c776:	1c59      	adds	r1, r3, #1
 800c778:	6279      	str	r1, [r7, #36]	@ 0x24
 800c77a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c77e:	b2d2      	uxtb	r2, r2
 800c780:	701a      	strb	r2, [r3, #0]
 800c782:	6a3b      	ldr	r3, [r7, #32]
 800c784:	09db      	lsrs	r3, r3, #7
 800c786:	623b      	str	r3, [r7, #32]
 800c788:	6a3b      	ldr	r3, [r7, #32]
 800c78a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c78c:	d8f0      	bhi.n	800c770 <SEGGER_SYSVIEW_Start+0x94>
 800c78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c790:	1c5a      	adds	r2, r3, #1
 800c792:	627a      	str	r2, [r7, #36]	@ 0x24
 800c794:	6a3a      	ldr	r2, [r7, #32]
 800c796:	b2d2      	uxtb	r2, r2
 800c798:	701a      	strb	r2, [r3, #0]
 800c79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	61fb      	str	r3, [r7, #28]
 800c7a2:	4b28      	ldr	r3, [pc, #160]	@ (800c844 <SEGGER_SYSVIEW_Start+0x168>)
 800c7a4:	691b      	ldr	r3, [r3, #16]
 800c7a6:	61bb      	str	r3, [r7, #24]
 800c7a8:	e00b      	b.n	800c7c2 <SEGGER_SYSVIEW_Start+0xe6>
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	b2da      	uxtb	r2, r3
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	1c59      	adds	r1, r3, #1
 800c7b2:	61f9      	str	r1, [r7, #28]
 800c7b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c7b8:	b2d2      	uxtb	r2, r2
 800c7ba:	701a      	strb	r2, [r3, #0]
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	09db      	lsrs	r3, r3, #7
 800c7c0:	61bb      	str	r3, [r7, #24]
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7c6:	d8f0      	bhi.n	800c7aa <SEGGER_SYSVIEW_Start+0xce>
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	1c5a      	adds	r2, r3, #1
 800c7cc:	61fa      	str	r2, [r7, #28]
 800c7ce:	69ba      	ldr	r2, [r7, #24]
 800c7d0:	b2d2      	uxtb	r2, r2
 800c7d2:	701a      	strb	r2, [r3, #0]
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	617b      	str	r3, [r7, #20]
 800c7dc:	2300      	movs	r3, #0
 800c7de:	613b      	str	r3, [r7, #16]
 800c7e0:	e00b      	b.n	800c7fa <SEGGER_SYSVIEW_Start+0x11e>
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	b2da      	uxtb	r2, r3
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	1c59      	adds	r1, r3, #1
 800c7ea:	6179      	str	r1, [r7, #20]
 800c7ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c7f0:	b2d2      	uxtb	r2, r2
 800c7f2:	701a      	strb	r2, [r3, #0]
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	09db      	lsrs	r3, r3, #7
 800c7f8:	613b      	str	r3, [r7, #16]
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7fe:	d8f0      	bhi.n	800c7e2 <SEGGER_SYSVIEW_Start+0x106>
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	1c5a      	adds	r2, r3, #1
 800c804:	617a      	str	r2, [r7, #20]
 800c806:	693a      	ldr	r2, [r7, #16]
 800c808:	b2d2      	uxtb	r2, r2
 800c80a:	701a      	strb	r2, [r3, #0]
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c810:	2218      	movs	r2, #24
 800c812:	6839      	ldr	r1, [r7, #0]
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f7ff fc6b 	bl	800c0f0 <_SendPacket>
      RECORD_END();
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c820:	4b08      	ldr	r3, [pc, #32]	@ (800c844 <SEGGER_SYSVIEW_Start+0x168>)
 800c822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c824:	2b00      	cmp	r3, #0
 800c826:	d002      	beq.n	800c82e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800c828:	4b06      	ldr	r3, [pc, #24]	@ (800c844 <SEGGER_SYSVIEW_Start+0x168>)
 800c82a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c82c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800c82e:	f000 f9eb 	bl	800cc08 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800c832:	f000 f9b1 	bl	800cb98 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800c836:	f000 fba9 	bl	800cf8c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800c83a:	bf00      	nop
 800c83c:	3730      	adds	r7, #48	@ 0x30
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	2002b074 	.word	0x2002b074
 800c848:	08011718 	.word	0x08011718
 800c84c:	2002b0a4 	.word	0x2002b0a4

0800c850 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c856:	f3ef 8311 	mrs	r3, BASEPRI
 800c85a:	f04f 0120 	mov.w	r1, #32
 800c85e:	f381 8811 	msr	BASEPRI, r1
 800c862:	607b      	str	r3, [r7, #4]
 800c864:	480b      	ldr	r0, [pc, #44]	@ (800c894 <SEGGER_SYSVIEW_Stop+0x44>)
 800c866:	f7ff fb55 	bl	800bf14 <_PreparePacket>
 800c86a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800c86c:	4b0a      	ldr	r3, [pc, #40]	@ (800c898 <SEGGER_SYSVIEW_Stop+0x48>)
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d007      	beq.n	800c884 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800c874:	220b      	movs	r2, #11
 800c876:	6839      	ldr	r1, [r7, #0]
 800c878:	6838      	ldr	r0, [r7, #0]
 800c87a:	f7ff fc39 	bl	800c0f0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800c87e:	4b06      	ldr	r3, [pc, #24]	@ (800c898 <SEGGER_SYSVIEW_Stop+0x48>)
 800c880:	2200      	movs	r2, #0
 800c882:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f383 8811 	msr	BASEPRI, r3
}
 800c88a:	bf00      	nop
 800c88c:	3708      	adds	r7, #8
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
 800c892:	bf00      	nop
 800c894:	2002b0a4 	.word	0x2002b0a4
 800c898:	2002b074 	.word	0x2002b074

0800c89c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b08c      	sub	sp, #48	@ 0x30
 800c8a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c8a2:	f3ef 8311 	mrs	r3, BASEPRI
 800c8a6:	f04f 0120 	mov.w	r1, #32
 800c8aa:	f381 8811 	msr	BASEPRI, r1
 800c8ae:	60fb      	str	r3, [r7, #12]
 800c8b0:	4845      	ldr	r0, [pc, #276]	@ (800c9c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800c8b2:	f7ff fb2f 	bl	800bf14 <_PreparePacket>
 800c8b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8c0:	4b42      	ldr	r3, [pc, #264]	@ (800c9cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8c6:	e00b      	b.n	800c8e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800c8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ce:	1c59      	adds	r1, r3, #1
 800c8d0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c8d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c8d6:	b2d2      	uxtb	r2, r2
 800c8d8:	701a      	strb	r2, [r3, #0]
 800c8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8dc:	09db      	lsrs	r3, r3, #7
 800c8de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8e4:	d8f0      	bhi.n	800c8c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800c8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e8:	1c5a      	adds	r2, r3, #1
 800c8ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c8ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c8ee:	b2d2      	uxtb	r2, r2
 800c8f0:	701a      	strb	r2, [r3, #0]
 800c8f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8fa:	4b34      	ldr	r3, [pc, #208]	@ (800c9cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c8fc:	689b      	ldr	r3, [r3, #8]
 800c8fe:	623b      	str	r3, [r7, #32]
 800c900:	e00b      	b.n	800c91a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800c902:	6a3b      	ldr	r3, [r7, #32]
 800c904:	b2da      	uxtb	r2, r3
 800c906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c908:	1c59      	adds	r1, r3, #1
 800c90a:	6279      	str	r1, [r7, #36]	@ 0x24
 800c90c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c910:	b2d2      	uxtb	r2, r2
 800c912:	701a      	strb	r2, [r3, #0]
 800c914:	6a3b      	ldr	r3, [r7, #32]
 800c916:	09db      	lsrs	r3, r3, #7
 800c918:	623b      	str	r3, [r7, #32]
 800c91a:	6a3b      	ldr	r3, [r7, #32]
 800c91c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c91e:	d8f0      	bhi.n	800c902 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800c920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c922:	1c5a      	adds	r2, r3, #1
 800c924:	627a      	str	r2, [r7, #36]	@ 0x24
 800c926:	6a3a      	ldr	r2, [r7, #32]
 800c928:	b2d2      	uxtb	r2, r2
 800c92a:	701a      	strb	r2, [r3, #0]
 800c92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c92e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	61fb      	str	r3, [r7, #28]
 800c934:	4b25      	ldr	r3, [pc, #148]	@ (800c9cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c936:	691b      	ldr	r3, [r3, #16]
 800c938:	61bb      	str	r3, [r7, #24]
 800c93a:	e00b      	b.n	800c954 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	b2da      	uxtb	r2, r3
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	1c59      	adds	r1, r3, #1
 800c944:	61f9      	str	r1, [r7, #28]
 800c946:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c94a:	b2d2      	uxtb	r2, r2
 800c94c:	701a      	strb	r2, [r3, #0]
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	09db      	lsrs	r3, r3, #7
 800c952:	61bb      	str	r3, [r7, #24]
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	2b7f      	cmp	r3, #127	@ 0x7f
 800c958:	d8f0      	bhi.n	800c93c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	1c5a      	adds	r2, r3, #1
 800c95e:	61fa      	str	r2, [r7, #28]
 800c960:	69ba      	ldr	r2, [r7, #24]
 800c962:	b2d2      	uxtb	r2, r2
 800c964:	701a      	strb	r2, [r3, #0]
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	617b      	str	r3, [r7, #20]
 800c96e:	2300      	movs	r3, #0
 800c970:	613b      	str	r3, [r7, #16]
 800c972:	e00b      	b.n	800c98c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	b2da      	uxtb	r2, r3
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	1c59      	adds	r1, r3, #1
 800c97c:	6179      	str	r1, [r7, #20]
 800c97e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c982:	b2d2      	uxtb	r2, r2
 800c984:	701a      	strb	r2, [r3, #0]
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	09db      	lsrs	r3, r3, #7
 800c98a:	613b      	str	r3, [r7, #16]
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c990:	d8f0      	bhi.n	800c974 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	1c5a      	adds	r2, r3, #1
 800c996:	617a      	str	r2, [r7, #20]
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	b2d2      	uxtb	r2, r2
 800c99c:	701a      	strb	r2, [r3, #0]
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c9a2:	2218      	movs	r2, #24
 800c9a4:	6879      	ldr	r1, [r7, #4]
 800c9a6:	68b8      	ldr	r0, [r7, #8]
 800c9a8:	f7ff fba2 	bl	800c0f0 <_SendPacket>
  RECORD_END();
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c9b2:	4b06      	ldr	r3, [pc, #24]	@ (800c9cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c9b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d002      	beq.n	800c9c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800c9ba:	4b04      	ldr	r3, [pc, #16]	@ (800c9cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9be:	4798      	blx	r3
  }
}
 800c9c0:	bf00      	nop
 800c9c2:	3730      	adds	r7, #48	@ 0x30
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	2002b0a4 	.word	0x2002b0a4
 800c9cc:	2002b074 	.word	0x2002b074

0800c9d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b092      	sub	sp, #72	@ 0x48
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800c9d8:	f3ef 8311 	mrs	r3, BASEPRI
 800c9dc:	f04f 0120 	mov.w	r1, #32
 800c9e0:	f381 8811 	msr	BASEPRI, r1
 800c9e4:	617b      	str	r3, [r7, #20]
 800c9e6:	486a      	ldr	r0, [pc, #424]	@ (800cb90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800c9e8:	f7ff fa94 	bl	800bf14 <_PreparePacket>
 800c9ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	4b66      	ldr	r3, [pc, #408]	@ (800cb94 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c9fc:	691b      	ldr	r3, [r3, #16]
 800c9fe:	1ad3      	subs	r3, r2, r3
 800ca00:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca02:	e00b      	b.n	800ca1c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800ca04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca06:	b2da      	uxtb	r2, r3
 800ca08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca0a:	1c59      	adds	r1, r3, #1
 800ca0c:	6479      	str	r1, [r7, #68]	@ 0x44
 800ca0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ca12:	b2d2      	uxtb	r2, r2
 800ca14:	701a      	strb	r2, [r3, #0]
 800ca16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca18:	09db      	lsrs	r3, r3, #7
 800ca1a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca1e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca20:	d8f0      	bhi.n	800ca04 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800ca22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca24:	1c5a      	adds	r2, r3, #1
 800ca26:	647a      	str	r2, [r7, #68]	@ 0x44
 800ca28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ca2a:	b2d2      	uxtb	r2, r2
 800ca2c:	701a      	strb	r2, [r3, #0]
 800ca2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca3c:	e00b      	b.n	800ca56 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800ca3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca40:	b2da      	uxtb	r2, r3
 800ca42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca44:	1c59      	adds	r1, r3, #1
 800ca46:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800ca48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ca4c:	b2d2      	uxtb	r2, r2
 800ca4e:	701a      	strb	r2, [r3, #0]
 800ca50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca52:	09db      	lsrs	r3, r3, #7
 800ca54:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca58:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca5a:	d8f0      	bhi.n	800ca3e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800ca5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca5e:	1c5a      	adds	r2, r3, #1
 800ca60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800ca62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca64:	b2d2      	uxtb	r2, r2
 800ca66:	701a      	strb	r2, [r3, #0]
 800ca68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca6a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	2220      	movs	r2, #32
 800ca72:	4619      	mov	r1, r3
 800ca74:	68f8      	ldr	r0, [r7, #12]
 800ca76:	f7ff f9fd 	bl	800be74 <_EncodeStr>
 800ca7a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800ca7c:	2209      	movs	r2, #9
 800ca7e:	68f9      	ldr	r1, [r7, #12]
 800ca80:	6938      	ldr	r0, [r7, #16]
 800ca82:	f7ff fb35 	bl	800c0f0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	4b40      	ldr	r3, [pc, #256]	@ (800cb94 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800ca94:	691b      	ldr	r3, [r3, #16]
 800ca96:	1ad3      	subs	r3, r2, r3
 800ca98:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca9a:	e00b      	b.n	800cab4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800ca9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caa2:	1c59      	adds	r1, r3, #1
 800caa4:	6379      	str	r1, [r7, #52]	@ 0x34
 800caa6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800caaa:	b2d2      	uxtb	r2, r2
 800caac:	701a      	strb	r2, [r3, #0]
 800caae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab0:	09db      	lsrs	r3, r3, #7
 800cab2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab6:	2b7f      	cmp	r3, #127	@ 0x7f
 800cab8:	d8f0      	bhi.n	800ca9c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800caba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cabc:	1c5a      	adds	r2, r3, #1
 800cabe:	637a      	str	r2, [r7, #52]	@ 0x34
 800cac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cac2:	b2d2      	uxtb	r2, r2
 800cac4:	701a      	strb	r2, [r3, #0]
 800cac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cac8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cad4:	e00b      	b.n	800caee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800cad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cad8:	b2da      	uxtb	r2, r3
 800cada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cadc:	1c59      	adds	r1, r3, #1
 800cade:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800cae0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cae4:	b2d2      	uxtb	r2, r2
 800cae6:	701a      	strb	r2, [r3, #0]
 800cae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caea:	09db      	lsrs	r3, r3, #7
 800caec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800caee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caf0:	2b7f      	cmp	r3, #127	@ 0x7f
 800caf2:	d8f0      	bhi.n	800cad6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800caf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caf6:	1c5a      	adds	r2, r3, #1
 800caf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cafa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cafc:	b2d2      	uxtb	r2, r2
 800cafe:	701a      	strb	r2, [r3, #0]
 800cb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb02:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	691b      	ldr	r3, [r3, #16]
 800cb0c:	623b      	str	r3, [r7, #32]
 800cb0e:	e00b      	b.n	800cb28 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800cb10:	6a3b      	ldr	r3, [r7, #32]
 800cb12:	b2da      	uxtb	r2, r3
 800cb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb16:	1c59      	adds	r1, r3, #1
 800cb18:	6279      	str	r1, [r7, #36]	@ 0x24
 800cb1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cb1e:	b2d2      	uxtb	r2, r2
 800cb20:	701a      	strb	r2, [r3, #0]
 800cb22:	6a3b      	ldr	r3, [r7, #32]
 800cb24:	09db      	lsrs	r3, r3, #7
 800cb26:	623b      	str	r3, [r7, #32]
 800cb28:	6a3b      	ldr	r3, [r7, #32]
 800cb2a:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb2c:	d8f0      	bhi.n	800cb10 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800cb2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb30:	1c5a      	adds	r2, r3, #1
 800cb32:	627a      	str	r2, [r7, #36]	@ 0x24
 800cb34:	6a3a      	ldr	r2, [r7, #32]
 800cb36:	b2d2      	uxtb	r2, r2
 800cb38:	701a      	strb	r2, [r3, #0]
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	61fb      	str	r3, [r7, #28]
 800cb42:	2300      	movs	r3, #0
 800cb44:	61bb      	str	r3, [r7, #24]
 800cb46:	e00b      	b.n	800cb60 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	b2da      	uxtb	r2, r3
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	1c59      	adds	r1, r3, #1
 800cb50:	61f9      	str	r1, [r7, #28]
 800cb52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cb56:	b2d2      	uxtb	r2, r2
 800cb58:	701a      	strb	r2, [r3, #0]
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	09db      	lsrs	r3, r3, #7
 800cb5e:	61bb      	str	r3, [r7, #24]
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb64:	d8f0      	bhi.n	800cb48 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800cb66:	69fb      	ldr	r3, [r7, #28]
 800cb68:	1c5a      	adds	r2, r3, #1
 800cb6a:	61fa      	str	r2, [r7, #28]
 800cb6c:	69ba      	ldr	r2, [r7, #24]
 800cb6e:	b2d2      	uxtb	r2, r2
 800cb70:	701a      	strb	r2, [r3, #0]
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800cb76:	2215      	movs	r2, #21
 800cb78:	68f9      	ldr	r1, [r7, #12]
 800cb7a:	6938      	ldr	r0, [r7, #16]
 800cb7c:	f7ff fab8 	bl	800c0f0 <_SendPacket>
  RECORD_END();
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	f383 8811 	msr	BASEPRI, r3
}
 800cb86:	bf00      	nop
 800cb88:	3748      	adds	r7, #72	@ 0x48
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	2002b0a4 	.word	0x2002b0a4
 800cb94:	2002b074 	.word	0x2002b074

0800cb98 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800cb9c:	4b07      	ldr	r3, [pc, #28]	@ (800cbbc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800cb9e:	6a1b      	ldr	r3, [r3, #32]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d008      	beq.n	800cbb6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800cba4:	4b05      	ldr	r3, [pc, #20]	@ (800cbbc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800cba6:	6a1b      	ldr	r3, [r3, #32]
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d003      	beq.n	800cbb6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800cbae:	4b03      	ldr	r3, [pc, #12]	@ (800cbbc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800cbb0:	6a1b      	ldr	r3, [r3, #32]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	4798      	blx	r3
  }
}
 800cbb6:	bf00      	nop
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	2002b074 	.word	0x2002b074

0800cbc0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b086      	sub	sp, #24
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cbc8:	f3ef 8311 	mrs	r3, BASEPRI
 800cbcc:	f04f 0120 	mov.w	r1, #32
 800cbd0:	f381 8811 	msr	BASEPRI, r1
 800cbd4:	617b      	str	r3, [r7, #20]
 800cbd6:	480b      	ldr	r0, [pc, #44]	@ (800cc04 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800cbd8:	f7ff f99c 	bl	800bf14 <_PreparePacket>
 800cbdc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cbde:	2280      	movs	r2, #128	@ 0x80
 800cbe0:	6879      	ldr	r1, [r7, #4]
 800cbe2:	6938      	ldr	r0, [r7, #16]
 800cbe4:	f7ff f946 	bl	800be74 <_EncodeStr>
 800cbe8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800cbea:	220e      	movs	r2, #14
 800cbec:	68f9      	ldr	r1, [r7, #12]
 800cbee:	6938      	ldr	r0, [r7, #16]
 800cbf0:	f7ff fa7e 	bl	800c0f0 <_SendPacket>
  RECORD_END();
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	f383 8811 	msr	BASEPRI, r3
}
 800cbfa:	bf00      	nop
 800cbfc:	3718      	adds	r7, #24
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	2002b0a4 	.word	0x2002b0a4

0800cc08 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800cc08:	b590      	push	{r4, r7, lr}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800cc0e:	4b15      	ldr	r3, [pc, #84]	@ (800cc64 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cc10:	6a1b      	ldr	r3, [r3, #32]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d01a      	beq.n	800cc4c <SEGGER_SYSVIEW_RecordSystime+0x44>
 800cc16:	4b13      	ldr	r3, [pc, #76]	@ (800cc64 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cc18:	6a1b      	ldr	r3, [r3, #32]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d015      	beq.n	800cc4c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800cc20:	4b10      	ldr	r3, [pc, #64]	@ (800cc64 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cc22:	6a1b      	ldr	r3, [r3, #32]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4798      	blx	r3
 800cc28:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800cc2c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800cc2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc32:	f04f 0200 	mov.w	r2, #0
 800cc36:	f04f 0300 	mov.w	r3, #0
 800cc3a:	000a      	movs	r2, r1
 800cc3c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800cc3e:	4613      	mov	r3, r2
 800cc40:	461a      	mov	r2, r3
 800cc42:	4621      	mov	r1, r4
 800cc44:	200d      	movs	r0, #13
 800cc46:	f7ff fbe7 	bl	800c418 <SEGGER_SYSVIEW_RecordU32x2>
 800cc4a:	e006      	b.n	800cc5a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800cc4c:	4b06      	ldr	r3, [pc, #24]	@ (800cc68 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4619      	mov	r1, r3
 800cc52:	200c      	movs	r0, #12
 800cc54:	f7ff fba4 	bl	800c3a0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800cc58:	bf00      	nop
 800cc5a:	bf00      	nop
 800cc5c:	370c      	adds	r7, #12
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd90      	pop	{r4, r7, pc}
 800cc62:	bf00      	nop
 800cc64:	2002b074 	.word	0x2002b074
 800cc68:	e0001004 	.word	0xe0001004

0800cc6c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cc72:	f3ef 8311 	mrs	r3, BASEPRI
 800cc76:	f04f 0120 	mov.w	r1, #32
 800cc7a:	f381 8811 	msr	BASEPRI, r1
 800cc7e:	607b      	str	r3, [r7, #4]
 800cc80:	4807      	ldr	r0, [pc, #28]	@ (800cca0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800cc82:	f7ff f947 	bl	800bf14 <_PreparePacket>
 800cc86:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800cc88:	2211      	movs	r2, #17
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	6838      	ldr	r0, [r7, #0]
 800cc8e:	f7ff fa2f 	bl	800c0f0 <_SendPacket>
  RECORD_END();
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f383 8811 	msr	BASEPRI, r3
}
 800cc98:	bf00      	nop
 800cc9a:	3708      	adds	r7, #8
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	2002b0a4 	.word	0x2002b0a4

0800cca4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b088      	sub	sp, #32
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ccac:	f3ef 8311 	mrs	r3, BASEPRI
 800ccb0:	f04f 0120 	mov.w	r1, #32
 800ccb4:	f381 8811 	msr	BASEPRI, r1
 800ccb8:	617b      	str	r3, [r7, #20]
 800ccba:	4819      	ldr	r0, [pc, #100]	@ (800cd20 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800ccbc:	f7ff f92a 	bl	800bf14 <_PreparePacket>
 800ccc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ccc6:	4b17      	ldr	r3, [pc, #92]	@ (800cd24 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800ccc8:	691b      	ldr	r3, [r3, #16]
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	1ad3      	subs	r3, r2, r3
 800ccce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	61fb      	str	r3, [r7, #28]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	61bb      	str	r3, [r7, #24]
 800ccd8:	e00b      	b.n	800ccf2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800ccda:	69bb      	ldr	r3, [r7, #24]
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	1c59      	adds	r1, r3, #1
 800cce2:	61f9      	str	r1, [r7, #28]
 800cce4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cce8:	b2d2      	uxtb	r2, r2
 800ccea:	701a      	strb	r2, [r3, #0]
 800ccec:	69bb      	ldr	r3, [r7, #24]
 800ccee:	09db      	lsrs	r3, r3, #7
 800ccf0:	61bb      	str	r3, [r7, #24]
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	2b7f      	cmp	r3, #127	@ 0x7f
 800ccf6:	d8f0      	bhi.n	800ccda <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	1c5a      	adds	r2, r3, #1
 800ccfc:	61fa      	str	r2, [r7, #28]
 800ccfe:	69ba      	ldr	r2, [r7, #24]
 800cd00:	b2d2      	uxtb	r2, r2
 800cd02:	701a      	strb	r2, [r3, #0]
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800cd08:	2208      	movs	r2, #8
 800cd0a:	68f9      	ldr	r1, [r7, #12]
 800cd0c:	6938      	ldr	r0, [r7, #16]
 800cd0e:	f7ff f9ef 	bl	800c0f0 <_SendPacket>
  RECORD_END();
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	f383 8811 	msr	BASEPRI, r3
}
 800cd18:	bf00      	nop
 800cd1a:	3720      	adds	r7, #32
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	2002b0a4 	.word	0x2002b0a4
 800cd24:	2002b074 	.word	0x2002b074

0800cd28 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b088      	sub	sp, #32
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800cd30:	f3ef 8311 	mrs	r3, BASEPRI
 800cd34:	f04f 0120 	mov.w	r1, #32
 800cd38:	f381 8811 	msr	BASEPRI, r1
 800cd3c:	617b      	str	r3, [r7, #20]
 800cd3e:	4819      	ldr	r0, [pc, #100]	@ (800cda4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800cd40:	f7ff f8e8 	bl	800bf14 <_PreparePacket>
 800cd44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800cd4a:	4b17      	ldr	r3, [pc, #92]	@ (800cda8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800cd4c:	691b      	ldr	r3, [r3, #16]
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	1ad3      	subs	r3, r2, r3
 800cd52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	61fb      	str	r3, [r7, #28]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	61bb      	str	r3, [r7, #24]
 800cd5c:	e00b      	b.n	800cd76 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	b2da      	uxtb	r2, r3
 800cd62:	69fb      	ldr	r3, [r7, #28]
 800cd64:	1c59      	adds	r1, r3, #1
 800cd66:	61f9      	str	r1, [r7, #28]
 800cd68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cd6c:	b2d2      	uxtb	r2, r2
 800cd6e:	701a      	strb	r2, [r3, #0]
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	09db      	lsrs	r3, r3, #7
 800cd74:	61bb      	str	r3, [r7, #24]
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd7a:	d8f0      	bhi.n	800cd5e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800cd7c:	69fb      	ldr	r3, [r7, #28]
 800cd7e:	1c5a      	adds	r2, r3, #1
 800cd80:	61fa      	str	r2, [r7, #28]
 800cd82:	69ba      	ldr	r2, [r7, #24]
 800cd84:	b2d2      	uxtb	r2, r2
 800cd86:	701a      	strb	r2, [r3, #0]
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800cd8c:	2204      	movs	r2, #4
 800cd8e:	68f9      	ldr	r1, [r7, #12]
 800cd90:	6938      	ldr	r0, [r7, #16]
 800cd92:	f7ff f9ad 	bl	800c0f0 <_SendPacket>
  RECORD_END();
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	f383 8811 	msr	BASEPRI, r3
}
 800cd9c:	bf00      	nop
 800cd9e:	3720      	adds	r7, #32
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	2002b0a4 	.word	0x2002b0a4
 800cda8:	2002b074 	.word	0x2002b074

0800cdac <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b088      	sub	sp, #32
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800cdb4:	f3ef 8311 	mrs	r3, BASEPRI
 800cdb8:	f04f 0120 	mov.w	r1, #32
 800cdbc:	f381 8811 	msr	BASEPRI, r1
 800cdc0:	617b      	str	r3, [r7, #20]
 800cdc2:	4819      	ldr	r0, [pc, #100]	@ (800ce28 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800cdc4:	f7ff f8a6 	bl	800bf14 <_PreparePacket>
 800cdc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800cdce:	4b17      	ldr	r3, [pc, #92]	@ (800ce2c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800cdd0:	691b      	ldr	r3, [r3, #16]
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	1ad3      	subs	r3, r2, r3
 800cdd6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	61fb      	str	r3, [r7, #28]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	61bb      	str	r3, [r7, #24]
 800cde0:	e00b      	b.n	800cdfa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	1c59      	adds	r1, r3, #1
 800cdea:	61f9      	str	r1, [r7, #28]
 800cdec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cdf0:	b2d2      	uxtb	r2, r2
 800cdf2:	701a      	strb	r2, [r3, #0]
 800cdf4:	69bb      	ldr	r3, [r7, #24]
 800cdf6:	09db      	lsrs	r3, r3, #7
 800cdf8:	61bb      	str	r3, [r7, #24]
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	2b7f      	cmp	r3, #127	@ 0x7f
 800cdfe:	d8f0      	bhi.n	800cde2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	1c5a      	adds	r2, r3, #1
 800ce04:	61fa      	str	r2, [r7, #28]
 800ce06:	69ba      	ldr	r2, [r7, #24]
 800ce08:	b2d2      	uxtb	r2, r2
 800ce0a:	701a      	strb	r2, [r3, #0]
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800ce10:	2206      	movs	r2, #6
 800ce12:	68f9      	ldr	r1, [r7, #12]
 800ce14:	6938      	ldr	r0, [r7, #16]
 800ce16:	f7ff f96b 	bl	800c0f0 <_SendPacket>
  RECORD_END();
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	f383 8811 	msr	BASEPRI, r3
}
 800ce20:	bf00      	nop
 800ce22:	3720      	adds	r7, #32
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	2002b0a4 	.word	0x2002b0a4
 800ce2c:	2002b074 	.word	0x2002b074

0800ce30 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800ce38:	4b04      	ldr	r3, [pc, #16]	@ (800ce4c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800ce3a:	691b      	ldr	r3, [r3, #16]
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	1ad3      	subs	r3, r2, r3
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	370c      	adds	r7, #12
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr
 800ce4c:	2002b074 	.word	0x2002b074

0800ce50 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b08c      	sub	sp, #48	@ 0x30
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	4603      	mov	r3, r0
 800ce58:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800ce5a:	4b3b      	ldr	r3, [pc, #236]	@ (800cf48 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d06d      	beq.n	800cf3e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800ce62:	4b39      	ldr	r3, [pc, #228]	@ (800cf48 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800ce68:	2300      	movs	r3, #0
 800ce6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce6c:	e008      	b.n	800ce80 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800ce6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce70:	691b      	ldr	r3, [r3, #16]
 800ce72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800ce74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d007      	beq.n	800ce8a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800ce7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce80:	79fb      	ldrb	r3, [r7, #7]
 800ce82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d3f2      	bcc.n	800ce6e <SEGGER_SYSVIEW_SendModule+0x1e>
 800ce88:	e000      	b.n	800ce8c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800ce8a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800ce8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d055      	beq.n	800cf3e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ce92:	f3ef 8311 	mrs	r3, BASEPRI
 800ce96:	f04f 0120 	mov.w	r1, #32
 800ce9a:	f381 8811 	msr	BASEPRI, r1
 800ce9e:	617b      	str	r3, [r7, #20]
 800cea0:	482a      	ldr	r0, [pc, #168]	@ (800cf4c <SEGGER_SYSVIEW_SendModule+0xfc>)
 800cea2:	f7ff f837 	bl	800bf14 <_PreparePacket>
 800cea6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	627b      	str	r3, [r7, #36]	@ 0x24
 800ceb0:	79fb      	ldrb	r3, [r7, #7]
 800ceb2:	623b      	str	r3, [r7, #32]
 800ceb4:	e00b      	b.n	800cece <SEGGER_SYSVIEW_SendModule+0x7e>
 800ceb6:	6a3b      	ldr	r3, [r7, #32]
 800ceb8:	b2da      	uxtb	r2, r3
 800ceba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cebc:	1c59      	adds	r1, r3, #1
 800cebe:	6279      	str	r1, [r7, #36]	@ 0x24
 800cec0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cec4:	b2d2      	uxtb	r2, r2
 800cec6:	701a      	strb	r2, [r3, #0]
 800cec8:	6a3b      	ldr	r3, [r7, #32]
 800ceca:	09db      	lsrs	r3, r3, #7
 800cecc:	623b      	str	r3, [r7, #32]
 800cece:	6a3b      	ldr	r3, [r7, #32]
 800ced0:	2b7f      	cmp	r3, #127	@ 0x7f
 800ced2:	d8f0      	bhi.n	800ceb6 <SEGGER_SYSVIEW_SendModule+0x66>
 800ced4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced6:	1c5a      	adds	r2, r3, #1
 800ced8:	627a      	str	r2, [r7, #36]	@ 0x24
 800ceda:	6a3a      	ldr	r2, [r7, #32]
 800cedc:	b2d2      	uxtb	r2, r2
 800cede:	701a      	strb	r2, [r3, #0]
 800cee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	61fb      	str	r3, [r7, #28]
 800cee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceea:	689b      	ldr	r3, [r3, #8]
 800ceec:	61bb      	str	r3, [r7, #24]
 800ceee:	e00b      	b.n	800cf08 <SEGGER_SYSVIEW_SendModule+0xb8>
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	b2da      	uxtb	r2, r3
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	1c59      	adds	r1, r3, #1
 800cef8:	61f9      	str	r1, [r7, #28]
 800cefa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cefe:	b2d2      	uxtb	r2, r2
 800cf00:	701a      	strb	r2, [r3, #0]
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	09db      	lsrs	r3, r3, #7
 800cf06:	61bb      	str	r3, [r7, #24]
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	2b7f      	cmp	r3, #127	@ 0x7f
 800cf0c:	d8f0      	bhi.n	800cef0 <SEGGER_SYSVIEW_SendModule+0xa0>
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	1c5a      	adds	r2, r3, #1
 800cf12:	61fa      	str	r2, [r7, #28]
 800cf14:	69ba      	ldr	r2, [r7, #24]
 800cf16:	b2d2      	uxtb	r2, r2
 800cf18:	701a      	strb	r2, [r3, #0]
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cf1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2280      	movs	r2, #128	@ 0x80
 800cf24:	4619      	mov	r1, r3
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f7fe ffa4 	bl	800be74 <_EncodeStr>
 800cf2c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800cf2e:	2216      	movs	r2, #22
 800cf30:	68f9      	ldr	r1, [r7, #12]
 800cf32:	6938      	ldr	r0, [r7, #16]
 800cf34:	f7ff f8dc 	bl	800c0f0 <_SendPacket>
      RECORD_END();
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800cf3e:	bf00      	nop
 800cf40:	3730      	adds	r7, #48	@ 0x30
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	2002b09c 	.word	0x2002b09c
 800cf4c:	2002b0a4 	.word	0x2002b0a4

0800cf50 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800cf56:	4b0c      	ldr	r3, [pc, #48]	@ (800cf88 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00f      	beq.n	800cf7e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800cf5e:	4b0a      	ldr	r3, [pc, #40]	@ (800cf88 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	691b      	ldr	r3, [r3, #16]
 800cf76:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d1f2      	bne.n	800cf64 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800cf7e:	bf00      	nop
 800cf80:	3708      	adds	r7, #8
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	2002b09c 	.word	0x2002b09c

0800cf8c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b086      	sub	sp, #24
 800cf90:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800cf92:	f3ef 8311 	mrs	r3, BASEPRI
 800cf96:	f04f 0120 	mov.w	r1, #32
 800cf9a:	f381 8811 	msr	BASEPRI, r1
 800cf9e:	60fb      	str	r3, [r7, #12]
 800cfa0:	4817      	ldr	r0, [pc, #92]	@ (800d000 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800cfa2:	f7fe ffb7 	bl	800bf14 <_PreparePacket>
 800cfa6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	617b      	str	r3, [r7, #20]
 800cfb0:	4b14      	ldr	r3, [pc, #80]	@ (800d004 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	613b      	str	r3, [r7, #16]
 800cfb6:	e00b      	b.n	800cfd0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	b2da      	uxtb	r2, r3
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	1c59      	adds	r1, r3, #1
 800cfc0:	6179      	str	r1, [r7, #20]
 800cfc2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cfc6:	b2d2      	uxtb	r2, r2
 800cfc8:	701a      	strb	r2, [r3, #0]
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	09db      	lsrs	r3, r3, #7
 800cfce:	613b      	str	r3, [r7, #16]
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	2b7f      	cmp	r3, #127	@ 0x7f
 800cfd4:	d8f0      	bhi.n	800cfb8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	1c5a      	adds	r2, r3, #1
 800cfda:	617a      	str	r2, [r7, #20]
 800cfdc:	693a      	ldr	r2, [r7, #16]
 800cfde:	b2d2      	uxtb	r2, r2
 800cfe0:	701a      	strb	r2, [r3, #0]
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800cfe6:	221b      	movs	r2, #27
 800cfe8:	6879      	ldr	r1, [r7, #4]
 800cfea:	68b8      	ldr	r0, [r7, #8]
 800cfec:	f7ff f880 	bl	800c0f0 <_SendPacket>
  RECORD_END();
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f383 8811 	msr	BASEPRI, r3
}
 800cff6:	bf00      	nop
 800cff8:	3718      	adds	r7, #24
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	2002b0a4 	.word	0x2002b0a4
 800d004:	2002b0a0 	.word	0x2002b0a0

0800d008 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800d008:	b580      	push	{r7, lr}
 800d00a:	b08a      	sub	sp, #40	@ 0x28
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d010:	f3ef 8311 	mrs	r3, BASEPRI
 800d014:	f04f 0120 	mov.w	r1, #32
 800d018:	f381 8811 	msr	BASEPRI, r1
 800d01c:	617b      	str	r3, [r7, #20]
 800d01e:	4827      	ldr	r0, [pc, #156]	@ (800d0bc <SEGGER_SYSVIEW_Warn+0xb4>)
 800d020:	f7fe ff78 	bl	800bf14 <_PreparePacket>
 800d024:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d026:	2280      	movs	r2, #128	@ 0x80
 800d028:	6879      	ldr	r1, [r7, #4]
 800d02a:	6938      	ldr	r0, [r7, #16]
 800d02c:	f7fe ff22 	bl	800be74 <_EncodeStr>
 800d030:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	627b      	str	r3, [r7, #36]	@ 0x24
 800d036:	2301      	movs	r3, #1
 800d038:	623b      	str	r3, [r7, #32]
 800d03a:	e00b      	b.n	800d054 <SEGGER_SYSVIEW_Warn+0x4c>
 800d03c:	6a3b      	ldr	r3, [r7, #32]
 800d03e:	b2da      	uxtb	r2, r3
 800d040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d042:	1c59      	adds	r1, r3, #1
 800d044:	6279      	str	r1, [r7, #36]	@ 0x24
 800d046:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d04a:	b2d2      	uxtb	r2, r2
 800d04c:	701a      	strb	r2, [r3, #0]
 800d04e:	6a3b      	ldr	r3, [r7, #32]
 800d050:	09db      	lsrs	r3, r3, #7
 800d052:	623b      	str	r3, [r7, #32]
 800d054:	6a3b      	ldr	r3, [r7, #32]
 800d056:	2b7f      	cmp	r3, #127	@ 0x7f
 800d058:	d8f0      	bhi.n	800d03c <SEGGER_SYSVIEW_Warn+0x34>
 800d05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d05c:	1c5a      	adds	r2, r3, #1
 800d05e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d060:	6a3a      	ldr	r2, [r7, #32]
 800d062:	b2d2      	uxtb	r2, r2
 800d064:	701a      	strb	r2, [r3, #0]
 800d066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d068:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	61fb      	str	r3, [r7, #28]
 800d06e:	2300      	movs	r3, #0
 800d070:	61bb      	str	r3, [r7, #24]
 800d072:	e00b      	b.n	800d08c <SEGGER_SYSVIEW_Warn+0x84>
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	b2da      	uxtb	r2, r3
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	1c59      	adds	r1, r3, #1
 800d07c:	61f9      	str	r1, [r7, #28]
 800d07e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d082:	b2d2      	uxtb	r2, r2
 800d084:	701a      	strb	r2, [r3, #0]
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	09db      	lsrs	r3, r3, #7
 800d08a:	61bb      	str	r3, [r7, #24]
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d090:	d8f0      	bhi.n	800d074 <SEGGER_SYSVIEW_Warn+0x6c>
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	1c5a      	adds	r2, r3, #1
 800d096:	61fa      	str	r2, [r7, #28]
 800d098:	69ba      	ldr	r2, [r7, #24]
 800d09a:	b2d2      	uxtb	r2, r2
 800d09c:	701a      	strb	r2, [r3, #0]
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800d0a2:	221a      	movs	r2, #26
 800d0a4:	68f9      	ldr	r1, [r7, #12]
 800d0a6:	6938      	ldr	r0, [r7, #16]
 800d0a8:	f7ff f822 	bl	800c0f0 <_SendPacket>
  RECORD_END();
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	f383 8811 	msr	BASEPRI, r3
}
 800d0b2:	bf00      	nop
 800d0b4:	3728      	adds	r7, #40	@ 0x28
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	2002b0a4 	.word	0x2002b0a4

0800d0c0 <__NVIC_EnableIRQ>:
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d0ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	db0b      	blt.n	800d0ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d0d2:	79fb      	ldrb	r3, [r7, #7]
 800d0d4:	f003 021f 	and.w	r2, r3, #31
 800d0d8:	4907      	ldr	r1, [pc, #28]	@ (800d0f8 <__NVIC_EnableIRQ+0x38>)
 800d0da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0de:	095b      	lsrs	r3, r3, #5
 800d0e0:	2001      	movs	r0, #1
 800d0e2:	fa00 f202 	lsl.w	r2, r0, r2
 800d0e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d0ea:	bf00      	nop
 800d0ec:	370c      	adds	r7, #12
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	e000e100 	.word	0xe000e100

0800d0fc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b085      	sub	sp, #20
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800d104:	4b08      	ldr	r3, [pc, #32]	@ (800d128 <LL_APB1_GRP1_EnableClock+0x2c>)
 800d106:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d108:	4907      	ldr	r1, [pc, #28]	@ (800d128 <LL_APB1_GRP1_EnableClock+0x2c>)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4313      	orrs	r3, r2
 800d10e:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800d110:	4b05      	ldr	r3, [pc, #20]	@ (800d128 <LL_APB1_GRP1_EnableClock+0x2c>)
 800d112:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	4013      	ands	r3, r2
 800d118:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d11a:	68fb      	ldr	r3, [r7, #12]
}
 800d11c:	bf00      	nop
 800d11e:	3714      	adds	r7, #20
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr
 800d128:	40023800 	.word	0x40023800

0800d12c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b083      	sub	sp, #12
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f043 0201 	orr.w	r2, r3, #1
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	601a      	str	r2, [r3, #0]
}
 800d140:	bf00      	nop
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b083      	sub	sp, #12
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	683a      	ldr	r2, [r7, #0]
 800d15a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d15c:	bf00      	nop
 800d15e:	370c      	adds	r7, #12
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr

0800d168 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f06f 0201 	mvn.w	r2, #1
 800d176:	611a      	str	r2, [r3, #16]
}
 800d178:	bf00      	nop
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	691b      	ldr	r3, [r3, #16]
 800d190:	f003 0301 	and.w	r3, r3, #1
 800d194:	2b01      	cmp	r3, #1
 800d196:	d101      	bne.n	800d19c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800d198:	2301      	movs	r3, #1
 800d19a:	e000      	b.n	800d19e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800d19c:	2300      	movs	r3, #0
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	370c      	adds	r7, #12
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr

0800d1aa <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800d1aa:	b480      	push	{r7}
 800d1ac:	b083      	sub	sp, #12
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	68db      	ldr	r3, [r3, #12]
 800d1b6:	f043 0201 	orr.w	r2, r3, #1
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	60da      	str	r2, [r3, #12]
}
 800d1be:	bf00      	nop
 800d1c0:	370c      	adds	r7, #12
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr
	...

0800d1cc <_cbSendSystemDesc>:
 *       _cbSendSystemDesc()
 *
 *  Function description
 *    Sends SystemView description strings.
 */
static void _cbSendSystemDesc(void) {
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800d1d0:	4802      	ldr	r0, [pc, #8]	@ (800d1dc <_cbSendSystemDesc+0x10>)
 800d1d2:	f7ff fcf5 	bl	800cbc0 <SEGGER_SYSVIEW_SendSysDesc>
//	SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
//	SEGGER_SYSVIEW_SendSysDesc("I#23=EXTI[0]");
}
 800d1d6:	bf00      	nop
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	08010488 	.word	0x08010488

0800d1e0 <TIM7_IRQHandler>:

/// [SYSVIEW_TIMESTAMP]
void TIM7_IRQHandler(void)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	af00      	add	r7, sp, #0
	// Interrupt flag set?
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 800d1e4:	4807      	ldr	r0, [pc, #28]	@ (800d204 <TIM7_IRQHandler+0x24>)
 800d1e6:	f7ff ffcd 	bl	800d184 <LL_TIM_IsActiveFlag_UPDATE>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d007      	beq.n	800d200 <TIM7_IRQHandler+0x20>
	{
		// Clear flag
		LL_TIM_ClearFlag_UPDATE(TIM7);
 800d1f0:	4804      	ldr	r0, [pc, #16]	@ (800d204 <TIM7_IRQHandler+0x24>)
 800d1f2:	f7ff ffb9 	bl	800d168 <LL_TIM_ClearFlag_UPDATE>
		// Increment counter
		SEGGER_SYSVIEW_TickCnt++;
 800d1f6:	4b04      	ldr	r3, [pc, #16]	@ (800d208 <TIM7_IRQHandler+0x28>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	4a02      	ldr	r2, [pc, #8]	@ (800d208 <TIM7_IRQHandler+0x28>)
 800d1fe:	6013      	str	r3, [r2, #0]
	}
}
 800d200:	bf00      	nop
 800d202:	bd80      	pop	{r7, pc}
 800d204:	40001400 	.word	0x40001400
 800d208:	2002ac68 	.word	0x2002ac68

0800d20c <SEGGER_SYSVIEW_TimeStampInit>:
static void SEGGER_SYSVIEW_TimeStampInit(void)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	af00      	add	r7, sp, #0
//#warning "DO NOT TAKE POINTS OFF, SEGGER PROVIDED WARNING: TIM7 peripheral is used for Segger SysView timestamping"
	// Enable TIM7 peripheral clock
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 800d210:	2020      	movs	r0, #32
 800d212:	f7ff ff73 	bl	800d0fc <LL_APB1_GRP1_EnableClock>
	// Set prescaler to match timestamp frequency
	LL_TIM_SetPrescaler(TIM7, __LL_TIM_CALC_PSC(SYSVIEW_CPU_FREQ, SYSVIEW_TIMESTAMP_FREQ));
 800d216:	4b0d      	ldr	r3, [pc, #52]	@ (800d24c <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	085a      	lsrs	r2, r3, #1
 800d21c:	4b0b      	ldr	r3, [pc, #44]	@ (800d24c <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	441a      	add	r2, r3
 800d222:	4b0a      	ldr	r3, [pc, #40]	@ (800d24c <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	fbb2 f3f3 	udiv	r3, r2, r3
 800d22a:	3b01      	subs	r3, #1
 800d22c:	4619      	mov	r1, r3
 800d22e:	4808      	ldr	r0, [pc, #32]	@ (800d250 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800d230:	f7ff ff8c 	bl	800d14c <LL_TIM_SetPrescaler>
	// Enable timer interrupt
	NVIC_EnableIRQ(TIM7_IRQn);
 800d234:	2037      	movs	r0, #55	@ 0x37
 800d236:	f7ff ff43 	bl	800d0c0 <__NVIC_EnableIRQ>
	LL_TIM_EnableIT_UPDATE(TIM7);
 800d23a:	4805      	ldr	r0, [pc, #20]	@ (800d250 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800d23c:	f7ff ffb5 	bl	800d1aa <LL_TIM_EnableIT_UPDATE>
	// Enable counter
	LL_TIM_EnableCounter(TIM7);
 800d240:	4803      	ldr	r0, [pc, #12]	@ (800d250 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800d242:	f7ff ff73 	bl	800d12c <LL_TIM_EnableCounter>
}
 800d246:	bf00      	nop
 800d248:	bd80      	pop	{r7, pc}
 800d24a:	bf00      	nop
 800d24c:	20000224 	.word	0x20000224
 800d250:	40001400 	.word	0x40001400

0800d254 <SEGGER_SYSVIEW_Conf>:
 *
 *       Global functions
 *
 **********************************************************************
 */
void SEGGER_SYSVIEW_Conf(void) {
 800d254:	b580      	push	{r7, lr}
 800d256:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_TimeStampInit();
 800d258:	f7ff ffd8 	bl	800d20c <SEGGER_SYSVIEW_TimeStampInit>
	SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ,
 800d25c:	4b06      	ldr	r3, [pc, #24]	@ (800d278 <SEGGER_SYSVIEW_Conf+0x24>)
 800d25e:	6818      	ldr	r0, [r3, #0]
 800d260:	4b05      	ldr	r3, [pc, #20]	@ (800d278 <SEGGER_SYSVIEW_Conf+0x24>)
 800d262:	6819      	ldr	r1, [r3, #0]
 800d264:	4b05      	ldr	r3, [pc, #20]	@ (800d27c <SEGGER_SYSVIEW_Conf+0x28>)
 800d266:	4a06      	ldr	r2, [pc, #24]	@ (800d280 <SEGGER_SYSVIEW_Conf+0x2c>)
 800d268:	f7ff f828 	bl	800c2bc <SEGGER_SYSVIEW_Init>
			&SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
	SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800d26c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800d270:	f7ff f868 	bl	800c344 <SEGGER_SYSVIEW_SetRAMBase>
}
 800d274:	bf00      	nop
 800d276:	bd80      	pop	{r7, pc}
 800d278:	20000224 	.word	0x20000224
 800d27c:	0800d1cd 	.word	0x0800d1cd
 800d280:	08011724 	.word	0x08011724

0800d284 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800d284:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d286:	b085      	sub	sp, #20
 800d288:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800d28a:	2300      	movs	r3, #0
 800d28c:	607b      	str	r3, [r7, #4]
 800d28e:	e048      	b.n	800d322 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800d290:	4929      	ldr	r1, [pc, #164]	@ (800d338 <_cbSendTaskList+0xb4>)
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	4613      	mov	r3, r2
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	4413      	add	r3, r2
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	440b      	add	r3, r1
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7fd f8fb 	bl	800a49c <uxTaskGetStackHighWaterMark>
 800d2a6:	4601      	mov	r1, r0
 800d2a8:	4823      	ldr	r0, [pc, #140]	@ (800d338 <_cbSendTaskList+0xb4>)
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	4413      	add	r3, r2
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	4403      	add	r3, r0
 800d2b6:	3310      	adds	r3, #16
 800d2b8:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800d2ba:	491f      	ldr	r1, [pc, #124]	@ (800d338 <_cbSendTaskList+0xb4>)
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	4613      	mov	r3, r2
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	4413      	add	r3, r2
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	440b      	add	r3, r1
 800d2c8:	6818      	ldr	r0, [r3, #0]
 800d2ca:	491b      	ldr	r1, [pc, #108]	@ (800d338 <_cbSendTaskList+0xb4>)
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	4613      	mov	r3, r2
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	4413      	add	r3, r2
 800d2d4:	009b      	lsls	r3, r3, #2
 800d2d6:	440b      	add	r3, r1
 800d2d8:	3304      	adds	r3, #4
 800d2da:	6819      	ldr	r1, [r3, #0]
 800d2dc:	4c16      	ldr	r4, [pc, #88]	@ (800d338 <_cbSendTaskList+0xb4>)
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	4613      	mov	r3, r2
 800d2e2:	009b      	lsls	r3, r3, #2
 800d2e4:	4413      	add	r3, r2
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	4423      	add	r3, r4
 800d2ea:	3308      	adds	r3, #8
 800d2ec:	681c      	ldr	r4, [r3, #0]
 800d2ee:	4d12      	ldr	r5, [pc, #72]	@ (800d338 <_cbSendTaskList+0xb4>)
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	4613      	mov	r3, r2
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	4413      	add	r3, r2
 800d2f8:	009b      	lsls	r3, r3, #2
 800d2fa:	442b      	add	r3, r5
 800d2fc:	330c      	adds	r3, #12
 800d2fe:	681d      	ldr	r5, [r3, #0]
 800d300:	4e0d      	ldr	r6, [pc, #52]	@ (800d338 <_cbSendTaskList+0xb4>)
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	4613      	mov	r3, r2
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4413      	add	r3, r2
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	4433      	add	r3, r6
 800d30e:	3310      	adds	r3, #16
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	9300      	str	r3, [sp, #0]
 800d314:	462b      	mov	r3, r5
 800d316:	4622      	mov	r2, r4
 800d318:	f000 f8be 	bl	800d498 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	3301      	adds	r3, #1
 800d320:	607b      	str	r3, [r7, #4]
 800d322:	4b06      	ldr	r3, [pc, #24]	@ (800d33c <_cbSendTaskList+0xb8>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d3b1      	bcc.n	800d290 <_cbSendTaskList+0xc>
  }
}
 800d32c:	bf00      	nop
 800d32e:	bf00      	nop
 800d330:	370c      	adds	r7, #12
 800d332:	46bd      	mov	sp, r7
 800d334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d336:	bf00      	nop
 800d338:	2002b188 	.word	0x2002b188
 800d33c:	2002b228 	.word	0x2002b228

0800d340 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800d340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d344:	b082      	sub	sp, #8
 800d346:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800d348:	f7fc fcd4 	bl	8009cf4 <xTaskGetTickCountFromISR>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2200      	movs	r2, #0
 800d350:	469a      	mov	sl, r3
 800d352:	4693      	mov	fp, r2
 800d354:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800d358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	f04f 0a00 	mov.w	sl, #0
 800d364:	f04f 0b00 	mov.w	fp, #0
 800d368:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800d36c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800d370:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800d374:	4652      	mov	r2, sl
 800d376:	465b      	mov	r3, fp
 800d378:	1a14      	subs	r4, r2, r0
 800d37a:	eb63 0501 	sbc.w	r5, r3, r1
 800d37e:	f04f 0200 	mov.w	r2, #0
 800d382:	f04f 0300 	mov.w	r3, #0
 800d386:	00ab      	lsls	r3, r5, #2
 800d388:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d38c:	00a2      	lsls	r2, r4, #2
 800d38e:	4614      	mov	r4, r2
 800d390:	461d      	mov	r5, r3
 800d392:	eb14 0800 	adds.w	r8, r4, r0
 800d396:	eb45 0901 	adc.w	r9, r5, r1
 800d39a:	f04f 0200 	mov.w	r2, #0
 800d39e:	f04f 0300 	mov.w	r3, #0
 800d3a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d3a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d3aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d3ae:	4690      	mov	r8, r2
 800d3b0:	4699      	mov	r9, r3
 800d3b2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800d3b6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800d3ba:	4610      	mov	r0, r2
 800d3bc:	4619      	mov	r1, r3
 800d3be:	3708      	adds	r7, #8
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800d3c8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af02      	add	r7, sp, #8
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
 800d3d4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800d3d6:	2205      	movs	r2, #5
 800d3d8:	492b      	ldr	r1, [pc, #172]	@ (800d488 <SYSVIEW_AddTask+0xc0>)
 800d3da:	68b8      	ldr	r0, [r7, #8]
 800d3dc:	f000 f990 	bl	800d700 <memcmp>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d04b      	beq.n	800d47e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800d3e6:	4b29      	ldr	r3, [pc, #164]	@ (800d48c <SYSVIEW_AddTask+0xc4>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	2b07      	cmp	r3, #7
 800d3ec:	d903      	bls.n	800d3f6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800d3ee:	4828      	ldr	r0, [pc, #160]	@ (800d490 <SYSVIEW_AddTask+0xc8>)
 800d3f0:	f7ff fe0a 	bl	800d008 <SEGGER_SYSVIEW_Warn>
    return;
 800d3f4:	e044      	b.n	800d480 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800d3f6:	4b25      	ldr	r3, [pc, #148]	@ (800d48c <SYSVIEW_AddTask+0xc4>)
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	4926      	ldr	r1, [pc, #152]	@ (800d494 <SYSVIEW_AddTask+0xcc>)
 800d3fc:	4613      	mov	r3, r2
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	4413      	add	r3, r2
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	440b      	add	r3, r1
 800d406:	68fa      	ldr	r2, [r7, #12]
 800d408:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800d40a:	4b20      	ldr	r3, [pc, #128]	@ (800d48c <SYSVIEW_AddTask+0xc4>)
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	4921      	ldr	r1, [pc, #132]	@ (800d494 <SYSVIEW_AddTask+0xcc>)
 800d410:	4613      	mov	r3, r2
 800d412:	009b      	lsls	r3, r3, #2
 800d414:	4413      	add	r3, r2
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	440b      	add	r3, r1
 800d41a:	3304      	adds	r3, #4
 800d41c:	68ba      	ldr	r2, [r7, #8]
 800d41e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800d420:	4b1a      	ldr	r3, [pc, #104]	@ (800d48c <SYSVIEW_AddTask+0xc4>)
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	491b      	ldr	r1, [pc, #108]	@ (800d494 <SYSVIEW_AddTask+0xcc>)
 800d426:	4613      	mov	r3, r2
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	4413      	add	r3, r2
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	440b      	add	r3, r1
 800d430:	3308      	adds	r3, #8
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800d436:	4b15      	ldr	r3, [pc, #84]	@ (800d48c <SYSVIEW_AddTask+0xc4>)
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	4916      	ldr	r1, [pc, #88]	@ (800d494 <SYSVIEW_AddTask+0xcc>)
 800d43c:	4613      	mov	r3, r2
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	4413      	add	r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	440b      	add	r3, r1
 800d446:	330c      	adds	r3, #12
 800d448:	683a      	ldr	r2, [r7, #0]
 800d44a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800d44c:	4b0f      	ldr	r3, [pc, #60]	@ (800d48c <SYSVIEW_AddTask+0xc4>)
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	4910      	ldr	r1, [pc, #64]	@ (800d494 <SYSVIEW_AddTask+0xcc>)
 800d452:	4613      	mov	r3, r2
 800d454:	009b      	lsls	r3, r3, #2
 800d456:	4413      	add	r3, r2
 800d458:	009b      	lsls	r3, r3, #2
 800d45a:	440b      	add	r3, r1
 800d45c:	3310      	adds	r3, #16
 800d45e:	69ba      	ldr	r2, [r7, #24]
 800d460:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800d462:	4b0a      	ldr	r3, [pc, #40]	@ (800d48c <SYSVIEW_AddTask+0xc4>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	3301      	adds	r3, #1
 800d468:	4a08      	ldr	r2, [pc, #32]	@ (800d48c <SYSVIEW_AddTask+0xc4>)
 800d46a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	9300      	str	r3, [sp, #0]
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	68b9      	ldr	r1, [r7, #8]
 800d476:	68f8      	ldr	r0, [r7, #12]
 800d478:	f000 f80e 	bl	800d498 <SYSVIEW_SendTaskInfo>
 800d47c:	e000      	b.n	800d480 <SYSVIEW_AddTask+0xb8>
    return;
 800d47e:	bf00      	nop

}
 800d480:	3710      	adds	r7, #16
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	080104bc 	.word	0x080104bc
 800d48c:	2002b228 	.word	0x2002b228
 800d490:	080104c4 	.word	0x080104c4
 800d494:	2002b188 	.word	0x2002b188

0800d498 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800d498:	b580      	push	{r7, lr}
 800d49a:	b08a      	sub	sp, #40	@ 0x28
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	60f8      	str	r0, [r7, #12]
 800d4a0:	60b9      	str	r1, [r7, #8]
 800d4a2:	607a      	str	r2, [r7, #4]
 800d4a4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800d4a6:	f107 0314 	add.w	r3, r7, #20
 800d4aa:	2214      	movs	r2, #20
 800d4ac:	2100      	movs	r1, #0
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f000 f936 	bl	800d720 <memset>
  TaskInfo.TaskID     = TaskID;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800d4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c6:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800d4c8:	f107 0314 	add.w	r3, r7, #20
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff fa7f 	bl	800c9d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800d4d2:	bf00      	nop
 800d4d4:	3728      	adds	r7, #40	@ 0x28
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}

0800d4da <__itoa>:
 800d4da:	1e93      	subs	r3, r2, #2
 800d4dc:	2b22      	cmp	r3, #34	@ 0x22
 800d4de:	b510      	push	{r4, lr}
 800d4e0:	460c      	mov	r4, r1
 800d4e2:	d904      	bls.n	800d4ee <__itoa+0x14>
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	700b      	strb	r3, [r1, #0]
 800d4e8:	461c      	mov	r4, r3
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	bd10      	pop	{r4, pc}
 800d4ee:	2a0a      	cmp	r2, #10
 800d4f0:	d109      	bne.n	800d506 <__itoa+0x2c>
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	da07      	bge.n	800d506 <__itoa+0x2c>
 800d4f6:	232d      	movs	r3, #45	@ 0x2d
 800d4f8:	700b      	strb	r3, [r1, #0]
 800d4fa:	4240      	negs	r0, r0
 800d4fc:	2101      	movs	r1, #1
 800d4fe:	4421      	add	r1, r4
 800d500:	f000 f8bc 	bl	800d67c <__utoa>
 800d504:	e7f1      	b.n	800d4ea <__itoa+0x10>
 800d506:	2100      	movs	r1, #0
 800d508:	e7f9      	b.n	800d4fe <__itoa+0x24>

0800d50a <itoa>:
 800d50a:	f7ff bfe6 	b.w	800d4da <__itoa>
	...

0800d510 <malloc>:
 800d510:	4b02      	ldr	r3, [pc, #8]	@ (800d51c <malloc+0xc>)
 800d512:	4601      	mov	r1, r0
 800d514:	6818      	ldr	r0, [r3, #0]
 800d516:	f000 b825 	b.w	800d564 <_malloc_r>
 800d51a:	bf00      	nop
 800d51c:	20000234 	.word	0x20000234

0800d520 <sbrk_aligned>:
 800d520:	b570      	push	{r4, r5, r6, lr}
 800d522:	4e0f      	ldr	r6, [pc, #60]	@ (800d560 <sbrk_aligned+0x40>)
 800d524:	460c      	mov	r4, r1
 800d526:	6831      	ldr	r1, [r6, #0]
 800d528:	4605      	mov	r5, r0
 800d52a:	b911      	cbnz	r1, 800d532 <sbrk_aligned+0x12>
 800d52c:	f000 f95e 	bl	800d7ec <_sbrk_r>
 800d530:	6030      	str	r0, [r6, #0]
 800d532:	4621      	mov	r1, r4
 800d534:	4628      	mov	r0, r5
 800d536:	f000 f959 	bl	800d7ec <_sbrk_r>
 800d53a:	1c43      	adds	r3, r0, #1
 800d53c:	d103      	bne.n	800d546 <sbrk_aligned+0x26>
 800d53e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d542:	4620      	mov	r0, r4
 800d544:	bd70      	pop	{r4, r5, r6, pc}
 800d546:	1cc4      	adds	r4, r0, #3
 800d548:	f024 0403 	bic.w	r4, r4, #3
 800d54c:	42a0      	cmp	r0, r4
 800d54e:	d0f8      	beq.n	800d542 <sbrk_aligned+0x22>
 800d550:	1a21      	subs	r1, r4, r0
 800d552:	4628      	mov	r0, r5
 800d554:	f000 f94a 	bl	800d7ec <_sbrk_r>
 800d558:	3001      	adds	r0, #1
 800d55a:	d1f2      	bne.n	800d542 <sbrk_aligned+0x22>
 800d55c:	e7ef      	b.n	800d53e <sbrk_aligned+0x1e>
 800d55e:	bf00      	nop
 800d560:	2002b22c 	.word	0x2002b22c

0800d564 <_malloc_r>:
 800d564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d568:	1ccd      	adds	r5, r1, #3
 800d56a:	f025 0503 	bic.w	r5, r5, #3
 800d56e:	3508      	adds	r5, #8
 800d570:	2d0c      	cmp	r5, #12
 800d572:	bf38      	it	cc
 800d574:	250c      	movcc	r5, #12
 800d576:	2d00      	cmp	r5, #0
 800d578:	4606      	mov	r6, r0
 800d57a:	db01      	blt.n	800d580 <_malloc_r+0x1c>
 800d57c:	42a9      	cmp	r1, r5
 800d57e:	d904      	bls.n	800d58a <_malloc_r+0x26>
 800d580:	230c      	movs	r3, #12
 800d582:	6033      	str	r3, [r6, #0]
 800d584:	2000      	movs	r0, #0
 800d586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d58a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d660 <_malloc_r+0xfc>
 800d58e:	f000 f869 	bl	800d664 <__malloc_lock>
 800d592:	f8d8 3000 	ldr.w	r3, [r8]
 800d596:	461c      	mov	r4, r3
 800d598:	bb44      	cbnz	r4, 800d5ec <_malloc_r+0x88>
 800d59a:	4629      	mov	r1, r5
 800d59c:	4630      	mov	r0, r6
 800d59e:	f7ff ffbf 	bl	800d520 <sbrk_aligned>
 800d5a2:	1c43      	adds	r3, r0, #1
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	d158      	bne.n	800d65a <_malloc_r+0xf6>
 800d5a8:	f8d8 4000 	ldr.w	r4, [r8]
 800d5ac:	4627      	mov	r7, r4
 800d5ae:	2f00      	cmp	r7, #0
 800d5b0:	d143      	bne.n	800d63a <_malloc_r+0xd6>
 800d5b2:	2c00      	cmp	r4, #0
 800d5b4:	d04b      	beq.n	800d64e <_malloc_r+0xea>
 800d5b6:	6823      	ldr	r3, [r4, #0]
 800d5b8:	4639      	mov	r1, r7
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	eb04 0903 	add.w	r9, r4, r3
 800d5c0:	f000 f914 	bl	800d7ec <_sbrk_r>
 800d5c4:	4581      	cmp	r9, r0
 800d5c6:	d142      	bne.n	800d64e <_malloc_r+0xea>
 800d5c8:	6821      	ldr	r1, [r4, #0]
 800d5ca:	1a6d      	subs	r5, r5, r1
 800d5cc:	4629      	mov	r1, r5
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	f7ff ffa6 	bl	800d520 <sbrk_aligned>
 800d5d4:	3001      	adds	r0, #1
 800d5d6:	d03a      	beq.n	800d64e <_malloc_r+0xea>
 800d5d8:	6823      	ldr	r3, [r4, #0]
 800d5da:	442b      	add	r3, r5
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	f8d8 3000 	ldr.w	r3, [r8]
 800d5e2:	685a      	ldr	r2, [r3, #4]
 800d5e4:	bb62      	cbnz	r2, 800d640 <_malloc_r+0xdc>
 800d5e6:	f8c8 7000 	str.w	r7, [r8]
 800d5ea:	e00f      	b.n	800d60c <_malloc_r+0xa8>
 800d5ec:	6822      	ldr	r2, [r4, #0]
 800d5ee:	1b52      	subs	r2, r2, r5
 800d5f0:	d420      	bmi.n	800d634 <_malloc_r+0xd0>
 800d5f2:	2a0b      	cmp	r2, #11
 800d5f4:	d917      	bls.n	800d626 <_malloc_r+0xc2>
 800d5f6:	1961      	adds	r1, r4, r5
 800d5f8:	42a3      	cmp	r3, r4
 800d5fa:	6025      	str	r5, [r4, #0]
 800d5fc:	bf18      	it	ne
 800d5fe:	6059      	strne	r1, [r3, #4]
 800d600:	6863      	ldr	r3, [r4, #4]
 800d602:	bf08      	it	eq
 800d604:	f8c8 1000 	streq.w	r1, [r8]
 800d608:	5162      	str	r2, [r4, r5]
 800d60a:	604b      	str	r3, [r1, #4]
 800d60c:	4630      	mov	r0, r6
 800d60e:	f000 f82f 	bl	800d670 <__malloc_unlock>
 800d612:	f104 000b 	add.w	r0, r4, #11
 800d616:	1d23      	adds	r3, r4, #4
 800d618:	f020 0007 	bic.w	r0, r0, #7
 800d61c:	1ac2      	subs	r2, r0, r3
 800d61e:	bf1c      	itt	ne
 800d620:	1a1b      	subne	r3, r3, r0
 800d622:	50a3      	strne	r3, [r4, r2]
 800d624:	e7af      	b.n	800d586 <_malloc_r+0x22>
 800d626:	6862      	ldr	r2, [r4, #4]
 800d628:	42a3      	cmp	r3, r4
 800d62a:	bf0c      	ite	eq
 800d62c:	f8c8 2000 	streq.w	r2, [r8]
 800d630:	605a      	strne	r2, [r3, #4]
 800d632:	e7eb      	b.n	800d60c <_malloc_r+0xa8>
 800d634:	4623      	mov	r3, r4
 800d636:	6864      	ldr	r4, [r4, #4]
 800d638:	e7ae      	b.n	800d598 <_malloc_r+0x34>
 800d63a:	463c      	mov	r4, r7
 800d63c:	687f      	ldr	r7, [r7, #4]
 800d63e:	e7b6      	b.n	800d5ae <_malloc_r+0x4a>
 800d640:	461a      	mov	r2, r3
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	42a3      	cmp	r3, r4
 800d646:	d1fb      	bne.n	800d640 <_malloc_r+0xdc>
 800d648:	2300      	movs	r3, #0
 800d64a:	6053      	str	r3, [r2, #4]
 800d64c:	e7de      	b.n	800d60c <_malloc_r+0xa8>
 800d64e:	230c      	movs	r3, #12
 800d650:	6033      	str	r3, [r6, #0]
 800d652:	4630      	mov	r0, r6
 800d654:	f000 f80c 	bl	800d670 <__malloc_unlock>
 800d658:	e794      	b.n	800d584 <_malloc_r+0x20>
 800d65a:	6005      	str	r5, [r0, #0]
 800d65c:	e7d6      	b.n	800d60c <_malloc_r+0xa8>
 800d65e:	bf00      	nop
 800d660:	2002b230 	.word	0x2002b230

0800d664 <__malloc_lock>:
 800d664:	4801      	ldr	r0, [pc, #4]	@ (800d66c <__malloc_lock+0x8>)
 800d666:	f000 b8fb 	b.w	800d860 <__retarget_lock_acquire_recursive>
 800d66a:	bf00      	nop
 800d66c:	2002b370 	.word	0x2002b370

0800d670 <__malloc_unlock>:
 800d670:	4801      	ldr	r0, [pc, #4]	@ (800d678 <__malloc_unlock+0x8>)
 800d672:	f000 b8f6 	b.w	800d862 <__retarget_lock_release_recursive>
 800d676:	bf00      	nop
 800d678:	2002b370 	.word	0x2002b370

0800d67c <__utoa>:
 800d67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d67e:	4c1f      	ldr	r4, [pc, #124]	@ (800d6fc <__utoa+0x80>)
 800d680:	b08b      	sub	sp, #44	@ 0x2c
 800d682:	4605      	mov	r5, r0
 800d684:	460b      	mov	r3, r1
 800d686:	466e      	mov	r6, sp
 800d688:	f104 0c20 	add.w	ip, r4, #32
 800d68c:	6820      	ldr	r0, [r4, #0]
 800d68e:	6861      	ldr	r1, [r4, #4]
 800d690:	4637      	mov	r7, r6
 800d692:	c703      	stmia	r7!, {r0, r1}
 800d694:	3408      	adds	r4, #8
 800d696:	4564      	cmp	r4, ip
 800d698:	463e      	mov	r6, r7
 800d69a:	d1f7      	bne.n	800d68c <__utoa+0x10>
 800d69c:	7921      	ldrb	r1, [r4, #4]
 800d69e:	7139      	strb	r1, [r7, #4]
 800d6a0:	1e91      	subs	r1, r2, #2
 800d6a2:	6820      	ldr	r0, [r4, #0]
 800d6a4:	6038      	str	r0, [r7, #0]
 800d6a6:	2922      	cmp	r1, #34	@ 0x22
 800d6a8:	f04f 0100 	mov.w	r1, #0
 800d6ac:	d904      	bls.n	800d6b8 <__utoa+0x3c>
 800d6ae:	7019      	strb	r1, [r3, #0]
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	b00b      	add	sp, #44	@ 0x2c
 800d6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6b8:	1e58      	subs	r0, r3, #1
 800d6ba:	4684      	mov	ip, r0
 800d6bc:	fbb5 f7f2 	udiv	r7, r5, r2
 800d6c0:	fb02 5617 	mls	r6, r2, r7, r5
 800d6c4:	3628      	adds	r6, #40	@ 0x28
 800d6c6:	446e      	add	r6, sp
 800d6c8:	460c      	mov	r4, r1
 800d6ca:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d6ce:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d6d2:	462e      	mov	r6, r5
 800d6d4:	42b2      	cmp	r2, r6
 800d6d6:	f101 0101 	add.w	r1, r1, #1
 800d6da:	463d      	mov	r5, r7
 800d6dc:	d9ee      	bls.n	800d6bc <__utoa+0x40>
 800d6de:	2200      	movs	r2, #0
 800d6e0:	545a      	strb	r2, [r3, r1]
 800d6e2:	1919      	adds	r1, r3, r4
 800d6e4:	1aa5      	subs	r5, r4, r2
 800d6e6:	42aa      	cmp	r2, r5
 800d6e8:	dae3      	bge.n	800d6b2 <__utoa+0x36>
 800d6ea:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d6ee:	780e      	ldrb	r6, [r1, #0]
 800d6f0:	7006      	strb	r6, [r0, #0]
 800d6f2:	3201      	adds	r2, #1
 800d6f4:	f801 5901 	strb.w	r5, [r1], #-1
 800d6f8:	e7f4      	b.n	800d6e4 <__utoa+0x68>
 800d6fa:	bf00      	nop
 800d6fc:	0801172c 	.word	0x0801172c

0800d700 <memcmp>:
 800d700:	b510      	push	{r4, lr}
 800d702:	3901      	subs	r1, #1
 800d704:	4402      	add	r2, r0
 800d706:	4290      	cmp	r0, r2
 800d708:	d101      	bne.n	800d70e <memcmp+0xe>
 800d70a:	2000      	movs	r0, #0
 800d70c:	e005      	b.n	800d71a <memcmp+0x1a>
 800d70e:	7803      	ldrb	r3, [r0, #0]
 800d710:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d714:	42a3      	cmp	r3, r4
 800d716:	d001      	beq.n	800d71c <memcmp+0x1c>
 800d718:	1b18      	subs	r0, r3, r4
 800d71a:	bd10      	pop	{r4, pc}
 800d71c:	3001      	adds	r0, #1
 800d71e:	e7f2      	b.n	800d706 <memcmp+0x6>

0800d720 <memset>:
 800d720:	4402      	add	r2, r0
 800d722:	4603      	mov	r3, r0
 800d724:	4293      	cmp	r3, r2
 800d726:	d100      	bne.n	800d72a <memset+0xa>
 800d728:	4770      	bx	lr
 800d72a:	f803 1b01 	strb.w	r1, [r3], #1
 800d72e:	e7f9      	b.n	800d724 <memset+0x4>

0800d730 <_reclaim_reent>:
 800d730:	4b2d      	ldr	r3, [pc, #180]	@ (800d7e8 <_reclaim_reent+0xb8>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4283      	cmp	r3, r0
 800d736:	b570      	push	{r4, r5, r6, lr}
 800d738:	4604      	mov	r4, r0
 800d73a:	d053      	beq.n	800d7e4 <_reclaim_reent+0xb4>
 800d73c:	69c3      	ldr	r3, [r0, #28]
 800d73e:	b31b      	cbz	r3, 800d788 <_reclaim_reent+0x58>
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	b163      	cbz	r3, 800d75e <_reclaim_reent+0x2e>
 800d744:	2500      	movs	r5, #0
 800d746:	69e3      	ldr	r3, [r4, #28]
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	5959      	ldr	r1, [r3, r5]
 800d74c:	b9b1      	cbnz	r1, 800d77c <_reclaim_reent+0x4c>
 800d74e:	3504      	adds	r5, #4
 800d750:	2d80      	cmp	r5, #128	@ 0x80
 800d752:	d1f8      	bne.n	800d746 <_reclaim_reent+0x16>
 800d754:	69e3      	ldr	r3, [r4, #28]
 800d756:	4620      	mov	r0, r4
 800d758:	68d9      	ldr	r1, [r3, #12]
 800d75a:	f000 f891 	bl	800d880 <_free_r>
 800d75e:	69e3      	ldr	r3, [r4, #28]
 800d760:	6819      	ldr	r1, [r3, #0]
 800d762:	b111      	cbz	r1, 800d76a <_reclaim_reent+0x3a>
 800d764:	4620      	mov	r0, r4
 800d766:	f000 f88b 	bl	800d880 <_free_r>
 800d76a:	69e3      	ldr	r3, [r4, #28]
 800d76c:	689d      	ldr	r5, [r3, #8]
 800d76e:	b15d      	cbz	r5, 800d788 <_reclaim_reent+0x58>
 800d770:	4629      	mov	r1, r5
 800d772:	4620      	mov	r0, r4
 800d774:	682d      	ldr	r5, [r5, #0]
 800d776:	f000 f883 	bl	800d880 <_free_r>
 800d77a:	e7f8      	b.n	800d76e <_reclaim_reent+0x3e>
 800d77c:	680e      	ldr	r6, [r1, #0]
 800d77e:	4620      	mov	r0, r4
 800d780:	f000 f87e 	bl	800d880 <_free_r>
 800d784:	4631      	mov	r1, r6
 800d786:	e7e1      	b.n	800d74c <_reclaim_reent+0x1c>
 800d788:	6961      	ldr	r1, [r4, #20]
 800d78a:	b111      	cbz	r1, 800d792 <_reclaim_reent+0x62>
 800d78c:	4620      	mov	r0, r4
 800d78e:	f000 f877 	bl	800d880 <_free_r>
 800d792:	69e1      	ldr	r1, [r4, #28]
 800d794:	b111      	cbz	r1, 800d79c <_reclaim_reent+0x6c>
 800d796:	4620      	mov	r0, r4
 800d798:	f000 f872 	bl	800d880 <_free_r>
 800d79c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d79e:	b111      	cbz	r1, 800d7a6 <_reclaim_reent+0x76>
 800d7a0:	4620      	mov	r0, r4
 800d7a2:	f000 f86d 	bl	800d880 <_free_r>
 800d7a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7a8:	b111      	cbz	r1, 800d7b0 <_reclaim_reent+0x80>
 800d7aa:	4620      	mov	r0, r4
 800d7ac:	f000 f868 	bl	800d880 <_free_r>
 800d7b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d7b2:	b111      	cbz	r1, 800d7ba <_reclaim_reent+0x8a>
 800d7b4:	4620      	mov	r0, r4
 800d7b6:	f000 f863 	bl	800d880 <_free_r>
 800d7ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d7bc:	b111      	cbz	r1, 800d7c4 <_reclaim_reent+0x94>
 800d7be:	4620      	mov	r0, r4
 800d7c0:	f000 f85e 	bl	800d880 <_free_r>
 800d7c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d7c6:	b111      	cbz	r1, 800d7ce <_reclaim_reent+0x9e>
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	f000 f859 	bl	800d880 <_free_r>
 800d7ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d7d0:	b111      	cbz	r1, 800d7d8 <_reclaim_reent+0xa8>
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	f000 f854 	bl	800d880 <_free_r>
 800d7d8:	6a23      	ldr	r3, [r4, #32]
 800d7da:	b11b      	cbz	r3, 800d7e4 <_reclaim_reent+0xb4>
 800d7dc:	4620      	mov	r0, r4
 800d7de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7e2:	4718      	bx	r3
 800d7e4:	bd70      	pop	{r4, r5, r6, pc}
 800d7e6:	bf00      	nop
 800d7e8:	20000234 	.word	0x20000234

0800d7ec <_sbrk_r>:
 800d7ec:	b538      	push	{r3, r4, r5, lr}
 800d7ee:	4d06      	ldr	r5, [pc, #24]	@ (800d808 <_sbrk_r+0x1c>)
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	4604      	mov	r4, r0
 800d7f4:	4608      	mov	r0, r1
 800d7f6:	602b      	str	r3, [r5, #0]
 800d7f8:	f7f6 ff18 	bl	800462c <_sbrk>
 800d7fc:	1c43      	adds	r3, r0, #1
 800d7fe:	d102      	bne.n	800d806 <_sbrk_r+0x1a>
 800d800:	682b      	ldr	r3, [r5, #0]
 800d802:	b103      	cbz	r3, 800d806 <_sbrk_r+0x1a>
 800d804:	6023      	str	r3, [r4, #0]
 800d806:	bd38      	pop	{r3, r4, r5, pc}
 800d808:	2002b36c 	.word	0x2002b36c

0800d80c <__errno>:
 800d80c:	4b01      	ldr	r3, [pc, #4]	@ (800d814 <__errno+0x8>)
 800d80e:	6818      	ldr	r0, [r3, #0]
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop
 800d814:	20000234 	.word	0x20000234

0800d818 <__libc_init_array>:
 800d818:	b570      	push	{r4, r5, r6, lr}
 800d81a:	4b0d      	ldr	r3, [pc, #52]	@ (800d850 <__libc_init_array+0x38>)
 800d81c:	4d0d      	ldr	r5, [pc, #52]	@ (800d854 <__libc_init_array+0x3c>)
 800d81e:	1b5b      	subs	r3, r3, r5
 800d820:	109c      	asrs	r4, r3, #2
 800d822:	2600      	movs	r6, #0
 800d824:	42a6      	cmp	r6, r4
 800d826:	d109      	bne.n	800d83c <__libc_init_array+0x24>
 800d828:	f002 fdbc 	bl	80103a4 <_init>
 800d82c:	4d0a      	ldr	r5, [pc, #40]	@ (800d858 <__libc_init_array+0x40>)
 800d82e:	4b0b      	ldr	r3, [pc, #44]	@ (800d85c <__libc_init_array+0x44>)
 800d830:	1b5b      	subs	r3, r3, r5
 800d832:	109c      	asrs	r4, r3, #2
 800d834:	2600      	movs	r6, #0
 800d836:	42a6      	cmp	r6, r4
 800d838:	d105      	bne.n	800d846 <__libc_init_array+0x2e>
 800d83a:	bd70      	pop	{r4, r5, r6, pc}
 800d83c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d840:	4798      	blx	r3
 800d842:	3601      	adds	r6, #1
 800d844:	e7ee      	b.n	800d824 <__libc_init_array+0xc>
 800d846:	f855 3b04 	ldr.w	r3, [r5], #4
 800d84a:	4798      	blx	r3
 800d84c:	3601      	adds	r6, #1
 800d84e:	e7f2      	b.n	800d836 <__libc_init_array+0x1e>
 800d850:	08011958 	.word	0x08011958
 800d854:	08011958 	.word	0x08011958
 800d858:	08011958 	.word	0x08011958
 800d85c:	0801195c 	.word	0x0801195c

0800d860 <__retarget_lock_acquire_recursive>:
 800d860:	4770      	bx	lr

0800d862 <__retarget_lock_release_recursive>:
 800d862:	4770      	bx	lr

0800d864 <memcpy>:
 800d864:	440a      	add	r2, r1
 800d866:	4291      	cmp	r1, r2
 800d868:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d86c:	d100      	bne.n	800d870 <memcpy+0xc>
 800d86e:	4770      	bx	lr
 800d870:	b510      	push	{r4, lr}
 800d872:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d87a:	4291      	cmp	r1, r2
 800d87c:	d1f9      	bne.n	800d872 <memcpy+0xe>
 800d87e:	bd10      	pop	{r4, pc}

0800d880 <_free_r>:
 800d880:	b538      	push	{r3, r4, r5, lr}
 800d882:	4605      	mov	r5, r0
 800d884:	2900      	cmp	r1, #0
 800d886:	d041      	beq.n	800d90c <_free_r+0x8c>
 800d888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d88c:	1f0c      	subs	r4, r1, #4
 800d88e:	2b00      	cmp	r3, #0
 800d890:	bfb8      	it	lt
 800d892:	18e4      	addlt	r4, r4, r3
 800d894:	f7ff fee6 	bl	800d664 <__malloc_lock>
 800d898:	4a1d      	ldr	r2, [pc, #116]	@ (800d910 <_free_r+0x90>)
 800d89a:	6813      	ldr	r3, [r2, #0]
 800d89c:	b933      	cbnz	r3, 800d8ac <_free_r+0x2c>
 800d89e:	6063      	str	r3, [r4, #4]
 800d8a0:	6014      	str	r4, [r2, #0]
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8a8:	f7ff bee2 	b.w	800d670 <__malloc_unlock>
 800d8ac:	42a3      	cmp	r3, r4
 800d8ae:	d908      	bls.n	800d8c2 <_free_r+0x42>
 800d8b0:	6820      	ldr	r0, [r4, #0]
 800d8b2:	1821      	adds	r1, r4, r0
 800d8b4:	428b      	cmp	r3, r1
 800d8b6:	bf01      	itttt	eq
 800d8b8:	6819      	ldreq	r1, [r3, #0]
 800d8ba:	685b      	ldreq	r3, [r3, #4]
 800d8bc:	1809      	addeq	r1, r1, r0
 800d8be:	6021      	streq	r1, [r4, #0]
 800d8c0:	e7ed      	b.n	800d89e <_free_r+0x1e>
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	b10b      	cbz	r3, 800d8cc <_free_r+0x4c>
 800d8c8:	42a3      	cmp	r3, r4
 800d8ca:	d9fa      	bls.n	800d8c2 <_free_r+0x42>
 800d8cc:	6811      	ldr	r1, [r2, #0]
 800d8ce:	1850      	adds	r0, r2, r1
 800d8d0:	42a0      	cmp	r0, r4
 800d8d2:	d10b      	bne.n	800d8ec <_free_r+0x6c>
 800d8d4:	6820      	ldr	r0, [r4, #0]
 800d8d6:	4401      	add	r1, r0
 800d8d8:	1850      	adds	r0, r2, r1
 800d8da:	4283      	cmp	r3, r0
 800d8dc:	6011      	str	r1, [r2, #0]
 800d8de:	d1e0      	bne.n	800d8a2 <_free_r+0x22>
 800d8e0:	6818      	ldr	r0, [r3, #0]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	6053      	str	r3, [r2, #4]
 800d8e6:	4408      	add	r0, r1
 800d8e8:	6010      	str	r0, [r2, #0]
 800d8ea:	e7da      	b.n	800d8a2 <_free_r+0x22>
 800d8ec:	d902      	bls.n	800d8f4 <_free_r+0x74>
 800d8ee:	230c      	movs	r3, #12
 800d8f0:	602b      	str	r3, [r5, #0]
 800d8f2:	e7d6      	b.n	800d8a2 <_free_r+0x22>
 800d8f4:	6820      	ldr	r0, [r4, #0]
 800d8f6:	1821      	adds	r1, r4, r0
 800d8f8:	428b      	cmp	r3, r1
 800d8fa:	bf04      	itt	eq
 800d8fc:	6819      	ldreq	r1, [r3, #0]
 800d8fe:	685b      	ldreq	r3, [r3, #4]
 800d900:	6063      	str	r3, [r4, #4]
 800d902:	bf04      	itt	eq
 800d904:	1809      	addeq	r1, r1, r0
 800d906:	6021      	streq	r1, [r4, #0]
 800d908:	6054      	str	r4, [r2, #4]
 800d90a:	e7ca      	b.n	800d8a2 <_free_r+0x22>
 800d90c:	bd38      	pop	{r3, r4, r5, pc}
 800d90e:	bf00      	nop
 800d910:	2002b230 	.word	0x2002b230

0800d914 <fmod>:
 800d914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d916:	ed2d 8b02 	vpush	{d8}
 800d91a:	ec57 6b10 	vmov	r6, r7, d0
 800d91e:	ec55 4b11 	vmov	r4, r5, d1
 800d922:	f000 fc1f 	bl	800e164 <__ieee754_fmod>
 800d926:	4630      	mov	r0, r6
 800d928:	4639      	mov	r1, r7
 800d92a:	4622      	mov	r2, r4
 800d92c:	462b      	mov	r3, r5
 800d92e:	eeb0 8a40 	vmov.f32	s16, s0
 800d932:	eef0 8a60 	vmov.f32	s17, s1
 800d936:	f7f3 f8db 	bl	8000af0 <__aeabi_dcmpun>
 800d93a:	b930      	cbnz	r0, 800d94a <fmod+0x36>
 800d93c:	2200      	movs	r2, #0
 800d93e:	2300      	movs	r3, #0
 800d940:	4620      	mov	r0, r4
 800d942:	4629      	mov	r1, r5
 800d944:	f7f3 f8a2 	bl	8000a8c <__aeabi_dcmpeq>
 800d948:	b930      	cbnz	r0, 800d958 <fmod+0x44>
 800d94a:	eeb0 0a48 	vmov.f32	s0, s16
 800d94e:	eef0 0a68 	vmov.f32	s1, s17
 800d952:	ecbd 8b02 	vpop	{d8}
 800d956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d958:	f7ff ff58 	bl	800d80c <__errno>
 800d95c:	2200      	movs	r2, #0
 800d95e:	2300      	movs	r3, #0
 800d960:	2121      	movs	r1, #33	@ 0x21
 800d962:	6001      	str	r1, [r0, #0]
 800d964:	4610      	mov	r0, r2
 800d966:	4619      	mov	r1, r3
 800d968:	f7f2 ff52 	bl	8000810 <__aeabi_ddiv>
 800d96c:	ec41 0b18 	vmov	d8, r0, r1
 800d970:	eeb0 0a48 	vmov.f32	s0, s16
 800d974:	eef0 0a68 	vmov.f32	s1, s17
 800d978:	ecbd 8b02 	vpop	{d8}
 800d97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d97e:	bf00      	nop

0800d980 <pow>:
 800d980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d982:	ed2d 8b02 	vpush	{d8}
 800d986:	ec55 4b11 	vmov	r4, r5, d1
 800d98a:	ec57 6b10 	vmov	r6, r7, d0
 800d98e:	f000 fdbf 	bl	800e510 <__ieee754_pow>
 800d992:	4622      	mov	r2, r4
 800d994:	462b      	mov	r3, r5
 800d996:	4620      	mov	r0, r4
 800d998:	4629      	mov	r1, r5
 800d99a:	eeb0 8a40 	vmov.f32	s16, s0
 800d99e:	eef0 8a60 	vmov.f32	s17, s1
 800d9a2:	f7f3 f8a5 	bl	8000af0 <__aeabi_dcmpun>
 800d9a6:	b978      	cbnz	r0, 800d9c8 <pow+0x48>
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	4630      	mov	r0, r6
 800d9ae:	4639      	mov	r1, r7
 800d9b0:	f7f3 f86c 	bl	8000a8c <__aeabi_dcmpeq>
 800d9b4:	b1f0      	cbz	r0, 800d9f4 <pow+0x74>
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	4629      	mov	r1, r5
 800d9be:	f7f3 f865 	bl	8000a8c <__aeabi_dcmpeq>
 800d9c2:	b140      	cbz	r0, 800d9d6 <pow+0x56>
 800d9c4:	ed9f 8b28 	vldr	d8, [pc, #160]	@ 800da68 <pow+0xe8>
 800d9c8:	eeb0 0a48 	vmov.f32	s0, s16
 800d9cc:	eef0 0a68 	vmov.f32	s1, s17
 800d9d0:	ecbd 8b02 	vpop	{d8}
 800d9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9d6:	ec45 4b10 	vmov	d0, r4, r5
 800d9da:	f000 f8c5 	bl	800db68 <finite>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d0f2      	beq.n	800d9c8 <pow+0x48>
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	4629      	mov	r1, r5
 800d9ea:	f7f3 f859 	bl	8000aa0 <__aeabi_dcmplt>
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d0ea      	beq.n	800d9c8 <pow+0x48>
 800d9f2:	e02e      	b.n	800da52 <pow+0xd2>
 800d9f4:	eeb0 0a48 	vmov.f32	s0, s16
 800d9f8:	eef0 0a68 	vmov.f32	s1, s17
 800d9fc:	f000 f8b4 	bl	800db68 <finite>
 800da00:	b1a0      	cbz	r0, 800da2c <pow+0xac>
 800da02:	ec51 0b18 	vmov	r0, r1, d8
 800da06:	2200      	movs	r2, #0
 800da08:	2300      	movs	r3, #0
 800da0a:	f7f3 f83f 	bl	8000a8c <__aeabi_dcmpeq>
 800da0e:	2800      	cmp	r0, #0
 800da10:	d0da      	beq.n	800d9c8 <pow+0x48>
 800da12:	ec47 6b10 	vmov	d0, r6, r7
 800da16:	f000 f8a7 	bl	800db68 <finite>
 800da1a:	2800      	cmp	r0, #0
 800da1c:	d0d4      	beq.n	800d9c8 <pow+0x48>
 800da1e:	ec45 4b10 	vmov	d0, r4, r5
 800da22:	f000 f8a1 	bl	800db68 <finite>
 800da26:	2800      	cmp	r0, #0
 800da28:	d0ce      	beq.n	800d9c8 <pow+0x48>
 800da2a:	e012      	b.n	800da52 <pow+0xd2>
 800da2c:	ec47 6b10 	vmov	d0, r6, r7
 800da30:	f000 f89a 	bl	800db68 <finite>
 800da34:	2800      	cmp	r0, #0
 800da36:	d0e4      	beq.n	800da02 <pow+0x82>
 800da38:	ec45 4b10 	vmov	d0, r4, r5
 800da3c:	f000 f894 	bl	800db68 <finite>
 800da40:	2800      	cmp	r0, #0
 800da42:	d0de      	beq.n	800da02 <pow+0x82>
 800da44:	ec53 2b18 	vmov	r2, r3, d8
 800da48:	ec51 0b18 	vmov	r0, r1, d8
 800da4c:	f7f3 f850 	bl	8000af0 <__aeabi_dcmpun>
 800da50:	b920      	cbnz	r0, 800da5c <pow+0xdc>
 800da52:	f7ff fedb 	bl	800d80c <__errno>
 800da56:	2322      	movs	r3, #34	@ 0x22
 800da58:	6003      	str	r3, [r0, #0]
 800da5a:	e7b5      	b.n	800d9c8 <pow+0x48>
 800da5c:	f7ff fed6 	bl	800d80c <__errno>
 800da60:	2321      	movs	r3, #33	@ 0x21
 800da62:	6003      	str	r3, [r0, #0]
 800da64:	e7b0      	b.n	800d9c8 <pow+0x48>
 800da66:	bf00      	nop
 800da68:	00000000 	.word	0x00000000
 800da6c:	3ff00000 	.word	0x3ff00000

0800da70 <sqrt>:
 800da70:	b538      	push	{r3, r4, r5, lr}
 800da72:	ed2d 8b02 	vpush	{d8}
 800da76:	ec55 4b10 	vmov	r4, r5, d0
 800da7a:	f000 f881 	bl	800db80 <__ieee754_sqrt>
 800da7e:	4622      	mov	r2, r4
 800da80:	462b      	mov	r3, r5
 800da82:	4620      	mov	r0, r4
 800da84:	4629      	mov	r1, r5
 800da86:	eeb0 8a40 	vmov.f32	s16, s0
 800da8a:	eef0 8a60 	vmov.f32	s17, s1
 800da8e:	f7f3 f82f 	bl	8000af0 <__aeabi_dcmpun>
 800da92:	b930      	cbnz	r0, 800daa2 <sqrt+0x32>
 800da94:	2200      	movs	r2, #0
 800da96:	2300      	movs	r3, #0
 800da98:	4620      	mov	r0, r4
 800da9a:	4629      	mov	r1, r5
 800da9c:	f7f3 f800 	bl	8000aa0 <__aeabi_dcmplt>
 800daa0:	b930      	cbnz	r0, 800dab0 <sqrt+0x40>
 800daa2:	eeb0 0a48 	vmov.f32	s0, s16
 800daa6:	eef0 0a68 	vmov.f32	s1, s17
 800daaa:	ecbd 8b02 	vpop	{d8}
 800daae:	bd38      	pop	{r3, r4, r5, pc}
 800dab0:	f7ff feac 	bl	800d80c <__errno>
 800dab4:	2200      	movs	r2, #0
 800dab6:	2300      	movs	r3, #0
 800dab8:	2121      	movs	r1, #33	@ 0x21
 800daba:	6001      	str	r1, [r0, #0]
 800dabc:	4610      	mov	r0, r2
 800dabe:	4619      	mov	r1, r3
 800dac0:	f7f2 fea6 	bl	8000810 <__aeabi_ddiv>
 800dac4:	ec41 0b18 	vmov	d8, r0, r1
 800dac8:	eeb0 0a48 	vmov.f32	s0, s16
 800dacc:	eef0 0a68 	vmov.f32	s1, s17
 800dad0:	ecbd 8b02 	vpop	{d8}
 800dad4:	bd38      	pop	{r3, r4, r5, pc}
 800dad6:	bf00      	nop

0800dad8 <sin>:
 800dad8:	ec51 0b10 	vmov	r0, r1, d0
 800dadc:	4a20      	ldr	r2, [pc, #128]	@ (800db60 <sin+0x88>)
 800dade:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d91f      	bls.n	800db26 <sin+0x4e>
 800dae6:	b500      	push	{lr}
 800dae8:	4a1e      	ldr	r2, [pc, #120]	@ (800db64 <sin+0x8c>)
 800daea:	4293      	cmp	r3, r2
 800daec:	b085      	sub	sp, #20
 800daee:	d908      	bls.n	800db02 <sin+0x2a>
 800daf0:	4602      	mov	r2, r0
 800daf2:	460b      	mov	r3, r1
 800daf4:	f7f2 fbaa 	bl	800024c <__aeabi_dsub>
 800daf8:	ec41 0b10 	vmov	d0, r0, r1
 800dafc:	b005      	add	sp, #20
 800dafe:	f85d fb04 	ldr.w	pc, [sp], #4
 800db02:	4668      	mov	r0, sp
 800db04:	f001 fb44 	bl	800f190 <__ieee754_rem_pio2>
 800db08:	f000 0003 	and.w	r0, r0, #3
 800db0c:	2801      	cmp	r0, #1
 800db0e:	ed9d 0b00 	vldr	d0, [sp]
 800db12:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db16:	d017      	beq.n	800db48 <sin+0x70>
 800db18:	2802      	cmp	r0, #2
 800db1a:	d009      	beq.n	800db30 <sin+0x58>
 800db1c:	b9b8      	cbnz	r0, 800db4e <sin+0x76>
 800db1e:	2001      	movs	r0, #1
 800db20:	f000 fa5e 	bl	800dfe0 <__kernel_sin>
 800db24:	e7ea      	b.n	800dafc <sin+0x24>
 800db26:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 800db58 <sin+0x80>
 800db2a:	2000      	movs	r0, #0
 800db2c:	f000 ba58 	b.w	800dfe0 <__kernel_sin>
 800db30:	2001      	movs	r0, #1
 800db32:	f000 fa55 	bl	800dfe0 <__kernel_sin>
 800db36:	ec53 2b10 	vmov	r2, r3, d0
 800db3a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800db3e:	ee00 3a90 	vmov	s1, r3
 800db42:	b005      	add	sp, #20
 800db44:	f85d fb04 	ldr.w	pc, [sp], #4
 800db48:	f000 f912 	bl	800dd70 <__kernel_cos>
 800db4c:	e7d6      	b.n	800dafc <sin+0x24>
 800db4e:	f000 f90f 	bl	800dd70 <__kernel_cos>
 800db52:	e7f0      	b.n	800db36 <sin+0x5e>
 800db54:	f3af 8000 	nop.w
	...
 800db60:	3fe921fb 	.word	0x3fe921fb
 800db64:	7fefffff 	.word	0x7fefffff

0800db68 <finite>:
 800db68:	b082      	sub	sp, #8
 800db6a:	ed8d 0b00 	vstr	d0, [sp]
 800db6e:	9801      	ldr	r0, [sp, #4]
 800db70:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800db74:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800db78:	0fc0      	lsrs	r0, r0, #31
 800db7a:	b002      	add	sp, #8
 800db7c:	4770      	bx	lr
 800db7e:	bf00      	nop

0800db80 <__ieee754_sqrt>:
 800db80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db84:	4977      	ldr	r1, [pc, #476]	@ (800dd64 <__ieee754_sqrt+0x1e4>)
 800db86:	ec55 4b10 	vmov	r4, r5, d0
 800db8a:	43a9      	bics	r1, r5
 800db8c:	f000 80ae 	beq.w	800dcec <__ieee754_sqrt+0x16c>
 800db90:	2d00      	cmp	r5, #0
 800db92:	462a      	mov	r2, r5
 800db94:	4623      	mov	r3, r4
 800db96:	dd55      	ble.n	800dc44 <__ieee754_sqrt+0xc4>
 800db98:	152c      	asrs	r4, r5, #20
 800db9a:	d062      	beq.n	800dc62 <__ieee754_sqrt+0xe2>
 800db9c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800dba0:	07e1      	lsls	r1, r4, #31
 800dba2:	f2a4 37ff 	subw	r7, r4, #1023	@ 0x3ff
 800dba6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800dbaa:	d403      	bmi.n	800dbb4 <__ieee754_sqrt+0x34>
 800dbac:	0052      	lsls	r2, r2, #1
 800dbae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800dbb2:	005b      	lsls	r3, r3, #1
 800dbb4:	0052      	lsls	r2, r2, #1
 800dbb6:	2600      	movs	r6, #0
 800dbb8:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800dbbc:	107f      	asrs	r7, r7, #1
 800dbbe:	005b      	lsls	r3, r3, #1
 800dbc0:	2416      	movs	r4, #22
 800dbc2:	46b4      	mov	ip, r6
 800dbc4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dbc8:	eb0c 0001 	add.w	r0, ip, r1
 800dbcc:	4290      	cmp	r0, r2
 800dbce:	ea4f 75d3 	mov.w	r5, r3, lsr #31
 800dbd2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dbd6:	dc03      	bgt.n	800dbe0 <__ieee754_sqrt+0x60>
 800dbd8:	eb00 0c01 	add.w	ip, r0, r1
 800dbdc:	1a12      	subs	r2, r2, r0
 800dbde:	440e      	add	r6, r1
 800dbe0:	3c01      	subs	r4, #1
 800dbe2:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800dbe6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dbea:	d1ed      	bne.n	800dbc8 <__ieee754_sqrt+0x48>
 800dbec:	46a0      	mov	r8, r4
 800dbee:	2520      	movs	r5, #32
 800dbf0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800dbf4:	e00a      	b.n	800dc0c <__ieee754_sqrt+0x8c>
 800dbf6:	d043      	beq.n	800dc80 <__ieee754_sqrt+0x100>
 800dbf8:	0051      	lsls	r1, r2, #1
 800dbfa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800dbfe:	3d01      	subs	r5, #1
 800dc00:	460a      	mov	r2, r1
 800dc02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dc06:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800dc0a:	d045      	beq.n	800dc98 <__ieee754_sqrt+0x118>
 800dc0c:	4562      	cmp	r2, ip
 800dc0e:	eb00 0e08 	add.w	lr, r0, r8
 800dc12:	ddf0      	ble.n	800dbf6 <__ieee754_sqrt+0x76>
 800dc14:	f1be 0f00 	cmp.w	lr, #0
 800dc18:	eb0e 0800 	add.w	r8, lr, r0
 800dc1c:	db0c      	blt.n	800dc38 <__ieee754_sqrt+0xb8>
 800dc1e:	46e1      	mov	r9, ip
 800dc20:	eba2 010c 	sub.w	r1, r2, ip
 800dc24:	459e      	cmp	lr, r3
 800dc26:	bf88      	it	hi
 800dc28:	f101 31ff 	addhi.w	r1, r1, #4294967295	@ 0xffffffff
 800dc2c:	0049      	lsls	r1, r1, #1
 800dc2e:	46cc      	mov	ip, r9
 800dc30:	eba3 030e 	sub.w	r3, r3, lr
 800dc34:	4404      	add	r4, r0
 800dc36:	e7e0      	b.n	800dbfa <__ieee754_sqrt+0x7a>
 800dc38:	f1b8 0f00 	cmp.w	r8, #0
 800dc3c:	dbef      	blt.n	800dc1e <__ieee754_sqrt+0x9e>
 800dc3e:	f10c 0901 	add.w	r9, ip, #1
 800dc42:	e7ed      	b.n	800dc20 <__ieee754_sqrt+0xa0>
 800dc44:	f025 4100 	bic.w	r1, r5, #2147483648	@ 0x80000000
 800dc48:	4321      	orrs	r1, r4
 800dc4a:	d046      	beq.n	800dcda <__ieee754_sqrt+0x15a>
 800dc4c:	2d00      	cmp	r5, #0
 800dc4e:	d174      	bne.n	800dd3a <__ieee754_sqrt+0x1ba>
 800dc50:	0ad9      	lsrs	r1, r3, #11
 800dc52:	3a15      	subs	r2, #21
 800dc54:	055b      	lsls	r3, r3, #21
 800dc56:	2900      	cmp	r1, #0
 800dc58:	d0fa      	beq.n	800dc50 <__ieee754_sqrt+0xd0>
 800dc5a:	02ce      	lsls	r6, r1, #11
 800dc5c:	4614      	mov	r4, r2
 800dc5e:	d47d      	bmi.n	800dd5c <__ieee754_sqrt+0x1dc>
 800dc60:	460a      	mov	r2, r1
 800dc62:	2100      	movs	r1, #0
 800dc64:	0052      	lsls	r2, r2, #1
 800dc66:	02d5      	lsls	r5, r2, #11
 800dc68:	4608      	mov	r0, r1
 800dc6a:	f101 0101 	add.w	r1, r1, #1
 800dc6e:	d5f9      	bpl.n	800dc64 <__ieee754_sqrt+0xe4>
 800dc70:	f1c1 0520 	rsb	r5, r1, #32
 800dc74:	fa23 f505 	lsr.w	r5, r3, r5
 800dc78:	432a      	orrs	r2, r5
 800dc7a:	408b      	lsls	r3, r1
 800dc7c:	1a24      	subs	r4, r4, r0
 800dc7e:	e78d      	b.n	800db9c <__ieee754_sqrt+0x1c>
 800dc80:	459e      	cmp	lr, r3
 800dc82:	d902      	bls.n	800dc8a <__ieee754_sqrt+0x10a>
 800dc84:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800dc88:	e7b7      	b.n	800dbfa <__ieee754_sqrt+0x7a>
 800dc8a:	f1be 0f00 	cmp.w	lr, #0
 800dc8e:	eb0e 0800 	add.w	r8, lr, r0
 800dc92:	db24      	blt.n	800dcde <__ieee754_sqrt+0x15e>
 800dc94:	2100      	movs	r1, #0
 800dc96:	e7cb      	b.n	800dc30 <__ieee754_sqrt+0xb0>
 800dc98:	4319      	orrs	r1, r3
 800dc9a:	d012      	beq.n	800dcc2 <__ieee754_sqrt+0x142>
 800dc9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800dd68 <__ieee754_sqrt+0x1e8>
 800dca0:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 800dd6c <__ieee754_sqrt+0x1ec>
 800dca4:	e9da 0100 	ldrd	r0, r1, [sl]
 800dca8:	e9db 2300 	ldrd	r2, r3, [fp]
 800dcac:	f7f2 face 	bl	800024c <__aeabi_dsub>
 800dcb0:	e9da 8900 	ldrd	r8, r9, [sl]
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	4640      	mov	r0, r8
 800dcba:	4649      	mov	r1, r9
 800dcbc:	f7f2 fefa 	bl	8000ab4 <__aeabi_dcmple>
 800dcc0:	bb10      	cbnz	r0, 800dd08 <__ieee754_sqrt+0x188>
 800dcc2:	0865      	lsrs	r5, r4, #1
 800dcc4:	1071      	asrs	r1, r6, #1
 800dcc6:	f101 517f 	add.w	r1, r1, #1069547520	@ 0x3fc00000
 800dcca:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800dcce:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 800dcd2:	ea45 72c6 	orr.w	r2, r5, r6, lsl #31
 800dcd6:	ec43 2b10 	vmov	d0, r2, r3
 800dcda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcde:	f1b8 0f00 	cmp.w	r8, #0
 800dce2:	dbd7      	blt.n	800dc94 <__ieee754_sqrt+0x114>
 800dce4:	f10c 0c01 	add.w	ip, ip, #1
 800dce8:	2100      	movs	r1, #0
 800dcea:	e7a1      	b.n	800dc30 <__ieee754_sqrt+0xb0>
 800dcec:	4622      	mov	r2, r4
 800dcee:	462b      	mov	r3, r5
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	4629      	mov	r1, r5
 800dcf4:	f7f2 fc62 	bl	80005bc <__aeabi_dmul>
 800dcf8:	4622      	mov	r2, r4
 800dcfa:	462b      	mov	r3, r5
 800dcfc:	f7f2 faa8 	bl	8000250 <__adddf3>
 800dd00:	ec41 0b10 	vmov	d0, r0, r1
 800dd04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd08:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800dd0c:	e9da 0100 	ldrd	r0, r1, [sl]
 800dd10:	e9db 2300 	ldrd	r2, r3, [fp]
 800dd14:	d01e      	beq.n	800dd54 <__ieee754_sqrt+0x1d4>
 800dd16:	f7f2 fa9b 	bl	8000250 <__adddf3>
 800dd1a:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd1e:	4602      	mov	r2, r0
 800dd20:	460b      	mov	r3, r1
 800dd22:	4640      	mov	r0, r8
 800dd24:	4649      	mov	r1, r9
 800dd26:	f7f2 febb 	bl	8000aa0 <__aeabi_dcmplt>
 800dd2a:	b1a8      	cbz	r0, 800dd58 <__ieee754_sqrt+0x1d8>
 800dd2c:	1ca3      	adds	r3, r4, #2
 800dd2e:	f104 0502 	add.w	r5, r4, #2
 800dd32:	bf08      	it	eq
 800dd34:	3601      	addeq	r6, #1
 800dd36:	086d      	lsrs	r5, r5, #1
 800dd38:	e7c4      	b.n	800dcc4 <__ieee754_sqrt+0x144>
 800dd3a:	4622      	mov	r2, r4
 800dd3c:	462b      	mov	r3, r5
 800dd3e:	4620      	mov	r0, r4
 800dd40:	4629      	mov	r1, r5
 800dd42:	f7f2 fa83 	bl	800024c <__aeabi_dsub>
 800dd46:	4602      	mov	r2, r0
 800dd48:	460b      	mov	r3, r1
 800dd4a:	f7f2 fd61 	bl	8000810 <__aeabi_ddiv>
 800dd4e:	ec41 0b10 	vmov	d0, r0, r1
 800dd52:	e7c2      	b.n	800dcda <__ieee754_sqrt+0x15a>
 800dd54:	3601      	adds	r6, #1
 800dd56:	e7b5      	b.n	800dcc4 <__ieee754_sqrt+0x144>
 800dd58:	3401      	adds	r4, #1
 800dd5a:	e7b2      	b.n	800dcc2 <__ieee754_sqrt+0x142>
 800dd5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dd60:	460a      	mov	r2, r1
 800dd62:	e78b      	b.n	800dc7c <__ieee754_sqrt+0xfc>
 800dd64:	7ff00000 	.word	0x7ff00000
 800dd68:	08011760 	.word	0x08011760
 800dd6c:	08011758 	.word	0x08011758

0800dd70 <__kernel_cos>:
 800dd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd74:	ec57 6b10 	vmov	r6, r7, d0
 800dd78:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800dd7c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800dd80:	ec5b ab11 	vmov	sl, fp, d1
 800dd84:	b085      	sub	sp, #20
 800dd86:	d271      	bcs.n	800de6c <__kernel_cos+0xfc>
 800dd88:	4630      	mov	r0, r6
 800dd8a:	4639      	mov	r1, r7
 800dd8c:	f7f2 fec6 	bl	8000b1c <__aeabi_d2iz>
 800dd90:	2800      	cmp	r0, #0
 800dd92:	f000 80f4 	beq.w	800df7e <__kernel_cos+0x20e>
 800dd96:	4632      	mov	r2, r6
 800dd98:	463b      	mov	r3, r7
 800dd9a:	4630      	mov	r0, r6
 800dd9c:	4639      	mov	r1, r7
 800dd9e:	f7f2 fc0d 	bl	80005bc <__aeabi_dmul>
 800dda2:	a379      	add	r3, pc, #484	@ (adr r3, 800df88 <__kernel_cos+0x218>)
 800dda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda8:	4604      	mov	r4, r0
 800ddaa:	460d      	mov	r5, r1
 800ddac:	f7f2 fc06 	bl	80005bc <__aeabi_dmul>
 800ddb0:	a377      	add	r3, pc, #476	@ (adr r3, 800df90 <__kernel_cos+0x220>)
 800ddb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb6:	f7f2 fa4b 	bl	8000250 <__adddf3>
 800ddba:	4622      	mov	r2, r4
 800ddbc:	462b      	mov	r3, r5
 800ddbe:	f7f2 fbfd 	bl	80005bc <__aeabi_dmul>
 800ddc2:	a375      	add	r3, pc, #468	@ (adr r3, 800df98 <__kernel_cos+0x228>)
 800ddc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc8:	f7f2 fa40 	bl	800024c <__aeabi_dsub>
 800ddcc:	4622      	mov	r2, r4
 800ddce:	462b      	mov	r3, r5
 800ddd0:	f7f2 fbf4 	bl	80005bc <__aeabi_dmul>
 800ddd4:	a372      	add	r3, pc, #456	@ (adr r3, 800dfa0 <__kernel_cos+0x230>)
 800ddd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddda:	f7f2 fa39 	bl	8000250 <__adddf3>
 800ddde:	4622      	mov	r2, r4
 800dde0:	462b      	mov	r3, r5
 800dde2:	f7f2 fbeb 	bl	80005bc <__aeabi_dmul>
 800dde6:	a370      	add	r3, pc, #448	@ (adr r3, 800dfa8 <__kernel_cos+0x238>)
 800dde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddec:	f7f2 fa2e 	bl	800024c <__aeabi_dsub>
 800ddf0:	4622      	mov	r2, r4
 800ddf2:	462b      	mov	r3, r5
 800ddf4:	f7f2 fbe2 	bl	80005bc <__aeabi_dmul>
 800ddf8:	a36d      	add	r3, pc, #436	@ (adr r3, 800dfb0 <__kernel_cos+0x240>)
 800ddfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfe:	f7f2 fa27 	bl	8000250 <__adddf3>
 800de02:	4622      	mov	r2, r4
 800de04:	462b      	mov	r3, r5
 800de06:	f7f2 fbd9 	bl	80005bc <__aeabi_dmul>
 800de0a:	e9cd 0100 	strd	r0, r1, [sp]
 800de0e:	4b6e      	ldr	r3, [pc, #440]	@ (800dfc8 <__kernel_cos+0x258>)
 800de10:	2200      	movs	r2, #0
 800de12:	4620      	mov	r0, r4
 800de14:	4629      	mov	r1, r5
 800de16:	f7f2 fbd1 	bl	80005bc <__aeabi_dmul>
 800de1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de1e:	4680      	mov	r8, r0
 800de20:	4689      	mov	r9, r1
 800de22:	4620      	mov	r0, r4
 800de24:	4629      	mov	r1, r5
 800de26:	f7f2 fbc9 	bl	80005bc <__aeabi_dmul>
 800de2a:	4644      	mov	r4, r8
 800de2c:	464d      	mov	r5, r9
 800de2e:	4680      	mov	r8, r0
 800de30:	4689      	mov	r9, r1
 800de32:	4652      	mov	r2, sl
 800de34:	465b      	mov	r3, fp
 800de36:	4630      	mov	r0, r6
 800de38:	4639      	mov	r1, r7
 800de3a:	f7f2 fbbf 	bl	80005bc <__aeabi_dmul>
 800de3e:	4602      	mov	r2, r0
 800de40:	460b      	mov	r3, r1
 800de42:	4640      	mov	r0, r8
 800de44:	4649      	mov	r1, r9
 800de46:	f7f2 fa01 	bl	800024c <__aeabi_dsub>
 800de4a:	4602      	mov	r2, r0
 800de4c:	460b      	mov	r3, r1
 800de4e:	4620      	mov	r0, r4
 800de50:	4629      	mov	r1, r5
 800de52:	f7f2 f9fb 	bl	800024c <__aeabi_dsub>
 800de56:	4602      	mov	r2, r0
 800de58:	460b      	mov	r3, r1
 800de5a:	2000      	movs	r0, #0
 800de5c:	495b      	ldr	r1, [pc, #364]	@ (800dfcc <__kernel_cos+0x25c>)
 800de5e:	f7f2 f9f5 	bl	800024c <__aeabi_dsub>
 800de62:	ec41 0b10 	vmov	d0, r0, r1
 800de66:	b005      	add	sp, #20
 800de68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de6c:	4632      	mov	r2, r6
 800de6e:	463b      	mov	r3, r7
 800de70:	4630      	mov	r0, r6
 800de72:	4639      	mov	r1, r7
 800de74:	f7f2 fba2 	bl	80005bc <__aeabi_dmul>
 800de78:	a343      	add	r3, pc, #268	@ (adr r3, 800df88 <__kernel_cos+0x218>)
 800de7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7e:	4604      	mov	r4, r0
 800de80:	460d      	mov	r5, r1
 800de82:	f7f2 fb9b 	bl	80005bc <__aeabi_dmul>
 800de86:	a342      	add	r3, pc, #264	@ (adr r3, 800df90 <__kernel_cos+0x220>)
 800de88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8c:	f7f2 f9e0 	bl	8000250 <__adddf3>
 800de90:	4622      	mov	r2, r4
 800de92:	462b      	mov	r3, r5
 800de94:	f7f2 fb92 	bl	80005bc <__aeabi_dmul>
 800de98:	a33f      	add	r3, pc, #252	@ (adr r3, 800df98 <__kernel_cos+0x228>)
 800de9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9e:	f7f2 f9d5 	bl	800024c <__aeabi_dsub>
 800dea2:	4622      	mov	r2, r4
 800dea4:	462b      	mov	r3, r5
 800dea6:	f7f2 fb89 	bl	80005bc <__aeabi_dmul>
 800deaa:	a33d      	add	r3, pc, #244	@ (adr r3, 800dfa0 <__kernel_cos+0x230>)
 800deac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb0:	f7f2 f9ce 	bl	8000250 <__adddf3>
 800deb4:	4622      	mov	r2, r4
 800deb6:	462b      	mov	r3, r5
 800deb8:	f7f2 fb80 	bl	80005bc <__aeabi_dmul>
 800debc:	a33a      	add	r3, pc, #232	@ (adr r3, 800dfa8 <__kernel_cos+0x238>)
 800debe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec2:	f7f2 f9c3 	bl	800024c <__aeabi_dsub>
 800dec6:	4622      	mov	r2, r4
 800dec8:	462b      	mov	r3, r5
 800deca:	f7f2 fb77 	bl	80005bc <__aeabi_dmul>
 800dece:	a338      	add	r3, pc, #224	@ (adr r3, 800dfb0 <__kernel_cos+0x240>)
 800ded0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded4:	f7f2 f9bc 	bl	8000250 <__adddf3>
 800ded8:	462b      	mov	r3, r5
 800deda:	4622      	mov	r2, r4
 800dedc:	f7f2 fb6e 	bl	80005bc <__aeabi_dmul>
 800dee0:	4b3b      	ldr	r3, [pc, #236]	@ (800dfd0 <__kernel_cos+0x260>)
 800dee2:	4598      	cmp	r8, r3
 800dee4:	e9cd 0100 	strd	r0, r1, [sp]
 800dee8:	d991      	bls.n	800de0e <__kernel_cos+0x9e>
 800deea:	4b3a      	ldr	r3, [pc, #232]	@ (800dfd4 <__kernel_cos+0x264>)
 800deec:	4598      	cmp	r8, r3
 800deee:	d83d      	bhi.n	800df6c <__kernel_cos+0x1fc>
 800def0:	f5a8 1300 	sub.w	r3, r8, #2097152	@ 0x200000
 800def4:	2200      	movs	r2, #0
 800def6:	4935      	ldr	r1, [pc, #212]	@ (800dfcc <__kernel_cos+0x25c>)
 800def8:	2000      	movs	r0, #0
 800defa:	4690      	mov	r8, r2
 800defc:	4699      	mov	r9, r3
 800defe:	f7f2 f9a5 	bl	800024c <__aeabi_dsub>
 800df02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df06:	4b30      	ldr	r3, [pc, #192]	@ (800dfc8 <__kernel_cos+0x258>)
 800df08:	2200      	movs	r2, #0
 800df0a:	4620      	mov	r0, r4
 800df0c:	4629      	mov	r1, r5
 800df0e:	f7f2 fb55 	bl	80005bc <__aeabi_dmul>
 800df12:	4642      	mov	r2, r8
 800df14:	464b      	mov	r3, r9
 800df16:	f7f2 f999 	bl	800024c <__aeabi_dsub>
 800df1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df1e:	4680      	mov	r8, r0
 800df20:	4689      	mov	r9, r1
 800df22:	4620      	mov	r0, r4
 800df24:	4629      	mov	r1, r5
 800df26:	f7f2 fb49 	bl	80005bc <__aeabi_dmul>
 800df2a:	4644      	mov	r4, r8
 800df2c:	464d      	mov	r5, r9
 800df2e:	4680      	mov	r8, r0
 800df30:	4689      	mov	r9, r1
 800df32:	4652      	mov	r2, sl
 800df34:	465b      	mov	r3, fp
 800df36:	4630      	mov	r0, r6
 800df38:	4639      	mov	r1, r7
 800df3a:	f7f2 fb3f 	bl	80005bc <__aeabi_dmul>
 800df3e:	4602      	mov	r2, r0
 800df40:	460b      	mov	r3, r1
 800df42:	4640      	mov	r0, r8
 800df44:	4649      	mov	r1, r9
 800df46:	f7f2 f981 	bl	800024c <__aeabi_dsub>
 800df4a:	4602      	mov	r2, r0
 800df4c:	460b      	mov	r3, r1
 800df4e:	4620      	mov	r0, r4
 800df50:	4629      	mov	r1, r5
 800df52:	f7f2 f97b 	bl	800024c <__aeabi_dsub>
 800df56:	4602      	mov	r2, r0
 800df58:	460b      	mov	r3, r1
 800df5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df5e:	f7f2 f975 	bl	800024c <__aeabi_dsub>
 800df62:	ec41 0b10 	vmov	d0, r0, r1
 800df66:	b005      	add	sp, #20
 800df68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df6c:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800dfb8 <__kernel_cos+0x248>
 800df70:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 800dfd8 <__kernel_cos+0x268>
 800df74:	ed8d 7b02 	vstr	d7, [sp, #8]
 800df78:	f04f 0800 	mov.w	r8, #0
 800df7c:	e7c3      	b.n	800df06 <__kernel_cos+0x196>
 800df7e:	ed9f 0b10 	vldr	d0, [pc, #64]	@ 800dfc0 <__kernel_cos+0x250>
 800df82:	b005      	add	sp, #20
 800df84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df88:	be8838d4 	.word	0xbe8838d4
 800df8c:	bda8fae9 	.word	0xbda8fae9
 800df90:	bdb4b1c4 	.word	0xbdb4b1c4
 800df94:	3e21ee9e 	.word	0x3e21ee9e
 800df98:	809c52ad 	.word	0x809c52ad
 800df9c:	3e927e4f 	.word	0x3e927e4f
 800dfa0:	19cb1590 	.word	0x19cb1590
 800dfa4:	3efa01a0 	.word	0x3efa01a0
 800dfa8:	16c15177 	.word	0x16c15177
 800dfac:	3f56c16c 	.word	0x3f56c16c
 800dfb0:	5555554c 	.word	0x5555554c
 800dfb4:	3fa55555 	.word	0x3fa55555
 800dfb8:	00000000 	.word	0x00000000
 800dfbc:	3fe70000 	.word	0x3fe70000
 800dfc0:	00000000 	.word	0x00000000
 800dfc4:	3ff00000 	.word	0x3ff00000
 800dfc8:	3fe00000 	.word	0x3fe00000
 800dfcc:	3ff00000 	.word	0x3ff00000
 800dfd0:	3fd33332 	.word	0x3fd33332
 800dfd4:	3fe90000 	.word	0x3fe90000
 800dfd8:	3fd20000 	.word	0x3fd20000
 800dfdc:	00000000 	.word	0x00000000

0800dfe0 <__kernel_sin>:
 800dfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe4:	ec55 4b10 	vmov	r4, r5, d0
 800dfe8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800dfec:	b085      	sub	sp, #20
 800dfee:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800dff2:	ed8d 1b00 	vstr	d1, [sp]
 800dff6:	4682      	mov	sl, r0
 800dff8:	d206      	bcs.n	800e008 <__kernel_sin+0x28>
 800dffa:	4620      	mov	r0, r4
 800dffc:	4629      	mov	r1, r5
 800dffe:	f7f2 fd8d 	bl	8000b1c <__aeabi_d2iz>
 800e002:	2800      	cmp	r0, #0
 800e004:	f000 808c 	beq.w	800e120 <__kernel_sin+0x140>
 800e008:	4622      	mov	r2, r4
 800e00a:	462b      	mov	r3, r5
 800e00c:	4620      	mov	r0, r4
 800e00e:	4629      	mov	r1, r5
 800e010:	f7f2 fad4 	bl	80005bc <__aeabi_dmul>
 800e014:	4606      	mov	r6, r0
 800e016:	460f      	mov	r7, r1
 800e018:	4632      	mov	r2, r6
 800e01a:	463b      	mov	r3, r7
 800e01c:	4620      	mov	r0, r4
 800e01e:	4629      	mov	r1, r5
 800e020:	f7f2 facc 	bl	80005bc <__aeabi_dmul>
 800e024:	a345      	add	r3, pc, #276	@ (adr r3, 800e13c <__kernel_sin+0x15c>)
 800e026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e02e:	4630      	mov	r0, r6
 800e030:	4639      	mov	r1, r7
 800e032:	f7f2 fac3 	bl	80005bc <__aeabi_dmul>
 800e036:	a343      	add	r3, pc, #268	@ (adr r3, 800e144 <__kernel_sin+0x164>)
 800e038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03c:	f7f2 f906 	bl	800024c <__aeabi_dsub>
 800e040:	4632      	mov	r2, r6
 800e042:	463b      	mov	r3, r7
 800e044:	f7f2 faba 	bl	80005bc <__aeabi_dmul>
 800e048:	a340      	add	r3, pc, #256	@ (adr r3, 800e14c <__kernel_sin+0x16c>)
 800e04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04e:	f7f2 f8ff 	bl	8000250 <__adddf3>
 800e052:	4632      	mov	r2, r6
 800e054:	463b      	mov	r3, r7
 800e056:	f7f2 fab1 	bl	80005bc <__aeabi_dmul>
 800e05a:	a33e      	add	r3, pc, #248	@ (adr r3, 800e154 <__kernel_sin+0x174>)
 800e05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e060:	f7f2 f8f4 	bl	800024c <__aeabi_dsub>
 800e064:	4632      	mov	r2, r6
 800e066:	463b      	mov	r3, r7
 800e068:	f7f2 faa8 	bl	80005bc <__aeabi_dmul>
 800e06c:	a33b      	add	r3, pc, #236	@ (adr r3, 800e15c <__kernel_sin+0x17c>)
 800e06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e072:	f7f2 f8ed 	bl	8000250 <__adddf3>
 800e076:	4680      	mov	r8, r0
 800e078:	4689      	mov	r9, r1
 800e07a:	f1ba 0f00 	cmp.w	sl, #0
 800e07e:	d037      	beq.n	800e0f0 <__kernel_sin+0x110>
 800e080:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e084:	4b2c      	ldr	r3, [pc, #176]	@ (800e138 <__kernel_sin+0x158>)
 800e086:	2200      	movs	r2, #0
 800e088:	f7f2 fa98 	bl	80005bc <__aeabi_dmul>
 800e08c:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 800e090:	4642      	mov	r2, r8
 800e092:	464b      	mov	r3, r9
 800e094:	4680      	mov	r8, r0
 800e096:	4689      	mov	r9, r1
 800e098:	4650      	mov	r0, sl
 800e09a:	4659      	mov	r1, fp
 800e09c:	f7f2 fa8e 	bl	80005bc <__aeabi_dmul>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	4640      	mov	r0, r8
 800e0a6:	4649      	mov	r1, r9
 800e0a8:	f7f2 f8d0 	bl	800024c <__aeabi_dsub>
 800e0ac:	4632      	mov	r2, r6
 800e0ae:	463b      	mov	r3, r7
 800e0b0:	f7f2 fa84 	bl	80005bc <__aeabi_dmul>
 800e0b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0b8:	f7f2 f8c8 	bl	800024c <__aeabi_dsub>
 800e0bc:	a31c      	add	r3, pc, #112	@ (adr r3, 800e130 <__kernel_sin+0x150>)
 800e0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c2:	4606      	mov	r6, r0
 800e0c4:	460f      	mov	r7, r1
 800e0c6:	4650      	mov	r0, sl
 800e0c8:	4659      	mov	r1, fp
 800e0ca:	f7f2 fa77 	bl	80005bc <__aeabi_dmul>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	4639      	mov	r1, r7
 800e0d6:	f7f2 f8bb 	bl	8000250 <__adddf3>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	460b      	mov	r3, r1
 800e0de:	4620      	mov	r0, r4
 800e0e0:	4629      	mov	r1, r5
 800e0e2:	f7f2 f8b3 	bl	800024c <__aeabi_dsub>
 800e0e6:	ec41 0b10 	vmov	d0, r0, r1
 800e0ea:	b005      	add	sp, #20
 800e0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	4630      	mov	r0, r6
 800e0f6:	4639      	mov	r1, r7
 800e0f8:	f7f2 fa60 	bl	80005bc <__aeabi_dmul>
 800e0fc:	a30c      	add	r3, pc, #48	@ (adr r3, 800e130 <__kernel_sin+0x150>)
 800e0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e102:	f7f2 f8a3 	bl	800024c <__aeabi_dsub>
 800e106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e10a:	f7f2 fa57 	bl	80005bc <__aeabi_dmul>
 800e10e:	4622      	mov	r2, r4
 800e110:	462b      	mov	r3, r5
 800e112:	f7f2 f89d 	bl	8000250 <__adddf3>
 800e116:	ec41 0b10 	vmov	d0, r0, r1
 800e11a:	b005      	add	sp, #20
 800e11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e120:	ec45 4b10 	vmov	d0, r4, r5
 800e124:	b005      	add	sp, #20
 800e126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e12a:	bf00      	nop
 800e12c:	f3af 8000 	nop.w
 800e130:	55555549 	.word	0x55555549
 800e134:	3fc55555 	.word	0x3fc55555
 800e138:	3fe00000 	.word	0x3fe00000
 800e13c:	5acfd57c 	.word	0x5acfd57c
 800e140:	3de5d93a 	.word	0x3de5d93a
 800e144:	8a2b9ceb 	.word	0x8a2b9ceb
 800e148:	3e5ae5e6 	.word	0x3e5ae5e6
 800e14c:	57b1fe7d 	.word	0x57b1fe7d
 800e150:	3ec71de3 	.word	0x3ec71de3
 800e154:	19c161d5 	.word	0x19c161d5
 800e158:	3f2a01a0 	.word	0x3f2a01a0
 800e15c:	1110f8a6 	.word	0x1110f8a6
 800e160:	3f811111 	.word	0x3f811111

0800e164 <__ieee754_fmod>:
 800e164:	ec53 2b11 	vmov	r2, r3, d1
 800e168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e16c:	f023 4700 	bic.w	r7, r3, #2147483648	@ 0x80000000
 800e170:	ea52 0407 	orrs.w	r4, r2, r7
 800e174:	ec51 0b10 	vmov	r0, r1, d0
 800e178:	d053      	beq.n	800e222 <__ieee754_fmod+0xbe>
 800e17a:	4cc1      	ldr	r4, [pc, #772]	@ (800e480 <__ieee754_fmod+0x31c>)
 800e17c:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800e180:	45a0      	cmp	r8, r4
 800e182:	468c      	mov	ip, r1
 800e184:	d84d      	bhi.n	800e222 <__ieee754_fmod+0xbe>
 800e186:	4254      	negs	r4, r2
 800e188:	4ebe      	ldr	r6, [pc, #760]	@ (800e484 <__ieee754_fmod+0x320>)
 800e18a:	4314      	orrs	r4, r2
 800e18c:	ea47 74d4 	orr.w	r4, r7, r4, lsr #31
 800e190:	42b4      	cmp	r4, r6
 800e192:	4615      	mov	r5, r2
 800e194:	d845      	bhi.n	800e222 <__ieee754_fmod+0xbe>
 800e196:	45b8      	cmp	r8, r7
 800e198:	469e      	mov	lr, r3
 800e19a:	4602      	mov	r2, r0
 800e19c:	f001 4400 	and.w	r4, r1, #2147483648	@ 0x80000000
 800e1a0:	dc49      	bgt.n	800e236 <__ieee754_fmod+0xd2>
 800e1a2:	f2c0 80bc 	blt.w	800e31e <__ieee754_fmod+0x1ba>
 800e1a6:	4285      	cmp	r5, r0
 800e1a8:	f200 80b9 	bhi.w	800e31e <__ieee754_fmod+0x1ba>
 800e1ac:	f000 8105 	beq.w	800e3ba <__ieee754_fmod+0x256>
 800e1b0:	4231      	tst	r1, r6
 800e1b2:	d150      	bne.n	800e256 <__ieee754_fmod+0xf2>
 800e1b4:	f1b8 0f00 	cmp.w	r8, #0
 800e1b8:	d13f      	bne.n	800e23a <__ieee754_fmod+0xd6>
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	4603      	mov	r3, r0
 800e1be:	f340 8154 	ble.w	800e46a <__ieee754_fmod+0x306>
 800e1c2:	49b1      	ldr	r1, [pc, #708]	@ (800e488 <__ieee754_fmod+0x324>)
 800e1c4:	005b      	lsls	r3, r3, #1
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 800e1cc:	dcfa      	bgt.n	800e1c4 <__ieee754_fmod+0x60>
 800e1ce:	4bad      	ldr	r3, [pc, #692]	@ (800e484 <__ieee754_fmod+0x320>)
 800e1d0:	ea0e 0303 	and.w	r3, lr, r3
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	f040 80c6 	bne.w	800e366 <__ieee754_fmod+0x202>
 800e1da:	2f00      	cmp	r7, #0
 800e1dc:	f040 80f4 	bne.w	800e3c8 <__ieee754_fmod+0x264>
 800e1e0:	2d00      	cmp	r5, #0
 800e1e2:	462b      	mov	r3, r5
 800e1e4:	f300 80a4 	bgt.w	800e330 <__ieee754_fmod+0x1cc>
 800e1e8:	48a8      	ldr	r0, [pc, #672]	@ (800e48c <__ieee754_fmod+0x328>)
 800e1ea:	1a40      	subs	r0, r0, r1
 800e1ec:	281f      	cmp	r0, #31
 800e1ee:	f300 8175 	bgt.w	800e4dc <__ieee754_fmod+0x378>
 800e1f2:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800e1f6:	fa22 f303 	lsr.w	r3, r2, r3
 800e1fa:	fa08 f800 	lsl.w	r8, r8, r0
 800e1fe:	4ea2      	ldr	r6, [pc, #648]	@ (800e488 <__ieee754_fmod+0x324>)
 800e200:	ea43 0308 	orr.w	r3, r3, r8
 800e204:	4082      	lsls	r2, r0
 800e206:	f04f 0e15 	mov.w	lr, #21
 800e20a:	f206 401e 	addw	r0, r6, #1054	@ 0x41e
 800e20e:	fa07 fc0e 	lsl.w	ip, r7, lr
 800e212:	fa25 f000 	lsr.w	r0, r5, r0
 800e216:	fa05 f50e 	lsl.w	r5, r5, lr
 800e21a:	1b57      	subs	r7, r2, r5
 800e21c:	ea40 0e0c 	orr.w	lr, r0, ip
 800e220:	e02e      	b.n	800e280 <__ieee754_fmod+0x11c>
 800e222:	f7f2 f9cb 	bl	80005bc <__aeabi_dmul>
 800e226:	4602      	mov	r2, r0
 800e228:	460b      	mov	r3, r1
 800e22a:	f7f2 faf1 	bl	8000810 <__aeabi_ddiv>
 800e22e:	ec41 0b10 	vmov	d0, r0, r1
 800e232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e236:	4231      	tst	r1, r6
 800e238:	d10d      	bne.n	800e256 <__ieee754_fmod+0xf2>
 800e23a:	4994      	ldr	r1, [pc, #592]	@ (800e48c <__ieee754_fmod+0x328>)
 800e23c:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800e240:	005b      	lsls	r3, r3, #1
 800e242:	2b00      	cmp	r3, #0
 800e244:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 800e248:	ddc1      	ble.n	800e1ce <__ieee754_fmod+0x6a>
 800e24a:	005b      	lsls	r3, r3, #1
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 800e252:	dcf5      	bgt.n	800e240 <__ieee754_fmod+0xdc>
 800e254:	e7bb      	b.n	800e1ce <__ieee754_fmod+0x6a>
 800e256:	4b8b      	ldr	r3, [pc, #556]	@ (800e484 <__ieee754_fmod+0x320>)
 800e258:	ea4f 5028 	mov.w	r0, r8, asr #20
 800e25c:	ea0e 0303 	and.w	r3, lr, r3
 800e260:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800e264:	2b00      	cmp	r3, #0
 800e266:	d05d      	beq.n	800e324 <__ieee754_fmod+0x1c0>
 800e268:	153f      	asrs	r7, r7, #20
 800e26a:	f3cc 0313 	ubfx	r3, ip, #0, #20
 800e26e:	f3ce 0e13 	ubfx	lr, lr, #0, #20
 800e272:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800e276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e27a:	f44e 1e80 	orr.w	lr, lr, #1048576	@ 0x100000
 800e27e:	1b57      	subs	r7, r2, r5
 800e280:	1b88      	subs	r0, r1, r6
 800e282:	1e41      	subs	r1, r0, #1
 800e284:	b960      	cbnz	r0, 800e2a0 <__ieee754_fmod+0x13c>
 800e286:	e026      	b.n	800e2d6 <__ieee754_fmod+0x172>
 800e288:	3801      	subs	r0, #1
 800e28a:	d41c      	bmi.n	800e2c6 <__ieee754_fmod+0x162>
 800e28c:	eba2 0c05 	sub.w	ip, r2, r5
 800e290:	ea4f 73dc 	mov.w	r3, ip, lsr #31
 800e294:	3901      	subs	r1, #1
 800e296:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800e29a:	ea4f 024c 	mov.w	r2, ip, lsl #1
 800e29e:	d319      	bcc.n	800e2d4 <__ieee754_fmod+0x170>
 800e2a0:	42aa      	cmp	r2, r5
 800e2a2:	eba3 000e 	sub.w	r0, r3, lr
 800e2a6:	d3ef      	bcc.n	800e288 <__ieee754_fmod+0x124>
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	eba2 0c05 	sub.w	ip, r2, r5
 800e2ae:	db0a      	blt.n	800e2c6 <__ieee754_fmod+0x162>
 800e2b0:	ea50 030c 	orrs.w	r3, r0, ip
 800e2b4:	d1ec      	bne.n	800e290 <__ieee754_fmod+0x12c>
 800e2b6:	4b76      	ldr	r3, [pc, #472]	@ (800e490 <__ieee754_fmod+0x32c>)
 800e2b8:	0fe4      	lsrs	r4, r4, #31
 800e2ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e2be:	ed93 0b00 	vldr	d0, [r3]
 800e2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2c6:	0fd0      	lsrs	r0, r2, #31
 800e2c8:	3901      	subs	r1, #1
 800e2ca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e2ce:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e2d2:	d2e5      	bcs.n	800e2a0 <__ieee754_fmod+0x13c>
 800e2d4:	1b57      	subs	r7, r2, r5
 800e2d6:	eba3 000e 	sub.w	r0, r3, lr
 800e2da:	42aa      	cmp	r2, r5
 800e2dc:	bf38      	it	cc
 800e2de:	f100 30ff 	addcc.w	r0, r0, #4294967295	@ 0xffffffff
 800e2e2:	2800      	cmp	r0, #0
 800e2e4:	bfbc      	itt	lt
 800e2e6:	4617      	movlt	r7, r2
 800e2e8:	4618      	movlt	r0, r3
 800e2ea:	ea50 0307 	orrs.w	r3, r0, r7
 800e2ee:	d105      	bne.n	800e2fc <__ieee754_fmod+0x198>
 800e2f0:	e7e1      	b.n	800e2b6 <__ieee754_fmod+0x152>
 800e2f2:	0ffb      	lsrs	r3, r7, #31
 800e2f4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800e2f8:	007f      	lsls	r7, r7, #1
 800e2fa:	3e01      	subs	r6, #1
 800e2fc:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 800e300:	dbf7      	blt.n	800e2f2 <__ieee754_fmod+0x18e>
 800e302:	4b62      	ldr	r3, [pc, #392]	@ (800e48c <__ieee754_fmod+0x328>)
 800e304:	429e      	cmp	r6, r3
 800e306:	db42      	blt.n	800e38e <__ieee754_fmod+0x22a>
 800e308:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800e30c:	f206 36ff 	addw	r6, r6, #1023	@ 0x3ff
 800e310:	4320      	orrs	r0, r4
 800e312:	ea40 5306 	orr.w	r3, r0, r6, lsl #20
 800e316:	463a      	mov	r2, r7
 800e318:	ec43 2b10 	vmov	d0, r2, r3
 800e31c:	e789      	b.n	800e232 <__ieee754_fmod+0xce>
 800e31e:	ec41 0b10 	vmov	d0, r0, r1
 800e322:	e786      	b.n	800e232 <__ieee754_fmod+0xce>
 800e324:	2f00      	cmp	r7, #0
 800e326:	d14f      	bne.n	800e3c8 <__ieee754_fmod+0x264>
 800e328:	2d00      	cmp	r5, #0
 800e32a:	462b      	mov	r3, r5
 800e32c:	f340 80b4 	ble.w	800e498 <__ieee754_fmod+0x334>
 800e330:	4e55      	ldr	r6, [pc, #340]	@ (800e488 <__ieee754_fmod+0x324>)
 800e332:	005b      	lsls	r3, r3, #1
 800e334:	2b00      	cmp	r3, #0
 800e336:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800e33a:	dcfa      	bgt.n	800e332 <__ieee754_fmod+0x1ce>
 800e33c:	4853      	ldr	r0, [pc, #332]	@ (800e48c <__ieee754_fmod+0x328>)
 800e33e:	4281      	cmp	r1, r0
 800e340:	db4a      	blt.n	800e3d8 <__ieee754_fmod+0x274>
 800e342:	eba0 0e06 	sub.w	lr, r0, r6
 800e346:	f3cc 0313 	ubfx	r3, ip, #0, #20
 800e34a:	f1be 0f1f 	cmp.w	lr, #31
 800e34e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e352:	f77f af5a 	ble.w	800e20a <__ieee754_fmod+0xa6>
 800e356:	484f      	ldr	r0, [pc, #316]	@ (800e494 <__ieee754_fmod+0x330>)
 800e358:	1b80      	subs	r0, r0, r6
 800e35a:	1b89      	subs	r1, r1, r6
 800e35c:	fa05 fe00 	lsl.w	lr, r5, r0
 800e360:	3901      	subs	r1, #1
 800e362:	2500      	movs	r5, #0
 800e364:	e79c      	b.n	800e2a0 <__ieee754_fmod+0x13c>
 800e366:	4849      	ldr	r0, [pc, #292]	@ (800e48c <__ieee754_fmod+0x328>)
 800e368:	1a40      	subs	r0, r0, r1
 800e36a:	ea4f 5c27 	mov.w	ip, r7, asr #20
 800e36e:	281f      	cmp	r0, #31
 800e370:	f2ac 36ff 	subw	r6, ip, #1023	@ 0x3ff
 800e374:	dd52      	ble.n	800e41c <__ieee754_fmod+0x2b8>
 800e376:	4b47      	ldr	r3, [pc, #284]	@ (800e494 <__ieee754_fmod+0x330>)
 800e378:	f3ce 0e13 	ubfx	lr, lr, #0, #20
 800e37c:	1a5b      	subs	r3, r3, r1
 800e37e:	1b89      	subs	r1, r1, r6
 800e380:	fa02 f303 	lsl.w	r3, r2, r3
 800e384:	f44e 1e80 	orr.w	lr, lr, #1048576	@ 0x100000
 800e388:	3901      	subs	r1, #1
 800e38a:	2200      	movs	r2, #0
 800e38c:	e788      	b.n	800e2a0 <__ieee754_fmod+0x13c>
 800e38e:	eba3 0c06 	sub.w	ip, r3, r6
 800e392:	f1bc 0f14 	cmp.w	ip, #20
 800e396:	dc51      	bgt.n	800e43c <__ieee754_fmod+0x2d8>
 800e398:	f206 431e 	addw	r3, r6, #1054	@ 0x41e
 800e39c:	fa27 f70c 	lsr.w	r7, r7, ip
 800e3a0:	fa00 f303 	lsl.w	r3, r0, r3
 800e3a4:	fa40 fc0c 	asr.w	ip, r0, ip
 800e3a8:	ea4c 0404 	orr.w	r4, ip, r4
 800e3ac:	ea43 0007 	orr.w	r0, r3, r7
 800e3b0:	4623      	mov	r3, r4
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	ec43 2b10 	vmov	d0, r2, r3
 800e3b8:	e73b      	b.n	800e232 <__ieee754_fmod+0xce>
 800e3ba:	4b35      	ldr	r3, [pc, #212]	@ (800e490 <__ieee754_fmod+0x32c>)
 800e3bc:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800e3c0:	ed93 0b00 	vldr	d0, [r3]
 800e3c4:	e735      	b.n	800e232 <__ieee754_fmod+0xce>
 800e3c6:	4930      	ldr	r1, [pc, #192]	@ (800e488 <__ieee754_fmod+0x324>)
 800e3c8:	4e30      	ldr	r6, [pc, #192]	@ (800e48c <__ieee754_fmod+0x328>)
 800e3ca:	02fb      	lsls	r3, r7, #11
 800e3cc:	005b      	lsls	r3, r3, #1
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800e3d4:	dcfa      	bgt.n	800e3cc <__ieee754_fmod+0x268>
 800e3d6:	e7b1      	b.n	800e33c <__ieee754_fmod+0x1d8>
 800e3d8:	eba0 0c01 	sub.w	ip, r0, r1
 800e3dc:	f1bc 0f1f 	cmp.w	ip, #31
 800e3e0:	dc0f      	bgt.n	800e402 <__ieee754_fmod+0x29e>
 800e3e2:	eba0 0e06 	sub.w	lr, r0, r6
 800e3e6:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800e3ea:	fa22 f303 	lsr.w	r3, r2, r3
 800e3ee:	fa08 f80c 	lsl.w	r8, r8, ip
 800e3f2:	f1be 0f1f 	cmp.w	lr, #31
 800e3f6:	ea43 0308 	orr.w	r3, r3, r8
 800e3fa:	fa02 f20c 	lsl.w	r2, r2, ip
 800e3fe:	dcaa      	bgt.n	800e356 <__ieee754_fmod+0x1f2>
 800e400:	e703      	b.n	800e20a <__ieee754_fmod+0xa6>
 800e402:	eba0 0c06 	sub.w	ip, r0, r6
 800e406:	4823      	ldr	r0, [pc, #140]	@ (800e494 <__ieee754_fmod+0x330>)
 800e408:	f1bc 0f1f 	cmp.w	ip, #31
 800e40c:	eba0 0301 	sub.w	r3, r0, r1
 800e410:	46e6      	mov	lr, ip
 800e412:	fa02 f303 	lsl.w	r3, r2, r3
 800e416:	dc1d      	bgt.n	800e454 <__ieee754_fmod+0x2f0>
 800e418:	2200      	movs	r2, #0
 800e41a:	e6f6      	b.n	800e20a <__ieee754_fmod+0xa6>
 800e41c:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800e420:	fa22 f303 	lsr.w	r3, r2, r3
 800e424:	fa08 f800 	lsl.w	r8, r8, r0
 800e428:	ea43 0308 	orr.w	r3, r3, r8
 800e42c:	4082      	lsls	r2, r0
 800e42e:	f3ce 0e13 	ubfx	lr, lr, #0, #20
 800e432:	1b89      	subs	r1, r1, r6
 800e434:	f44e 1e80 	orr.w	lr, lr, #1048576	@ 0x100000
 800e438:	3901      	subs	r1, #1
 800e43a:	e731      	b.n	800e2a0 <__ieee754_fmod+0x13c>
 800e43c:	f1bc 0f1f 	cmp.w	ip, #31
 800e440:	dc0f      	bgt.n	800e462 <__ieee754_fmod+0x2fe>
 800e442:	f206 431e 	addw	r3, r6, #1054	@ 0x41e
 800e446:	fa27 f70c 	lsr.w	r7, r7, ip
 800e44a:	fa00 f303 	lsl.w	r3, r0, r3
 800e44e:	ea43 0007 	orr.w	r0, r3, r7
 800e452:	e7ad      	b.n	800e3b0 <__ieee754_fmod+0x24c>
 800e454:	1b80      	subs	r0, r0, r6
 800e456:	1b89      	subs	r1, r1, r6
 800e458:	fa05 fe00 	lsl.w	lr, r5, r0
 800e45c:	d027      	beq.n	800e4ae <__ieee754_fmod+0x34a>
 800e45e:	2200      	movs	r2, #0
 800e460:	e77e      	b.n	800e360 <__ieee754_fmod+0x1fc>
 800e462:	4b0c      	ldr	r3, [pc, #48]	@ (800e494 <__ieee754_fmod+0x330>)
 800e464:	1b9b      	subs	r3, r3, r6
 800e466:	4118      	asrs	r0, r3
 800e468:	e7a2      	b.n	800e3b0 <__ieee754_fmod+0x24c>
 800e46a:	4b06      	ldr	r3, [pc, #24]	@ (800e484 <__ieee754_fmod+0x320>)
 800e46c:	ea0e 0303 	and.w	r3, lr, r3
 800e470:	b34b      	cbz	r3, 800e4c6 <__ieee754_fmod+0x362>
 800e472:	153f      	asrs	r7, r7, #20
 800e474:	4904      	ldr	r1, [pc, #16]	@ (800e488 <__ieee754_fmod+0x324>)
 800e476:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800e47a:	0ac3      	lsrs	r3, r0, #11
 800e47c:	0542      	lsls	r2, r0, #21
 800e47e:	e7d6      	b.n	800e42e <__ieee754_fmod+0x2ca>
 800e480:	7fefffff 	.word	0x7fefffff
 800e484:	7ff00000 	.word	0x7ff00000
 800e488:	fffffbed 	.word	0xfffffbed
 800e48c:	fffffc02 	.word	0xfffffc02
 800e490:	08011768 	.word	0x08011768
 800e494:	fffffbe2 	.word	0xfffffbe2
 800e498:	f3cc 0313 	ubfx	r3, ip, #0, #20
 800e49c:	ea4f 2ed5 	mov.w	lr, r5, lsr #11
 800e4a0:	4e19      	ldr	r6, [pc, #100]	@ (800e508 <__ieee754_fmod+0x3a4>)
 800e4a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e4a6:	f100 0113 	add.w	r1, r0, #19
 800e4aa:	056d      	lsls	r5, r5, #21
 800e4ac:	e6f8      	b.n	800e2a0 <__ieee754_fmod+0x13c>
 800e4ae:	eba3 000e 	sub.w	r0, r3, lr
 800e4b2:	2800      	cmp	r0, #0
 800e4b4:	db1e      	blt.n	800e4f4 <__ieee754_fmod+0x390>
 800e4b6:	f43f aefe 	beq.w	800e2b6 <__ieee754_fmod+0x152>
 800e4ba:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 800e4be:	460f      	mov	r7, r1
 800e4c0:	f6ff af17 	blt.w	800e2f2 <__ieee754_fmod+0x18e>
 800e4c4:	e765      	b.n	800e392 <__ieee754_fmod+0x22e>
 800e4c6:	2f00      	cmp	r7, #0
 800e4c8:	f47f af7d 	bne.w	800e3c6 <__ieee754_fmod+0x262>
 800e4cc:	2d00      	cmp	r5, #0
 800e4ce:	490e      	ldr	r1, [pc, #56]	@ (800e508 <__ieee754_fmod+0x3a4>)
 800e4d0:	462b      	mov	r3, r5
 800e4d2:	bfd8      	it	le
 800e4d4:	2015      	movle	r0, #21
 800e4d6:	f73f af2b 	bgt.w	800e330 <__ieee754_fmod+0x1cc>
 800e4da:	e68a      	b.n	800e1f2 <__ieee754_fmod+0x8e>
 800e4dc:	4b0b      	ldr	r3, [pc, #44]	@ (800e50c <__ieee754_fmod+0x3a8>)
 800e4de:	4e0a      	ldr	r6, [pc, #40]	@ (800e508 <__ieee754_fmod+0x3a4>)
 800e4e0:	1a5b      	subs	r3, r3, r1
 800e4e2:	fa02 f303 	lsl.w	r3, r2, r3
 800e4e6:	ea4f 2ed5 	mov.w	lr, r5, lsr #11
 800e4ea:	f201 4112 	addw	r1, r1, #1042	@ 0x412
 800e4ee:	463a      	mov	r2, r7
 800e4f0:	056d      	lsls	r5, r5, #21
 800e4f2:	e6d5      	b.n	800e2a0 <__ieee754_fmod+0x13c>
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f43f aede 	beq.w	800e2b6 <__ieee754_fmod+0x152>
 800e4fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e4fe:	4618      	mov	r0, r3
 800e500:	460f      	mov	r7, r1
 800e502:	f6ff aef6 	blt.w	800e2f2 <__ieee754_fmod+0x18e>
 800e506:	e744      	b.n	800e392 <__ieee754_fmod+0x22e>
 800e508:	fffffbed 	.word	0xfffffbed
 800e50c:	fffffbe2 	.word	0xfffffbe2

0800e510 <__ieee754_pow>:
 800e510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e514:	ec5a 9b11 	vmov	r9, sl, d1
 800e518:	f02a 4b00 	bic.w	fp, sl, #2147483648	@ 0x80000000
 800e51c:	ea59 000b 	orrs.w	r0, r9, fp
 800e520:	ec55 4b10 	vmov	r4, r5, d0
 800e524:	b093      	sub	sp, #76	@ 0x4c
 800e526:	d112      	bne.n	800e54e <__ieee754_pow+0x3e>
 800e528:	1923      	adds	r3, r4, r4
 800e52a:	496d      	ldr	r1, [pc, #436]	@ (800e6e0 <__ieee754_pow+0x1d0>)
 800e52c:	f485 2200 	eor.w	r2, r5, #524288	@ 0x80000
 800e530:	4152      	adcs	r2, r2
 800e532:	4298      	cmp	r0, r3
 800e534:	4191      	sbcs	r1, r2
 800e536:	d223      	bcs.n	800e580 <__ieee754_pow+0x70>
 800e538:	464a      	mov	r2, r9
 800e53a:	4653      	mov	r3, sl
 800e53c:	4620      	mov	r0, r4
 800e53e:	4629      	mov	r1, r5
 800e540:	f7f1 fe86 	bl	8000250 <__adddf3>
 800e544:	ec41 0b10 	vmov	d0, r0, r1
 800e548:	b013      	add	sp, #76	@ 0x4c
 800e54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e54e:	4b65      	ldr	r3, [pc, #404]	@ (800e6e4 <__ieee754_pow+0x1d4>)
 800e550:	ed8d 0a00 	vstr	s0, [sp]
 800e554:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e558:	429a      	cmp	r2, r3
 800e55a:	462e      	mov	r6, r5
 800e55c:	9202      	str	r2, [sp, #8]
 800e55e:	d914      	bls.n	800e58a <__ieee754_pow+0x7a>
 800e560:	9b00      	ldr	r3, [sp, #0]
 800e562:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800e566:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800e56a:	431e      	orrs	r6, r3
 800e56c:	d1e4      	bne.n	800e538 <__ieee754_pow+0x28>
 800e56e:	464b      	mov	r3, r9
 800e570:	18db      	adds	r3, r3, r3
 800e572:	495b      	ldr	r1, [pc, #364]	@ (800e6e0 <__ieee754_pow+0x1d0>)
 800e574:	f48a 2200 	eor.w	r2, sl, #524288	@ 0x80000
 800e578:	4152      	adcs	r2, r2
 800e57a:	429e      	cmp	r6, r3
 800e57c:	4191      	sbcs	r1, r2
 800e57e:	d3db      	bcc.n	800e538 <__ieee754_pow+0x28>
 800e580:	ed9f 0b55 	vldr	d0, [pc, #340]	@ 800e6d8 <__ieee754_pow+0x1c8>
 800e584:	b013      	add	sp, #76	@ 0x4c
 800e586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e58a:	46d0      	mov	r8, sl
 800e58c:	464f      	mov	r7, r9
 800e58e:	d013      	beq.n	800e5b8 <__ieee754_pow+0xa8>
 800e590:	459b      	cmp	fp, r3
 800e592:	d8e5      	bhi.n	800e560 <__ieee754_pow+0x50>
 800e594:	9b02      	ldr	r3, [sp, #8]
 800e596:	d052      	beq.n	800e63e <__ieee754_pow+0x12e>
 800e598:	2e00      	cmp	r6, #0
 800e59a:	db15      	blt.n	800e5c8 <__ieee754_pow+0xb8>
 800e59c:	2f00      	cmp	r7, #0
 800e59e:	f040 8089 	bne.w	800e6b4 <__ieee754_pow+0x1a4>
 800e5a2:	4a51      	ldr	r2, [pc, #324]	@ (800e6e8 <__ieee754_pow+0x1d8>)
 800e5a4:	4593      	cmp	fp, r2
 800e5a6:	f040 8423 	bne.w	800edf0 <__ieee754_pow+0x8e0>
 800e5aa:	f1b8 0f00 	cmp.w	r8, #0
 800e5ae:	f2c0 8518 	blt.w	800efe2 <__ieee754_pow+0xad2>
 800e5b2:	ec45 4b10 	vmov	d0, r4, r5
 800e5b6:	e7c7      	b.n	800e548 <__ieee754_pow+0x38>
 800e5b8:	2c00      	cmp	r4, #0
 800e5ba:	d1bd      	bne.n	800e538 <__ieee754_pow+0x28>
 800e5bc:	4593      	cmp	fp, r2
 800e5be:	d8bb      	bhi.n	800e538 <__ieee754_pow+0x28>
 800e5c0:	f000 8426 	beq.w	800ee10 <__ieee754_pow+0x900>
 800e5c4:	9b02      	ldr	r3, [sp, #8]
 800e5c6:	e7e7      	b.n	800e598 <__ieee754_pow+0x88>
 800e5c8:	4a48      	ldr	r2, [pc, #288]	@ (800e6ec <__ieee754_pow+0x1dc>)
 800e5ca:	4593      	cmp	fp, r2
 800e5cc:	f200 83ac 	bhi.w	800ed28 <__ieee754_pow+0x818>
 800e5d0:	4a47      	ldr	r2, [pc, #284]	@ (800e6f0 <__ieee754_pow+0x1e0>)
 800e5d2:	4593      	cmp	fp, r2
 800e5d4:	f200 83ad 	bhi.w	800ed32 <__ieee754_pow+0x822>
 800e5d8:	2f00      	cmp	r7, #0
 800e5da:	f040 83d5 	bne.w	800ed88 <__ieee754_pow+0x878>
 800e5de:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800e5e2:	f000 850b 	beq.w	800effc <__ieee754_pow+0xaec>
 800e5e6:	ec45 4b10 	vmov	d0, r4, r5
 800e5ea:	9304      	str	r3, [sp, #16]
 800e5ec:	f000 ffe2 	bl	800f5b4 <fabs>
 800e5f0:	9a00      	ldr	r2, [sp, #0]
 800e5f2:	9b04      	ldr	r3, [sp, #16]
 800e5f4:	2a00      	cmp	r2, #0
 800e5f6:	d038      	beq.n	800e66a <__ieee754_pow+0x15a>
 800e5f8:	0ff2      	lsrs	r2, r6, #31
 800e5fa:	3a01      	subs	r2, #1
 800e5fc:	ea57 0102 	orrs.w	r1, r7, r2
 800e600:	d065      	beq.n	800e6ce <__ieee754_pow+0x1be>
 800e602:	3f01      	subs	r7, #1
 800e604:	4317      	orrs	r7, r2
 800e606:	f000 838a 	beq.w	800ed1e <__ieee754_pow+0x80e>
 800e60a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800e6d8 <__ieee754_pow+0x1c8>
 800e60e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e612:	f1bb 4f84 	cmp.w	fp, #1107296256	@ 0x42000000
 800e616:	d96f      	bls.n	800e6f8 <__ieee754_pow+0x1e8>
 800e618:	4b36      	ldr	r3, [pc, #216]	@ (800e6f4 <__ieee754_pow+0x1e4>)
 800e61a:	9a02      	ldr	r2, [sp, #8]
 800e61c:	459b      	cmp	fp, r3
 800e61e:	4b34      	ldr	r3, [pc, #208]	@ (800e6f0 <__ieee754_pow+0x1e0>)
 800e620:	f240 842c 	bls.w	800ee7c <__ieee754_pow+0x96c>
 800e624:	429a      	cmp	r2, r3
 800e626:	f200 8510 	bhi.w	800f04a <__ieee754_pow+0xb3a>
 800e62a:	f1b8 0f00 	cmp.w	r8, #0
 800e62e:	f2c0 8510 	blt.w	800f052 <__ieee754_pow+0xb42>
 800e632:	2000      	movs	r0, #0
 800e634:	b013      	add	sp, #76	@ 0x4c
 800e636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e63a:	f001 b87d 	b.w	800f738 <__math_uflow>
 800e63e:	2f00      	cmp	r7, #0
 800e640:	d18e      	bne.n	800e560 <__ieee754_pow+0x50>
 800e642:	9b02      	ldr	r3, [sp, #8]
 800e644:	9a00      	ldr	r2, [sp, #0]
 800e646:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800e64a:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800e64e:	4313      	orrs	r3, r2
 800e650:	d096      	beq.n	800e580 <__ieee754_pow+0x70>
 800e652:	4b27      	ldr	r3, [pc, #156]	@ (800e6f0 <__ieee754_pow+0x1e0>)
 800e654:	9a02      	ldr	r2, [sp, #8]
 800e656:	429a      	cmp	r2, r3
 800e658:	f240 849a 	bls.w	800ef90 <__ieee754_pow+0xa80>
 800e65c:	f1b8 0f00 	cmp.w	r8, #0
 800e660:	f2c0 8520 	blt.w	800f0a4 <__ieee754_pow+0xb94>
 800e664:	ec4a 9b10 	vmov	d0, r9, sl
 800e668:	e76e      	b.n	800e548 <__ieee754_pow+0x38>
 800e66a:	4a1f      	ldr	r2, [pc, #124]	@ (800e6e8 <__ieee754_pow+0x1d8>)
 800e66c:	f026 4140 	bic.w	r1, r6, #3221225472	@ 0xc0000000
 800e670:	4291      	cmp	r1, r2
 800e672:	d002      	beq.n	800e67a <__ieee754_pow+0x16a>
 800e674:	9a02      	ldr	r2, [sp, #8]
 800e676:	2a00      	cmp	r2, #0
 800e678:	d1be      	bne.n	800e5f8 <__ieee754_pow+0xe8>
 800e67a:	f1b8 0f00 	cmp.w	r8, #0
 800e67e:	f2c0 847d 	blt.w	800ef7c <__ieee754_pow+0xa6c>
 800e682:	2e00      	cmp	r6, #0
 800e684:	f6bf af60 	bge.w	800e548 <__ieee754_pow+0x38>
 800e688:	9b02      	ldr	r3, [sp, #8]
 800e68a:	f103 4a40 	add.w	sl, r3, #3221225472	@ 0xc0000000
 800e68e:	f50a 1a80 	add.w	sl, sl, #1048576	@ 0x100000
 800e692:	ea5a 0a07 	orrs.w	sl, sl, r7
 800e696:	f040 84bb 	bne.w	800f010 <__ieee754_pow+0xb00>
 800e69a:	ec53 2b10 	vmov	r2, r3, d0
 800e69e:	4610      	mov	r0, r2
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	f7f1 fdd3 	bl	800024c <__aeabi_dsub>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	f7f2 f8b1 	bl	8000810 <__aeabi_ddiv>
 800e6ae:	ec41 0b10 	vmov	d0, r0, r1
 800e6b2:	e749      	b.n	800e548 <__ieee754_pow+0x38>
 800e6b4:	2700      	movs	r7, #0
 800e6b6:	ec45 4b10 	vmov	d0, r4, r5
 800e6ba:	9304      	str	r3, [sp, #16]
 800e6bc:	f000 ff7a 	bl	800f5b4 <fabs>
 800e6c0:	9a00      	ldr	r2, [sp, #0]
 800e6c2:	9b04      	ldr	r3, [sp, #16]
 800e6c4:	2a00      	cmp	r2, #0
 800e6c6:	d0d0      	beq.n	800e66a <__ieee754_pow+0x15a>
 800e6c8:	0ff2      	lsrs	r2, r6, #31
 800e6ca:	3a01      	subs	r2, #1
 800e6cc:	e799      	b.n	800e602 <__ieee754_pow+0xf2>
 800e6ce:	4622      	mov	r2, r4
 800e6d0:	462b      	mov	r3, r5
 800e6d2:	e7e4      	b.n	800e69e <__ieee754_pow+0x18e>
 800e6d4:	f3af 8000 	nop.w
 800e6d8:	00000000 	.word	0x00000000
 800e6dc:	3ff00000 	.word	0x3ff00000
 800e6e0:	fff00000 	.word	0xfff00000
 800e6e4:	7ff00000 	.word	0x7ff00000
 800e6e8:	3ff00000 	.word	0x3ff00000
 800e6ec:	433fffff 	.word	0x433fffff
 800e6f0:	3fefffff 	.word	0x3fefffff
 800e6f4:	43f00000 	.word	0x43f00000
 800e6f8:	4ad7      	ldr	r2, [pc, #860]	@ (800ea58 <__ieee754_pow+0x548>)
 800e6fa:	4032      	ands	r2, r6
 800e6fc:	2a00      	cmp	r2, #0
 800e6fe:	f040 8435 	bne.w	800ef6c <__ieee754_pow+0xa5c>
 800e702:	4bd6      	ldr	r3, [pc, #856]	@ (800ea5c <__ieee754_pow+0x54c>)
 800e704:	ec51 0b10 	vmov	r0, r1, d0
 800e708:	2200      	movs	r2, #0
 800e70a:	f7f1 ff57 	bl	80005bc <__aeabi_dmul>
 800e70e:	ec41 0b10 	vmov	d0, r0, r1
 800e712:	ee10 3a90 	vmov	r3, s1
 800e716:	f06f 0134 	mvn.w	r1, #52	@ 0x34
 800e71a:	151a      	asrs	r2, r3, #20
 800e71c:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e720:	eb02 0801 	add.w	r8, r2, r1
 800e724:	4ace      	ldr	r2, [pc, #824]	@ (800ea60 <__ieee754_pow+0x550>)
 800e726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e72a:	f043 547f 	orr.w	r4, r3, #1069547520	@ 0x3fc00000
 800e72e:	4293      	cmp	r3, r2
 800e730:	f444 1440 	orr.w	r4, r4, #3145728	@ 0x300000
 800e734:	f340 840b 	ble.w	800ef4e <__ieee754_pow+0xa3e>
 800e738:	4aca      	ldr	r2, [pc, #808]	@ (800ea64 <__ieee754_pow+0x554>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	f340 8475 	ble.w	800f02a <__ieee754_pow+0xb1a>
 800e740:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800ea00 <__ieee754_pow+0x4f0>
 800e744:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e748:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800ea08 <__ieee754_pow+0x4f8>
 800e74c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e750:	ed9f 7bab 	vldr	d7, [pc, #684]	@ 800ea00 <__ieee754_pow+0x4f0>
 800e754:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 800e758:	f108 0801 	add.w	r8, r8, #1
 800e75c:	f5a4 1480 	sub.w	r4, r4, #1048576	@ 0x100000
 800e760:	2500      	movs	r5, #0
 800e762:	ec53 2b10 	vmov	r2, r3, d0
 800e766:	4621      	mov	r1, r4
 800e768:	4610      	mov	r0, r2
 800e76a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e76e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e772:	f7f1 fd6b 	bl	800024c <__aeabi_dsub>
 800e776:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e77a:	4606      	mov	r6, r0
 800e77c:	460f      	mov	r7, r1
 800e77e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e782:	f7f1 fd65 	bl	8000250 <__adddf3>
 800e786:	4602      	mov	r2, r0
 800e788:	460b      	mov	r3, r1
 800e78a:	2000      	movs	r0, #0
 800e78c:	49b6      	ldr	r1, [pc, #728]	@ (800ea68 <__ieee754_pow+0x558>)
 800e78e:	f7f2 f83f 	bl	8000810 <__aeabi_ddiv>
 800e792:	468c      	mov	ip, r1
 800e794:	4683      	mov	fp, r0
 800e796:	465a      	mov	r2, fp
 800e798:	4663      	mov	r3, ip
 800e79a:	4630      	mov	r0, r6
 800e79c:	4639      	mov	r1, r7
 800e79e:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800e7a2:	f7f1 ff0b 	bl	80005bc <__aeabi_dmul>
 800e7a6:	1064      	asrs	r4, r4, #1
 800e7a8:	460a      	mov	r2, r1
 800e7aa:	4601      	mov	r1, r0
 800e7ac:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e7b0:	f044 5400 	orr.w	r4, r4, #536870912	@ 0x20000000
 800e7b4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800e7b8:	f504 2300 	add.w	r3, r4, #524288	@ 0x80000
 800e7bc:	1959      	adds	r1, r3, r5
 800e7be:	2000      	movs	r0, #0
 800e7c0:	4604      	mov	r4, r0
 800e7c2:	460d      	mov	r5, r1
 800e7c4:	f04f 0b00 	mov.w	fp, #0
 800e7c8:	4661      	mov	r1, ip
 800e7ca:	4658      	mov	r0, fp
 800e7cc:	4622      	mov	r2, r4
 800e7ce:	462b      	mov	r3, r5
 800e7d0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800e7d4:	e9cd 0100 	strd	r0, r1, [sp]
 800e7d8:	f7f1 fef0 	bl	80005bc <__aeabi_dmul>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	460b      	mov	r3, r1
 800e7e0:	4630      	mov	r0, r6
 800e7e2:	4639      	mov	r1, r7
 800e7e4:	f7f1 fd32 	bl	800024c <__aeabi_dsub>
 800e7e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e7ec:	4606      	mov	r6, r0
 800e7ee:	460f      	mov	r7, r1
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	4629      	mov	r1, r5
 800e7f4:	f7f1 fd2a 	bl	800024c <__aeabi_dsub>
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e800:	f7f1 fd24 	bl	800024c <__aeabi_dsub>
 800e804:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e808:	f7f1 fed8 	bl	80005bc <__aeabi_dmul>
 800e80c:	4602      	mov	r2, r0
 800e80e:	460b      	mov	r3, r1
 800e810:	4630      	mov	r0, r6
 800e812:	4639      	mov	r1, r7
 800e814:	f7f1 fd1a 	bl	800024c <__aeabi_dsub>
 800e818:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e81c:	f7f1 fece 	bl	80005bc <__aeabi_dmul>
 800e820:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e824:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e828:	4622      	mov	r2, r4
 800e82a:	462b      	mov	r3, r5
 800e82c:	4620      	mov	r0, r4
 800e82e:	4629      	mov	r1, r5
 800e830:	f7f1 fec4 	bl	80005bc <__aeabi_dmul>
 800e834:	a376      	add	r3, pc, #472	@ (adr r3, 800ea10 <__ieee754_pow+0x500>)
 800e836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83a:	4604      	mov	r4, r0
 800e83c:	460d      	mov	r5, r1
 800e83e:	f7f1 febd 	bl	80005bc <__aeabi_dmul>
 800e842:	a375      	add	r3, pc, #468	@ (adr r3, 800ea18 <__ieee754_pow+0x508>)
 800e844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e848:	f7f1 fd02 	bl	8000250 <__adddf3>
 800e84c:	4622      	mov	r2, r4
 800e84e:	462b      	mov	r3, r5
 800e850:	f7f1 feb4 	bl	80005bc <__aeabi_dmul>
 800e854:	a372      	add	r3, pc, #456	@ (adr r3, 800ea20 <__ieee754_pow+0x510>)
 800e856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85a:	f7f1 fcf9 	bl	8000250 <__adddf3>
 800e85e:	4622      	mov	r2, r4
 800e860:	462b      	mov	r3, r5
 800e862:	f7f1 feab 	bl	80005bc <__aeabi_dmul>
 800e866:	a370      	add	r3, pc, #448	@ (adr r3, 800ea28 <__ieee754_pow+0x518>)
 800e868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86c:	f7f1 fcf0 	bl	8000250 <__adddf3>
 800e870:	4622      	mov	r2, r4
 800e872:	462b      	mov	r3, r5
 800e874:	f7f1 fea2 	bl	80005bc <__aeabi_dmul>
 800e878:	a36d      	add	r3, pc, #436	@ (adr r3, 800ea30 <__ieee754_pow+0x520>)
 800e87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87e:	f7f1 fce7 	bl	8000250 <__adddf3>
 800e882:	4622      	mov	r2, r4
 800e884:	462b      	mov	r3, r5
 800e886:	f7f1 fe99 	bl	80005bc <__aeabi_dmul>
 800e88a:	a36b      	add	r3, pc, #428	@ (adr r3, 800ea38 <__ieee754_pow+0x528>)
 800e88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e890:	f7f1 fcde 	bl	8000250 <__adddf3>
 800e894:	4622      	mov	r2, r4
 800e896:	4606      	mov	r6, r0
 800e898:	460f      	mov	r7, r1
 800e89a:	462b      	mov	r3, r5
 800e89c:	4620      	mov	r0, r4
 800e89e:	4629      	mov	r1, r5
 800e8a0:	f7f1 fe8c 	bl	80005bc <__aeabi_dmul>
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	4630      	mov	r0, r6
 800e8aa:	4639      	mov	r1, r7
 800e8ac:	f7f1 fe86 	bl	80005bc <__aeabi_dmul>
 800e8b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e8b4:	4604      	mov	r4, r0
 800e8b6:	460d      	mov	r5, r1
 800e8b8:	4632      	mov	r2, r6
 800e8ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8be:	463b      	mov	r3, r7
 800e8c0:	f7f1 fcc6 	bl	8000250 <__adddf3>
 800e8c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8c8:	f7f1 fe78 	bl	80005bc <__aeabi_dmul>
 800e8cc:	4622      	mov	r2, r4
 800e8ce:	462b      	mov	r3, r5
 800e8d0:	f7f1 fcbe 	bl	8000250 <__adddf3>
 800e8d4:	4632      	mov	r2, r6
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	460d      	mov	r5, r1
 800e8da:	463b      	mov	r3, r7
 800e8dc:	4630      	mov	r0, r6
 800e8de:	4639      	mov	r1, r7
 800e8e0:	f7f1 fe6c 	bl	80005bc <__aeabi_dmul>
 800e8e4:	4b61      	ldr	r3, [pc, #388]	@ (800ea6c <__ieee754_pow+0x55c>)
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	4606      	mov	r6, r0
 800e8ea:	460f      	mov	r7, r1
 800e8ec:	f7f1 fcb0 	bl	8000250 <__adddf3>
 800e8f0:	4622      	mov	r2, r4
 800e8f2:	462b      	mov	r3, r5
 800e8f4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e8f8:	f7f1 fcaa 	bl	8000250 <__adddf3>
 800e8fc:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800e900:	460d      	mov	r5, r1
 800e902:	465a      	mov	r2, fp
 800e904:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e908:	462b      	mov	r3, r5
 800e90a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800e90e:	f7f1 fe55 	bl	80005bc <__aeabi_dmul>
 800e912:	465c      	mov	r4, fp
 800e914:	e9cd 0100 	strd	r0, r1, [sp]
 800e918:	4b54      	ldr	r3, [pc, #336]	@ (800ea6c <__ieee754_pow+0x55c>)
 800e91a:	2200      	movs	r2, #0
 800e91c:	4620      	mov	r0, r4
 800e91e:	4629      	mov	r1, r5
 800e920:	f7f1 fc94 	bl	800024c <__aeabi_dsub>
 800e924:	4632      	mov	r2, r6
 800e926:	463b      	mov	r3, r7
 800e928:	f7f1 fc90 	bl	800024c <__aeabi_dsub>
 800e92c:	4602      	mov	r2, r0
 800e92e:	460b      	mov	r3, r1
 800e930:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e934:	f7f1 fc8a 	bl	800024c <__aeabi_dsub>
 800e938:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e93c:	f7f1 fe3e 	bl	80005bc <__aeabi_dmul>
 800e940:	4622      	mov	r2, r4
 800e942:	4606      	mov	r6, r0
 800e944:	460f      	mov	r7, r1
 800e946:	462b      	mov	r3, r5
 800e948:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e94c:	f7f1 fe36 	bl	80005bc <__aeabi_dmul>
 800e950:	4602      	mov	r2, r0
 800e952:	460b      	mov	r3, r1
 800e954:	4630      	mov	r0, r6
 800e956:	4639      	mov	r1, r7
 800e958:	f7f1 fc7a 	bl	8000250 <__adddf3>
 800e95c:	4606      	mov	r6, r0
 800e95e:	460f      	mov	r7, r1
 800e960:	4632      	mov	r2, r6
 800e962:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e966:	463b      	mov	r3, r7
 800e968:	f7f1 fc72 	bl	8000250 <__adddf3>
 800e96c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800e970:	a333      	add	r3, pc, #204	@ (adr r3, 800ea40 <__ieee754_pow+0x530>)
 800e972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e976:	4658      	mov	r0, fp
 800e978:	e9cd bc02 	strd	fp, ip, [sp, #8]
 800e97c:	460d      	mov	r5, r1
 800e97e:	f7f1 fe1d 	bl	80005bc <__aeabi_dmul>
 800e982:	465c      	mov	r4, fp
 800e984:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e988:	e9cd 0100 	strd	r0, r1, [sp]
 800e98c:	4620      	mov	r0, r4
 800e98e:	4629      	mov	r1, r5
 800e990:	f7f1 fc5c 	bl	800024c <__aeabi_dsub>
 800e994:	4602      	mov	r2, r0
 800e996:	460b      	mov	r3, r1
 800e998:	4630      	mov	r0, r6
 800e99a:	4639      	mov	r1, r7
 800e99c:	f7f1 fc56 	bl	800024c <__aeabi_dsub>
 800e9a0:	a329      	add	r3, pc, #164	@ (adr r3, 800ea48 <__ieee754_pow+0x538>)
 800e9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a6:	f7f1 fe09 	bl	80005bc <__aeabi_dmul>
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	460b      	mov	r3, r1
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	4629      	mov	r1, r5
 800e9b2:	4614      	mov	r4, r2
 800e9b4:	461d      	mov	r5, r3
 800e9b6:	a326      	add	r3, pc, #152	@ (adr r3, 800ea50 <__ieee754_pow+0x540>)
 800e9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9bc:	f7f1 fdfe 	bl	80005bc <__aeabi_dmul>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	460b      	mov	r3, r1
 800e9c4:	4620      	mov	r0, r4
 800e9c6:	4629      	mov	r1, r5
 800e9c8:	f7f1 fc42 	bl	8000250 <__adddf3>
 800e9cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e9d0:	f7f1 fc3e 	bl	8000250 <__adddf3>
 800e9d4:	4606      	mov	r6, r0
 800e9d6:	4640      	mov	r0, r8
 800e9d8:	460f      	mov	r7, r1
 800e9da:	f7f1 fd85 	bl	80004e8 <__aeabi_i2d>
 800e9de:	4632      	mov	r2, r6
 800e9e0:	4604      	mov	r4, r0
 800e9e2:	460d      	mov	r5, r1
 800e9e4:	463b      	mov	r3, r7
 800e9e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9ea:	f7f1 fc31 	bl	8000250 <__adddf3>
 800e9ee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800e9f2:	f7f1 fc2d 	bl	8000250 <__adddf3>
 800e9f6:	4622      	mov	r2, r4
 800e9f8:	462b      	mov	r3, r5
 800e9fa:	f7f1 fc29 	bl	8000250 <__adddf3>
 800e9fe:	e037      	b.n	800ea70 <__ieee754_pow+0x560>
	...
 800ea0c:	3ff00000 	.word	0x3ff00000
 800ea10:	4a454eef 	.word	0x4a454eef
 800ea14:	3fca7e28 	.word	0x3fca7e28
 800ea18:	93c9db65 	.word	0x93c9db65
 800ea1c:	3fcd864a 	.word	0x3fcd864a
 800ea20:	a91d4101 	.word	0xa91d4101
 800ea24:	3fd17460 	.word	0x3fd17460
 800ea28:	518f264d 	.word	0x518f264d
 800ea2c:	3fd55555 	.word	0x3fd55555
 800ea30:	db6fabff 	.word	0xdb6fabff
 800ea34:	3fdb6db6 	.word	0x3fdb6db6
 800ea38:	33333303 	.word	0x33333303
 800ea3c:	3fe33333 	.word	0x3fe33333
 800ea40:	e0000000 	.word	0xe0000000
 800ea44:	3feec709 	.word	0x3feec709
 800ea48:	dc3a03fd 	.word	0xdc3a03fd
 800ea4c:	3feec709 	.word	0x3feec709
 800ea50:	145b01f5 	.word	0x145b01f5
 800ea54:	be3e2fe0 	.word	0xbe3e2fe0
 800ea58:	7ff00000 	.word	0x7ff00000
 800ea5c:	43400000 	.word	0x43400000
 800ea60:	0003988e 	.word	0x0003988e
 800ea64:	000bb679 	.word	0x000bb679
 800ea68:	3ff00000 	.word	0x3ff00000
 800ea6c:	40080000 	.word	0x40080000
 800ea70:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800ea74:	4622      	mov	r2, r4
 800ea76:	4658      	mov	r0, fp
 800ea78:	462b      	mov	r3, r5
 800ea7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea7e:	f7f1 fbe5 	bl	800024c <__aeabi_dsub>
 800ea82:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800ea86:	f7f1 fbe1 	bl	800024c <__aeabi_dsub>
 800ea8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea8e:	f7f1 fbdd 	bl	800024c <__aeabi_dsub>
 800ea92:	4602      	mov	r2, r0
 800ea94:	460b      	mov	r3, r1
 800ea96:	4630      	mov	r0, r6
 800ea98:	4639      	mov	r1, r7
 800ea9a:	f7f1 fbd7 	bl	800024c <__aeabi_dsub>
 800ea9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	e9cd 9a00 	strd	r9, sl, [sp]
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eaae:	4648      	mov	r0, r9
 800eab0:	4632      	mov	r2, r6
 800eab2:	463b      	mov	r3, r7
 800eab4:	4651      	mov	r1, sl
 800eab6:	f7f1 fbc9 	bl	800024c <__aeabi_dsub>
 800eaba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eabe:	f7f1 fd7d 	bl	80005bc <__aeabi_dmul>
 800eac2:	464a      	mov	r2, r9
 800eac4:	4604      	mov	r4, r0
 800eac6:	460d      	mov	r5, r1
 800eac8:	4653      	mov	r3, sl
 800eaca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eace:	f7f1 fd75 	bl	80005bc <__aeabi_dmul>
 800ead2:	4602      	mov	r2, r0
 800ead4:	460b      	mov	r3, r1
 800ead6:	4620      	mov	r0, r4
 800ead8:	4629      	mov	r1, r5
 800eada:	f7f1 fbb9 	bl	8000250 <__adddf3>
 800eade:	4632      	mov	r2, r6
 800eae0:	4604      	mov	r4, r0
 800eae2:	460d      	mov	r5, r1
 800eae4:	463b      	mov	r3, r7
 800eae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaea:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800eaee:	f7f1 fd65 	bl	80005bc <__aeabi_dmul>
 800eaf2:	4606      	mov	r6, r0
 800eaf4:	460f      	mov	r7, r1
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	4629      	mov	r1, r5
 800eafa:	463b      	mov	r3, r7
 800eafc:	4632      	mov	r2, r6
 800eafe:	f7f1 fba7 	bl	8000250 <__adddf3>
 800eb02:	4bd9      	ldr	r3, [pc, #868]	@ (800ee68 <__ieee754_pow+0x958>)
 800eb04:	4299      	cmp	r1, r3
 800eb06:	4604      	mov	r4, r0
 800eb08:	460d      	mov	r5, r1
 800eb0a:	4688      	mov	r8, r1
 800eb0c:	f340 8150 	ble.w	800edb0 <__ieee754_pow+0x8a0>
 800eb10:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800eb14:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800eb18:	4303      	orrs	r3, r0
 800eb1a:	f040 82a8 	bne.w	800f06e <__ieee754_pow+0xb5e>
 800eb1e:	a3be      	add	r3, pc, #760	@ (adr r3, 800ee18 <__ieee754_pow+0x908>)
 800eb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb28:	f7f1 fb92 	bl	8000250 <__adddf3>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	460b      	mov	r3, r1
 800eb30:	4620      	mov	r0, r4
 800eb32:	4629      	mov	r1, r5
 800eb34:	4614      	mov	r4, r2
 800eb36:	461d      	mov	r5, r3
 800eb38:	4632      	mov	r2, r6
 800eb3a:	463b      	mov	r3, r7
 800eb3c:	f7f1 fb86 	bl	800024c <__aeabi_dsub>
 800eb40:	4602      	mov	r2, r0
 800eb42:	460b      	mov	r3, r1
 800eb44:	4620      	mov	r0, r4
 800eb46:	4629      	mov	r1, r5
 800eb48:	f7f1 ffc8 	bl	8000adc <__aeabi_dcmpgt>
 800eb4c:	2800      	cmp	r0, #0
 800eb4e:	f040 828e 	bne.w	800f06e <__ieee754_pow+0xb5e>
 800eb52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eb56:	4443      	add	r3, r8
 800eb58:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800eb5c:	4cc3      	ldr	r4, [pc, #780]	@ (800ee6c <__ieee754_pow+0x95c>)
 800eb5e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800eb62:	4114      	asrs	r4, r2
 800eb64:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800eb68:	f1c2 0214 	rsb	r2, r2, #20
 800eb6c:	2000      	movs	r0, #0
 800eb6e:	ea04 0103 	and.w	r1, r4, r3
 800eb72:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800eb76:	fa4a fa02 	asr.w	sl, sl, r2
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	f1b8 0f00 	cmp.w	r8, #0
 800eb82:	4630      	mov	r0, r6
 800eb84:	4639      	mov	r1, r7
 800eb86:	bfb8      	it	lt
 800eb88:	f1ca 0a00 	rsblt	sl, sl, #0
 800eb8c:	f7f1 fb5e 	bl	800024c <__aeabi_dsub>
 800eb90:	4602      	mov	r2, r0
 800eb92:	460b      	mov	r3, r1
 800eb94:	4606      	mov	r6, r0
 800eb96:	460f      	mov	r7, r1
 800eb98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb9c:	f7f1 fb58 	bl	8000250 <__adddf3>
 800eba0:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 800eba4:	460d      	mov	r5, r1
 800eba6:	2400      	movs	r4, #0
 800eba8:	a39d      	add	r3, pc, #628	@ (adr r3, 800ee20 <__ieee754_pow+0x910>)
 800ebaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebae:	4620      	mov	r0, r4
 800ebb0:	4629      	mov	r1, r5
 800ebb2:	f7f1 fd03 	bl	80005bc <__aeabi_dmul>
 800ebb6:	4632      	mov	r2, r6
 800ebb8:	4680      	mov	r8, r0
 800ebba:	4689      	mov	r9, r1
 800ebbc:	463b      	mov	r3, r7
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	4629      	mov	r1, r5
 800ebc2:	f7f1 fb43 	bl	800024c <__aeabi_dsub>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	460b      	mov	r3, r1
 800ebca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebce:	f7f1 fb3d 	bl	800024c <__aeabi_dsub>
 800ebd2:	a395      	add	r3, pc, #596	@ (adr r3, 800ee28 <__ieee754_pow+0x918>)
 800ebd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd8:	f7f1 fcf0 	bl	80005bc <__aeabi_dmul>
 800ebdc:	4602      	mov	r2, r0
 800ebde:	460b      	mov	r3, r1
 800ebe0:	4620      	mov	r0, r4
 800ebe2:	4629      	mov	r1, r5
 800ebe4:	4614      	mov	r4, r2
 800ebe6:	461d      	mov	r5, r3
 800ebe8:	a391      	add	r3, pc, #580	@ (adr r3, 800ee30 <__ieee754_pow+0x920>)
 800ebea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebee:	f7f1 fce5 	bl	80005bc <__aeabi_dmul>
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	4620      	mov	r0, r4
 800ebf8:	4629      	mov	r1, r5
 800ebfa:	f7f1 fb29 	bl	8000250 <__adddf3>
 800ebfe:	4606      	mov	r6, r0
 800ec00:	460f      	mov	r7, r1
 800ec02:	4632      	mov	r2, r6
 800ec04:	463b      	mov	r3, r7
 800ec06:	4640      	mov	r0, r8
 800ec08:	4649      	mov	r1, r9
 800ec0a:	f7f1 fb21 	bl	8000250 <__adddf3>
 800ec0e:	4642      	mov	r2, r8
 800ec10:	464b      	mov	r3, r9
 800ec12:	4604      	mov	r4, r0
 800ec14:	460d      	mov	r5, r1
 800ec16:	f7f1 fb19 	bl	800024c <__aeabi_dsub>
 800ec1a:	4602      	mov	r2, r0
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	4630      	mov	r0, r6
 800ec20:	4639      	mov	r1, r7
 800ec22:	f7f1 fb13 	bl	800024c <__aeabi_dsub>
 800ec26:	4622      	mov	r2, r4
 800ec28:	4680      	mov	r8, r0
 800ec2a:	4689      	mov	r9, r1
 800ec2c:	462b      	mov	r3, r5
 800ec2e:	4620      	mov	r0, r4
 800ec30:	4629      	mov	r1, r5
 800ec32:	f7f1 fcc3 	bl	80005bc <__aeabi_dmul>
 800ec36:	a380      	add	r3, pc, #512	@ (adr r3, 800ee38 <__ieee754_pow+0x928>)
 800ec38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3c:	4606      	mov	r6, r0
 800ec3e:	460f      	mov	r7, r1
 800ec40:	f7f1 fcbc 	bl	80005bc <__aeabi_dmul>
 800ec44:	a37e      	add	r3, pc, #504	@ (adr r3, 800ee40 <__ieee754_pow+0x930>)
 800ec46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4a:	f7f1 faff 	bl	800024c <__aeabi_dsub>
 800ec4e:	4632      	mov	r2, r6
 800ec50:	463b      	mov	r3, r7
 800ec52:	f7f1 fcb3 	bl	80005bc <__aeabi_dmul>
 800ec56:	a37c      	add	r3, pc, #496	@ (adr r3, 800ee48 <__ieee754_pow+0x938>)
 800ec58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec5c:	f7f1 faf8 	bl	8000250 <__adddf3>
 800ec60:	4632      	mov	r2, r6
 800ec62:	463b      	mov	r3, r7
 800ec64:	f7f1 fcaa 	bl	80005bc <__aeabi_dmul>
 800ec68:	a379      	add	r3, pc, #484	@ (adr r3, 800ee50 <__ieee754_pow+0x940>)
 800ec6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6e:	f7f1 faed 	bl	800024c <__aeabi_dsub>
 800ec72:	4632      	mov	r2, r6
 800ec74:	463b      	mov	r3, r7
 800ec76:	f7f1 fca1 	bl	80005bc <__aeabi_dmul>
 800ec7a:	a377      	add	r3, pc, #476	@ (adr r3, 800ee58 <__ieee754_pow+0x948>)
 800ec7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec80:	f7f1 fae6 	bl	8000250 <__adddf3>
 800ec84:	4632      	mov	r2, r6
 800ec86:	463b      	mov	r3, r7
 800ec88:	f7f1 fc98 	bl	80005bc <__aeabi_dmul>
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	460b      	mov	r3, r1
 800ec90:	4620      	mov	r0, r4
 800ec92:	4629      	mov	r1, r5
 800ec94:	f7f1 fada 	bl	800024c <__aeabi_dsub>
 800ec98:	4606      	mov	r6, r0
 800ec9a:	460f      	mov	r7, r1
 800ec9c:	4632      	mov	r2, r6
 800ec9e:	463b      	mov	r3, r7
 800eca0:	4620      	mov	r0, r4
 800eca2:	4629      	mov	r1, r5
 800eca4:	f7f1 fc8a 	bl	80005bc <__aeabi_dmul>
 800eca8:	4602      	mov	r2, r0
 800ecaa:	460b      	mov	r3, r1
 800ecac:	4630      	mov	r0, r6
 800ecae:	4639      	mov	r1, r7
 800ecb0:	4616      	mov	r6, r2
 800ecb2:	461f      	mov	r7, r3
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ecba:	f7f1 fac7 	bl	800024c <__aeabi_dsub>
 800ecbe:	4602      	mov	r2, r0
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	4630      	mov	r0, r6
 800ecc4:	4639      	mov	r1, r7
 800ecc6:	f7f1 fda3 	bl	8000810 <__aeabi_ddiv>
 800ecca:	4642      	mov	r2, r8
 800eccc:	4606      	mov	r6, r0
 800ecce:	460f      	mov	r7, r1
 800ecd0:	464b      	mov	r3, r9
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	f7f1 fc71 	bl	80005bc <__aeabi_dmul>
 800ecda:	4642      	mov	r2, r8
 800ecdc:	464b      	mov	r3, r9
 800ecde:	f7f1 fab7 	bl	8000250 <__adddf3>
 800ece2:	4602      	mov	r2, r0
 800ece4:	460b      	mov	r3, r1
 800ece6:	4630      	mov	r0, r6
 800ece8:	4639      	mov	r1, r7
 800ecea:	f7f1 faaf 	bl	800024c <__aeabi_dsub>
 800ecee:	4622      	mov	r2, r4
 800ecf0:	462b      	mov	r3, r5
 800ecf2:	f7f1 faab 	bl	800024c <__aeabi_dsub>
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	4602      	mov	r2, r0
 800ecfa:	495d      	ldr	r1, [pc, #372]	@ (800ee70 <__ieee754_pow+0x960>)
 800ecfc:	2000      	movs	r0, #0
 800ecfe:	f7f1 faa5 	bl	800024c <__aeabi_dsub>
 800ed02:	460b      	mov	r3, r1
 800ed04:	445b      	add	r3, fp
 800ed06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ed0a:	f2c0 81a8 	blt.w	800f05e <__ieee754_pow+0xb4e>
 800ed0e:	4619      	mov	r1, r3
 800ed10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ed14:	f7f1 fc52 	bl	80005bc <__aeabi_dmul>
 800ed18:	ec41 0b10 	vmov	d0, r0, r1
 800ed1c:	e414      	b.n	800e548 <__ieee754_pow+0x38>
 800ed1e:	ed9f 7b50 	vldr	d7, [pc, #320]	@ 800ee60 <__ieee754_pow+0x950>
 800ed22:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ed26:	e474      	b.n	800e612 <__ieee754_pow+0x102>
 800ed28:	2f00      	cmp	r7, #0
 800ed2a:	f000 81b8 	beq.w	800f09e <__ieee754_pow+0xb8e>
 800ed2e:	2702      	movs	r7, #2
 800ed30:	e4c1      	b.n	800e6b6 <__ieee754_pow+0x1a6>
 800ed32:	ea4f 522b 	mov.w	r2, fp, asr #20
 800ed36:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ed3a:	2a14      	cmp	r2, #20
 800ed3c:	f340 8136 	ble.w	800efac <__ieee754_pow+0xa9c>
 800ed40:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800ed44:	fa27 f102 	lsr.w	r1, r7, r2
 800ed48:	fa01 f202 	lsl.w	r2, r1, r2
 800ed4c:	42ba      	cmp	r2, r7
 800ed4e:	f000 81ba 	beq.w	800f0c6 <__ieee754_pow+0xbb6>
 800ed52:	b9cf      	cbnz	r7, 800ed88 <__ieee754_pow+0x878>
 800ed54:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800ed58:	9304      	str	r3, [sp, #16]
 800ed5a:	f000 814f 	beq.w	800effc <__ieee754_pow+0xaec>
 800ed5e:	ec45 4b10 	vmov	d0, r4, r5
 800ed62:	f000 fc27 	bl	800f5b4 <fabs>
 800ed66:	9b00      	ldr	r3, [sp, #0]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	f47f acb0 	bne.w	800e6ce <__ieee754_pow+0x1be>
 800ed6e:	4a40      	ldr	r2, [pc, #256]	@ (800ee70 <__ieee754_pow+0x960>)
 800ed70:	f026 4140 	bic.w	r1, r6, #3221225472	@ 0xc0000000
 800ed74:	4291      	cmp	r1, r2
 800ed76:	f000 81cd 	beq.w	800f114 <__ieee754_pow+0xc04>
 800ed7a:	9a02      	ldr	r2, [sp, #8]
 800ed7c:	9b04      	ldr	r3, [sp, #16]
 800ed7e:	2a00      	cmp	r2, #0
 800ed80:	f000 80f7 	beq.w	800ef72 <__ieee754_pow+0xa62>
 800ed84:	2700      	movs	r7, #0
 800ed86:	e437      	b.n	800e5f8 <__ieee754_pow+0xe8>
 800ed88:	ec45 4b10 	vmov	d0, r4, r5
 800ed8c:	9304      	str	r3, [sp, #16]
 800ed8e:	f000 fc11 	bl	800f5b4 <fabs>
 800ed92:	9b00      	ldr	r3, [sp, #0]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	f47f ac9a 	bne.w	800e6ce <__ieee754_pow+0x1be>
 800ed9a:	4a35      	ldr	r2, [pc, #212]	@ (800ee70 <__ieee754_pow+0x960>)
 800ed9c:	f026 4140 	bic.w	r1, r6, #3221225472	@ 0xc0000000
 800eda0:	4291      	cmp	r1, r2
 800eda2:	d1ea      	bne.n	800ed7a <__ieee754_pow+0x86a>
 800eda4:	f1b8 0f00 	cmp.w	r8, #0
 800eda8:	f2c0 81a9 	blt.w	800f0fe <__ieee754_pow+0xbee>
 800edac:	2700      	movs	r7, #0
 800edae:	e46b      	b.n	800e688 <__ieee754_pow+0x178>
 800edb0:	f8df c0c4 	ldr.w	ip, [pc, #196]	@ 800ee78 <__ieee754_pow+0x968>
 800edb4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800edb8:	4563      	cmp	r3, ip
 800edba:	f240 8109 	bls.w	800efd0 <__ieee754_pow+0xac0>
 800edbe:	4b2d      	ldr	r3, [pc, #180]	@ (800ee74 <__ieee754_pow+0x964>)
 800edc0:	440b      	add	r3, r1
 800edc2:	4303      	orrs	r3, r0
 800edc4:	d10a      	bne.n	800eddc <__ieee754_pow+0x8cc>
 800edc6:	4632      	mov	r2, r6
 800edc8:	463b      	mov	r3, r7
 800edca:	f7f1 fa3f 	bl	800024c <__aeabi_dsub>
 800edce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800edd2:	f7f1 fe79 	bl	8000ac8 <__aeabi_dcmpge>
 800edd6:	2800      	cmp	r0, #0
 800edd8:	f43f aebb 	beq.w	800eb52 <__ieee754_pow+0x642>
 800eddc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ede0:	2200      	movs	r2, #0
 800ede2:	2300      	movs	r3, #0
 800ede4:	f7f1 fe5c 	bl	8000aa0 <__aeabi_dcmplt>
 800ede8:	3800      	subs	r0, #0
 800edea:	bf18      	it	ne
 800edec:	2001      	movne	r0, #1
 800edee:	e421      	b.n	800e634 <__ieee754_pow+0x124>
 800edf0:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800edf4:	f000 8102 	beq.w	800effc <__ieee754_pow+0xaec>
 800edf8:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 800edfc:	4590      	cmp	r8, r2
 800edfe:	f47f abf2 	bne.w	800e5e6 <__ieee754_pow+0xd6>
 800ee02:	ec45 4b10 	vmov	d0, r4, r5
 800ee06:	b013      	add	sp, #76	@ 0x4c
 800ee08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee0c:	f7fe beb8 	b.w	800db80 <__ieee754_sqrt>
 800ee10:	2f00      	cmp	r7, #0
 800ee12:	f47f ab91 	bne.w	800e538 <__ieee754_pow+0x28>
 800ee16:	e41c      	b.n	800e652 <__ieee754_pow+0x142>
 800ee18:	652b82fe 	.word	0x652b82fe
 800ee1c:	3c971547 	.word	0x3c971547
 800ee20:	00000000 	.word	0x00000000
 800ee24:	3fe62e43 	.word	0x3fe62e43
 800ee28:	fefa39ef 	.word	0xfefa39ef
 800ee2c:	3fe62e42 	.word	0x3fe62e42
 800ee30:	0ca86c39 	.word	0x0ca86c39
 800ee34:	be205c61 	.word	0xbe205c61
 800ee38:	72bea4d0 	.word	0x72bea4d0
 800ee3c:	3e663769 	.word	0x3e663769
 800ee40:	c5d26bf1 	.word	0xc5d26bf1
 800ee44:	3ebbbd41 	.word	0x3ebbbd41
 800ee48:	af25de2c 	.word	0xaf25de2c
 800ee4c:	3f11566a 	.word	0x3f11566a
 800ee50:	16bebd93 	.word	0x16bebd93
 800ee54:	3f66c16c 	.word	0x3f66c16c
 800ee58:	5555553e 	.word	0x5555553e
 800ee5c:	3fc55555 	.word	0x3fc55555
 800ee60:	00000000 	.word	0x00000000
 800ee64:	bff00000 	.word	0xbff00000
 800ee68:	408fffff 	.word	0x408fffff
 800ee6c:	fff00000 	.word	0xfff00000
 800ee70:	3ff00000 	.word	0x3ff00000
 800ee74:	3f6f3400 	.word	0x3f6f3400
 800ee78:	4090cbff 	.word	0x4090cbff
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	f0c0 8100 	bcc.w	800f082 <__ieee754_pow+0xb72>
 800ee82:	9a02      	ldr	r2, [sp, #8]
 800ee84:	4bbe      	ldr	r3, [pc, #760]	@ (800f180 <__ieee754_pow+0xc70>)
 800ee86:	429a      	cmp	r2, r3
 800ee88:	f04f 0200 	mov.w	r2, #0
 800ee8c:	f200 810e 	bhi.w	800f0ac <__ieee754_pow+0xb9c>
 800ee90:	ec51 0b10 	vmov	r0, r1, d0
 800ee94:	4bba      	ldr	r3, [pc, #744]	@ (800f180 <__ieee754_pow+0xc70>)
 800ee96:	f7f1 f9d9 	bl	800024c <__aeabi_dsub>
 800ee9a:	a3a7      	add	r3, pc, #668	@ (adr r3, 800f138 <__ieee754_pow+0xc28>)
 800ee9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea0:	4604      	mov	r4, r0
 800eea2:	460d      	mov	r5, r1
 800eea4:	f7f1 fb8a 	bl	80005bc <__aeabi_dmul>
 800eea8:	a3a5      	add	r3, pc, #660	@ (adr r3, 800f140 <__ieee754_pow+0xc30>)
 800eeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeae:	4606      	mov	r6, r0
 800eeb0:	460f      	mov	r7, r1
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	4629      	mov	r1, r5
 800eeb6:	f7f1 fb81 	bl	80005bc <__aeabi_dmul>
 800eeba:	4bb2      	ldr	r3, [pc, #712]	@ (800f184 <__ieee754_pow+0xc74>)
 800eebc:	e9cd 0100 	strd	r0, r1, [sp]
 800eec0:	2200      	movs	r2, #0
 800eec2:	4620      	mov	r0, r4
 800eec4:	4629      	mov	r1, r5
 800eec6:	f7f1 fb79 	bl	80005bc <__aeabi_dmul>
 800eeca:	4602      	mov	r2, r0
 800eecc:	460b      	mov	r3, r1
 800eece:	a19e      	add	r1, pc, #632	@ (adr r1, 800f148 <__ieee754_pow+0xc38>)
 800eed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eed4:	f7f1 f9ba 	bl	800024c <__aeabi_dsub>
 800eed8:	4622      	mov	r2, r4
 800eeda:	462b      	mov	r3, r5
 800eedc:	f7f1 fb6e 	bl	80005bc <__aeabi_dmul>
 800eee0:	4602      	mov	r2, r0
 800eee2:	460b      	mov	r3, r1
 800eee4:	2000      	movs	r0, #0
 800eee6:	49a8      	ldr	r1, [pc, #672]	@ (800f188 <__ieee754_pow+0xc78>)
 800eee8:	f7f1 f9b0 	bl	800024c <__aeabi_dsub>
 800eeec:	4622      	mov	r2, r4
 800eeee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eef2:	462b      	mov	r3, r5
 800eef4:	4620      	mov	r0, r4
 800eef6:	4629      	mov	r1, r5
 800eef8:	f7f1 fb60 	bl	80005bc <__aeabi_dmul>
 800eefc:	4602      	mov	r2, r0
 800eefe:	460b      	mov	r3, r1
 800ef00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef04:	f7f1 fb5a 	bl	80005bc <__aeabi_dmul>
 800ef08:	a391      	add	r3, pc, #580	@ (adr r3, 800f150 <__ieee754_pow+0xc40>)
 800ef0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0e:	f7f1 fb55 	bl	80005bc <__aeabi_dmul>
 800ef12:	4602      	mov	r2, r0
 800ef14:	460b      	mov	r3, r1
 800ef16:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef1a:	f7f1 f997 	bl	800024c <__aeabi_dsub>
 800ef1e:	4604      	mov	r4, r0
 800ef20:	460d      	mov	r5, r1
 800ef22:	4622      	mov	r2, r4
 800ef24:	462b      	mov	r3, r5
 800ef26:	4630      	mov	r0, r6
 800ef28:	4639      	mov	r1, r7
 800ef2a:	f7f1 f991 	bl	8000250 <__adddf3>
 800ef2e:	2000      	movs	r0, #0
 800ef30:	4632      	mov	r2, r6
 800ef32:	463b      	mov	r3, r7
 800ef34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef38:	f7f1 f988 	bl	800024c <__aeabi_dsub>
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	460b      	mov	r3, r1
 800ef40:	4620      	mov	r0, r4
 800ef42:	4629      	mov	r1, r5
 800ef44:	f7f1 f982 	bl	800024c <__aeabi_dsub>
 800ef48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ef4c:	e5a9      	b.n	800eaa2 <__ieee754_pow+0x592>
 800ef4e:	ed9f 7b82 	vldr	d7, [pc, #520]	@ 800f158 <__ieee754_pow+0xc48>
 800ef52:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ef56:	ed9f 7b82 	vldr	d7, [pc, #520]	@ 800f160 <__ieee754_pow+0xc50>
 800ef5a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ef5e:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 800ef62:	2500      	movs	r5, #0
 800ef64:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 800ef68:	f7ff bbfb 	b.w	800e762 <__ieee754_pow+0x252>
 800ef6c:	2100      	movs	r1, #0
 800ef6e:	f7ff bbd4 	b.w	800e71a <__ieee754_pow+0x20a>
 800ef72:	f1b8 0f00 	cmp.w	r8, #0
 800ef76:	f6bf af19 	bge.w	800edac <__ieee754_pow+0x89c>
 800ef7a:	2700      	movs	r7, #0
 800ef7c:	ec53 2b10 	vmov	r2, r3, d0
 800ef80:	497f      	ldr	r1, [pc, #508]	@ (800f180 <__ieee754_pow+0xc70>)
 800ef82:	2000      	movs	r0, #0
 800ef84:	f7f1 fc44 	bl	8000810 <__aeabi_ddiv>
 800ef88:	ec41 0b10 	vmov	d0, r0, r1
 800ef8c:	f7ff bb79 	b.w	800e682 <__ieee754_pow+0x172>
 800ef90:	f1b8 0f00 	cmp.w	r8, #0
 800ef94:	ed9f 0b70 	vldr	d0, [pc, #448]	@ 800f158 <__ieee754_pow+0xc48>
 800ef98:	f6bf aad6 	bge.w	800e548 <__ieee754_pow+0x38>
 800ef9c:	f10a 4300 	add.w	r3, sl, #2147483648	@ 0x80000000
 800efa0:	ee00 9a10 	vmov	s0, r9
 800efa4:	ee00 3a90 	vmov	s1, r3
 800efa8:	f7ff bace 	b.w	800e548 <__ieee754_pow+0x38>
 800efac:	2f00      	cmp	r7, #0
 800efae:	f47f aeeb 	bne.w	800ed88 <__ieee754_pow+0x878>
 800efb2:	f1c2 0214 	rsb	r2, r2, #20
 800efb6:	fa4b f102 	asr.w	r1, fp, r2
 800efba:	fa01 f202 	lsl.w	r2, r1, r2
 800efbe:	455a      	cmp	r2, fp
 800efc0:	4a6f      	ldr	r2, [pc, #444]	@ (800f180 <__ieee754_pow+0xc70>)
 800efc2:	f000 8088 	beq.w	800f0d6 <__ieee754_pow+0xbc6>
 800efc6:	4593      	cmp	fp, r2
 800efc8:	f43f aaef 	beq.w	800e5aa <__ieee754_pow+0x9a>
 800efcc:	f7ff bb07 	b.w	800e5de <__ieee754_pow+0xce>
 800efd0:	4a6d      	ldr	r2, [pc, #436]	@ (800f188 <__ieee754_pow+0xc78>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	f200 808b 	bhi.w	800f0ee <__ieee754_pow+0xbde>
 800efd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efdc:	4693      	mov	fp, r2
 800efde:	4692      	mov	sl, r2
 800efe0:	e5e1      	b.n	800eba6 <__ieee754_pow+0x696>
 800efe2:	4967      	ldr	r1, [pc, #412]	@ (800f180 <__ieee754_pow+0xc70>)
 800efe4:	2000      	movs	r0, #0
 800efe6:	4622      	mov	r2, r4
 800efe8:	462b      	mov	r3, r5
 800efea:	f7f1 fc11 	bl	8000810 <__aeabi_ddiv>
 800efee:	ec41 0b10 	vmov	d0, r0, r1
 800eff2:	f7ff baa9 	b.w	800e548 <__ieee754_pow+0x38>
 800eff6:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800effa:	d150      	bne.n	800f09e <__ieee754_pow+0xb8e>
 800effc:	4622      	mov	r2, r4
 800effe:	462b      	mov	r3, r5
 800f000:	4620      	mov	r0, r4
 800f002:	4629      	mov	r1, r5
 800f004:	f7f1 fada 	bl	80005bc <__aeabi_dmul>
 800f008:	ec41 0b10 	vmov	d0, r0, r1
 800f00c:	f7ff ba9c 	b.w	800e548 <__ieee754_pow+0x38>
 800f010:	2f01      	cmp	r7, #1
 800f012:	f47f aa99 	bne.w	800e548 <__ieee754_pow+0x38>
 800f016:	ee10 1a90 	vmov	r1, s1
 800f01a:	ee10 2a10 	vmov	r2, s0
 800f01e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f022:	ec43 2b10 	vmov	d0, r2, r3
 800f026:	f7ff ba8f 	b.w	800e548 <__ieee754_pow+0x38>
 800f02a:	ed9f 7b4f 	vldr	d7, [pc, #316]	@ 800f168 <__ieee754_pow+0xc58>
 800f02e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f032:	ed9f 7b4f 	vldr	d7, [pc, #316]	@ 800f170 <__ieee754_pow+0xc60>
 800f036:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 800f03a:	ed9f 7b4f 	vldr	d7, [pc, #316]	@ 800f178 <__ieee754_pow+0xc68>
 800f03e:	f44f 2580 	mov.w	r5, #262144	@ 0x40000
 800f042:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f046:	f7ff bb8c 	b.w	800e762 <__ieee754_pow+0x252>
 800f04a:	f1b8 0f00 	cmp.w	r8, #0
 800f04e:	f77f aaf0 	ble.w	800e632 <__ieee754_pow+0x122>
 800f052:	2000      	movs	r0, #0
 800f054:	b013      	add	sp, #76	@ 0x4c
 800f056:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f05a:	f000 bb75 	b.w	800f748 <__math_oflow>
 800f05e:	ec41 0b10 	vmov	d0, r0, r1
 800f062:	4650      	mov	r0, sl
 800f064:	f000 fab0 	bl	800f5c8 <scalbn>
 800f068:	ec51 0b10 	vmov	r0, r1, d0
 800f06c:	e650      	b.n	800ed10 <__ieee754_pow+0x800>
 800f06e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f072:	2200      	movs	r2, #0
 800f074:	2300      	movs	r3, #0
 800f076:	f7f1 fd13 	bl	8000aa0 <__aeabi_dcmplt>
 800f07a:	3800      	subs	r0, #0
 800f07c:	bf18      	it	ne
 800f07e:	2001      	movne	r0, #1
 800f080:	e7e8      	b.n	800f054 <__ieee754_pow+0xb44>
 800f082:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f086:	2200      	movs	r2, #0
 800f088:	2300      	movs	r3, #0
 800f08a:	f7f1 fd09 	bl	8000aa0 <__aeabi_dcmplt>
 800f08e:	3800      	subs	r0, #0
 800f090:	bf18      	it	ne
 800f092:	2001      	movne	r0, #1
 800f094:	f1b8 0f00 	cmp.w	r8, #0
 800f098:	f6bf aacc 	bge.w	800e634 <__ieee754_pow+0x124>
 800f09c:	e7da      	b.n	800f054 <__ieee754_pow+0xb44>
 800f09e:	2702      	movs	r7, #2
 800f0a0:	f7ff baa1 	b.w	800e5e6 <__ieee754_pow+0xd6>
 800f0a4:	ed9f 0b2c 	vldr	d0, [pc, #176]	@ 800f158 <__ieee754_pow+0xc48>
 800f0a8:	f7ff ba4e 	b.w	800e548 <__ieee754_pow+0x38>
 800f0ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	f7f1 fcf5 	bl	8000aa0 <__aeabi_dcmplt>
 800f0b6:	3800      	subs	r0, #0
 800f0b8:	bf18      	it	ne
 800f0ba:	2001      	movne	r0, #1
 800f0bc:	f1b8 0f00 	cmp.w	r8, #0
 800f0c0:	dcc8      	bgt.n	800f054 <__ieee754_pow+0xb44>
 800f0c2:	f7ff bab7 	b.w	800e634 <__ieee754_pow+0x124>
 800f0c6:	2f00      	cmp	r7, #0
 800f0c8:	d095      	beq.n	800eff6 <__ieee754_pow+0xae6>
 800f0ca:	f001 0101 	and.w	r1, r1, #1
 800f0ce:	f1c1 0702 	rsb	r7, r1, #2
 800f0d2:	f7ff baf0 	b.w	800e6b6 <__ieee754_pow+0x1a6>
 800f0d6:	4593      	cmp	fp, r2
 800f0d8:	f43f aa67 	beq.w	800e5aa <__ieee754_pow+0x9a>
 800f0dc:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800f0e0:	d08c      	beq.n	800effc <__ieee754_pow+0xaec>
 800f0e2:	f001 0101 	and.w	r1, r1, #1
 800f0e6:	f1c1 0702 	rsb	r7, r1, #2
 800f0ea:	f7ff ba7c 	b.w	800e5e6 <__ieee754_pow+0xd6>
 800f0ee:	151b      	asrs	r3, r3, #20
 800f0f0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800f0f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f0f8:	fa42 f303 	asr.w	r3, r2, r3
 800f0fc:	e52b      	b.n	800eb56 <__ieee754_pow+0x646>
 800f0fe:	ec53 2b10 	vmov	r2, r3, d0
 800f102:	491f      	ldr	r1, [pc, #124]	@ (800f180 <__ieee754_pow+0xc70>)
 800f104:	2000      	movs	r0, #0
 800f106:	f7f1 fb83 	bl	8000810 <__aeabi_ddiv>
 800f10a:	9f00      	ldr	r7, [sp, #0]
 800f10c:	ec41 0b10 	vmov	d0, r0, r1
 800f110:	f7ff baba 	b.w	800e688 <__ieee754_pow+0x178>
 800f114:	f1b8 0f00 	cmp.w	r8, #0
 800f118:	f6bf ae48 	bge.w	800edac <__ieee754_pow+0x89c>
 800f11c:	ec53 2b10 	vmov	r2, r3, d0
 800f120:	4917      	ldr	r1, [pc, #92]	@ (800f180 <__ieee754_pow+0xc70>)
 800f122:	2000      	movs	r0, #0
 800f124:	f7f1 fb74 	bl	8000810 <__aeabi_ddiv>
 800f128:	2700      	movs	r7, #0
 800f12a:	ec41 0b10 	vmov	d0, r0, r1
 800f12e:	f7ff baab 	b.w	800e688 <__ieee754_pow+0x178>
 800f132:	bf00      	nop
 800f134:	f3af 8000 	nop.w
 800f138:	60000000 	.word	0x60000000
 800f13c:	3ff71547 	.word	0x3ff71547
 800f140:	f85ddf44 	.word	0xf85ddf44
 800f144:	3e54ae0b 	.word	0x3e54ae0b
 800f148:	55555555 	.word	0x55555555
 800f14c:	3fd55555 	.word	0x3fd55555
 800f150:	652b82fe 	.word	0x652b82fe
 800f154:	3ff71547 	.word	0x3ff71547
	...
 800f164:	3ff00000 	.word	0x3ff00000
 800f168:	40000000 	.word	0x40000000
 800f16c:	3fe2b803 	.word	0x3fe2b803
 800f170:	43cfd006 	.word	0x43cfd006
 800f174:	3e4cfdeb 	.word	0x3e4cfdeb
 800f178:	00000000 	.word	0x00000000
 800f17c:	3ff80000 	.word	0x3ff80000
 800f180:	3ff00000 	.word	0x3ff00000
 800f184:	3fd00000 	.word	0x3fd00000
 800f188:	3fe00000 	.word	0x3fe00000
 800f18c:	00000000 	.word	0x00000000

0800f190 <__ieee754_rem_pio2>:
 800f190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f194:	ec53 2b10 	vmov	r2, r3, d0
 800f198:	4999      	ldr	r1, [pc, #612]	@ (800f400 <__ieee754_rem_pio2+0x270>)
 800f19a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800f19e:	428d      	cmp	r5, r1
 800f1a0:	b08f      	sub	sp, #60	@ 0x3c
 800f1a2:	4604      	mov	r4, r0
 800f1a4:	f240 808e 	bls.w	800f2c4 <__ieee754_rem_pio2+0x134>
 800f1a8:	4996      	ldr	r1, [pc, #600]	@ (800f404 <__ieee754_rem_pio2+0x274>)
 800f1aa:	428d      	cmp	r5, r1
 800f1ac:	461f      	mov	r7, r3
 800f1ae:	d82a      	bhi.n	800f206 <__ieee754_rem_pio2+0x76>
 800f1b0:	2f00      	cmp	r7, #0
 800f1b2:	4610      	mov	r0, r2
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	a388      	add	r3, pc, #544	@ (adr r3, 800f3d8 <__ieee754_rem_pio2+0x248>)
 800f1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1bc:	f340 81a7 	ble.w	800f50e <__ieee754_rem_pio2+0x37e>
 800f1c0:	f7f1 f844 	bl	800024c <__aeabi_dsub>
 800f1c4:	4b90      	ldr	r3, [pc, #576]	@ (800f408 <__ieee754_rem_pio2+0x278>)
 800f1c6:	429d      	cmp	r5, r3
 800f1c8:	4606      	mov	r6, r0
 800f1ca:	460f      	mov	r7, r1
 800f1cc:	f000 808e 	beq.w	800f2ec <__ieee754_rem_pio2+0x15c>
 800f1d0:	a383      	add	r3, pc, #524	@ (adr r3, 800f3e0 <__ieee754_rem_pio2+0x250>)
 800f1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d6:	f7f1 f839 	bl	800024c <__aeabi_dsub>
 800f1da:	4680      	mov	r8, r0
 800f1dc:	4689      	mov	r9, r1
 800f1de:	4642      	mov	r2, r8
 800f1e0:	464b      	mov	r3, r9
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	4639      	mov	r1, r7
 800f1e6:	f7f1 f831 	bl	800024c <__aeabi_dsub>
 800f1ea:	a37d      	add	r3, pc, #500	@ (adr r3, 800f3e0 <__ieee754_rem_pio2+0x250>)
 800f1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f0:	f7f1 f82c 	bl	800024c <__aeabi_dsub>
 800f1f4:	e9c4 8900 	strd	r8, r9, [r4]
 800f1f8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f1fc:	2601      	movs	r6, #1
 800f1fe:	4630      	mov	r0, r6
 800f200:	b00f      	add	sp, #60	@ 0x3c
 800f202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f206:	4981      	ldr	r1, [pc, #516]	@ (800f40c <__ieee754_rem_pio2+0x27c>)
 800f208:	428d      	cmp	r5, r1
 800f20a:	f240 8089 	bls.w	800f320 <__ieee754_rem_pio2+0x190>
 800f20e:	4980      	ldr	r1, [pc, #512]	@ (800f410 <__ieee754_rem_pio2+0x280>)
 800f210:	428d      	cmp	r5, r1
 800f212:	d862      	bhi.n	800f2da <__ieee754_rem_pio2+0x14a>
 800f214:	152e      	asrs	r6, r5, #20
 800f216:	f2a6 4616 	subw	r6, r6, #1046	@ 0x416
 800f21a:	eba5 5906 	sub.w	r9, r5, r6, lsl #20
 800f21e:	4610      	mov	r0, r2
 800f220:	4649      	mov	r1, r9
 800f222:	4690      	mov	r8, r2
 800f224:	f7f1 fc7a 	bl	8000b1c <__aeabi_d2iz>
 800f228:	f7f1 f95e 	bl	80004e8 <__aeabi_i2d>
 800f22c:	4602      	mov	r2, r0
 800f22e:	460b      	mov	r3, r1
 800f230:	4640      	mov	r0, r8
 800f232:	4649      	mov	r1, r9
 800f234:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f238:	f7f1 f808 	bl	800024c <__aeabi_dsub>
 800f23c:	4b75      	ldr	r3, [pc, #468]	@ (800f414 <__ieee754_rem_pio2+0x284>)
 800f23e:	2200      	movs	r2, #0
 800f240:	f7f1 f9bc 	bl	80005bc <__aeabi_dmul>
 800f244:	4689      	mov	r9, r1
 800f246:	4680      	mov	r8, r0
 800f248:	f7f1 fc68 	bl	8000b1c <__aeabi_d2iz>
 800f24c:	f7f1 f94c 	bl	80004e8 <__aeabi_i2d>
 800f250:	4602      	mov	r2, r0
 800f252:	460b      	mov	r3, r1
 800f254:	4640      	mov	r0, r8
 800f256:	4649      	mov	r1, r9
 800f258:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800f25c:	f7f0 fff6 	bl	800024c <__aeabi_dsub>
 800f260:	4b6c      	ldr	r3, [pc, #432]	@ (800f414 <__ieee754_rem_pio2+0x284>)
 800f262:	2200      	movs	r2, #0
 800f264:	f7f1 f9aa 	bl	80005bc <__aeabi_dmul>
 800f268:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800f26c:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800f270:	2503      	movs	r5, #3
 800f272:	f04f 0800 	mov.w	r8, #0
 800f276:	f04f 0900 	mov.w	r9, #0
 800f27a:	e97a 0102 	ldrd	r0, r1, [sl, #-8]!
 800f27e:	4642      	mov	r2, r8
 800f280:	464b      	mov	r3, r9
 800f282:	46ab      	mov	fp, r5
 800f284:	3d01      	subs	r5, #1
 800f286:	f7f1 fc01 	bl	8000a8c <__aeabi_dcmpeq>
 800f28a:	2800      	cmp	r0, #0
 800f28c:	d1f5      	bne.n	800f27a <__ieee754_rem_pio2+0xea>
 800f28e:	4b62      	ldr	r3, [pc, #392]	@ (800f418 <__ieee754_rem_pio2+0x288>)
 800f290:	9301      	str	r3, [sp, #4]
 800f292:	2302      	movs	r3, #2
 800f294:	9300      	str	r3, [sp, #0]
 800f296:	4632      	mov	r2, r6
 800f298:	465b      	mov	r3, fp
 800f29a:	4621      	mov	r1, r4
 800f29c:	a808      	add	r0, sp, #32
 800f29e:	f000 fa5b 	bl	800f758 <__kernel_rem_pio2>
 800f2a2:	2f00      	cmp	r7, #0
 800f2a4:	4606      	mov	r6, r0
 800f2a6:	daaa      	bge.n	800f1fe <__ieee754_rem_pio2+0x6e>
 800f2a8:	6861      	ldr	r1, [r4, #4]
 800f2aa:	6822      	ldr	r2, [r4, #0]
 800f2ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f2b0:	68e1      	ldr	r1, [r4, #12]
 800f2b2:	e9c4 2300 	strd	r2, r3, [r4]
 800f2b6:	68a2      	ldr	r2, [r4, #8]
 800f2b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f2bc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f2c0:	4246      	negs	r6, r0
 800f2c2:	e79c      	b.n	800f1fe <__ieee754_rem_pio2+0x6e>
 800f2c4:	2000      	movs	r0, #0
 800f2c6:	2100      	movs	r1, #0
 800f2c8:	ed84 0b00 	vstr	d0, [r4]
 800f2cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f2d0:	2600      	movs	r6, #0
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	b00f      	add	sp, #60	@ 0x3c
 800f2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2da:	4610      	mov	r0, r2
 800f2dc:	4619      	mov	r1, r3
 800f2de:	f7f0 ffb5 	bl	800024c <__aeabi_dsub>
 800f2e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f2e6:	e9c4 0100 	strd	r0, r1, [r4]
 800f2ea:	e7f1      	b.n	800f2d0 <__ieee754_rem_pio2+0x140>
 800f2ec:	a33e      	add	r3, pc, #248	@ (adr r3, 800f3e8 <__ieee754_rem_pio2+0x258>)
 800f2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f2:	f7f0 ffab 	bl	800024c <__aeabi_dsub>
 800f2f6:	a33e      	add	r3, pc, #248	@ (adr r3, 800f3f0 <__ieee754_rem_pio2+0x260>)
 800f2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2fc:	4606      	mov	r6, r0
 800f2fe:	460f      	mov	r7, r1
 800f300:	f7f0 ffa4 	bl	800024c <__aeabi_dsub>
 800f304:	4680      	mov	r8, r0
 800f306:	4689      	mov	r9, r1
 800f308:	4642      	mov	r2, r8
 800f30a:	464b      	mov	r3, r9
 800f30c:	4630      	mov	r0, r6
 800f30e:	4639      	mov	r1, r7
 800f310:	f7f0 ff9c 	bl	800024c <__aeabi_dsub>
 800f314:	a336      	add	r3, pc, #216	@ (adr r3, 800f3f0 <__ieee754_rem_pio2+0x260>)
 800f316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f31a:	f7f0 ff97 	bl	800024c <__aeabi_dsub>
 800f31e:	e769      	b.n	800f1f4 <__ieee754_rem_pio2+0x64>
 800f320:	f000 f948 	bl	800f5b4 <fabs>
 800f324:	ec59 8b10 	vmov	r8, r9, d0
 800f328:	a333      	add	r3, pc, #204	@ (adr r3, 800f3f8 <__ieee754_rem_pio2+0x268>)
 800f32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32e:	4640      	mov	r0, r8
 800f330:	4649      	mov	r1, r9
 800f332:	f7f1 f943 	bl	80005bc <__aeabi_dmul>
 800f336:	4b39      	ldr	r3, [pc, #228]	@ (800f41c <__ieee754_rem_pio2+0x28c>)
 800f338:	2200      	movs	r2, #0
 800f33a:	f7f0 ff89 	bl	8000250 <__adddf3>
 800f33e:	f7f1 fbed 	bl	8000b1c <__aeabi_d2iz>
 800f342:	4606      	mov	r6, r0
 800f344:	f7f1 f8d0 	bl	80004e8 <__aeabi_i2d>
 800f348:	4602      	mov	r2, r0
 800f34a:	460b      	mov	r3, r1
 800f34c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f350:	a321      	add	r3, pc, #132	@ (adr r3, 800f3d8 <__ieee754_rem_pio2+0x248>)
 800f352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f356:	f7f1 f931 	bl	80005bc <__aeabi_dmul>
 800f35a:	4602      	mov	r2, r0
 800f35c:	460b      	mov	r3, r1
 800f35e:	4640      	mov	r0, r8
 800f360:	4649      	mov	r1, r9
 800f362:	f7f0 ff73 	bl	800024c <__aeabi_dsub>
 800f366:	a31e      	add	r3, pc, #120	@ (adr r3, 800f3e0 <__ieee754_rem_pio2+0x250>)
 800f368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f36c:	4682      	mov	sl, r0
 800f36e:	468b      	mov	fp, r1
 800f370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f374:	f7f1 f922 	bl	80005bc <__aeabi_dmul>
 800f378:	4602      	mov	r2, r0
 800f37a:	460b      	mov	r3, r1
 800f37c:	4650      	mov	r0, sl
 800f37e:	4659      	mov	r1, fp
 800f380:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f384:	f7f0 ff62 	bl	800024c <__aeabi_dsub>
 800f388:	2e1f      	cmp	r6, #31
 800f38a:	4680      	mov	r8, r0
 800f38c:	4689      	mov	r9, r1
 800f38e:	dc49      	bgt.n	800f424 <__ieee754_rem_pio2+0x294>
 800f390:	4b23      	ldr	r3, [pc, #140]	@ (800f420 <__ieee754_rem_pio2+0x290>)
 800f392:	1e72      	subs	r2, r6, #1
 800f394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f398:	42ab      	cmp	r3, r5
 800f39a:	d043      	beq.n	800f424 <__ieee754_rem_pio2+0x294>
 800f39c:	4642      	mov	r2, r8
 800f39e:	464b      	mov	r3, r9
 800f3a0:	e9c4 8900 	strd	r8, r9, [r4]
 800f3a4:	4650      	mov	r0, sl
 800f3a6:	4659      	mov	r1, fp
 800f3a8:	f7f0 ff50 	bl	800024c <__aeabi_dsub>
 800f3ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3b0:	f7f0 ff4c 	bl	800024c <__aeabi_dsub>
 800f3b4:	2f00      	cmp	r7, #0
 800f3b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f3ba:	f6bf af20 	bge.w	800f1fe <__ieee754_rem_pio2+0x6e>
 800f3be:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800f3c2:	e9c4 8300 	strd	r8, r3, [r4]
 800f3c6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f3ca:	e9c4 0302 	strd	r0, r3, [r4, #8]
 800f3ce:	4276      	negs	r6, r6
 800f3d0:	e715      	b.n	800f1fe <__ieee754_rem_pio2+0x6e>
 800f3d2:	bf00      	nop
 800f3d4:	f3af 8000 	nop.w
 800f3d8:	54400000 	.word	0x54400000
 800f3dc:	3ff921fb 	.word	0x3ff921fb
 800f3e0:	1a626331 	.word	0x1a626331
 800f3e4:	3dd0b461 	.word	0x3dd0b461
 800f3e8:	1a600000 	.word	0x1a600000
 800f3ec:	3dd0b461 	.word	0x3dd0b461
 800f3f0:	2e037073 	.word	0x2e037073
 800f3f4:	3ba3198a 	.word	0x3ba3198a
 800f3f8:	6dc9c883 	.word	0x6dc9c883
 800f3fc:	3fe45f30 	.word	0x3fe45f30
 800f400:	3fe921fb 	.word	0x3fe921fb
 800f404:	4002d97b 	.word	0x4002d97b
 800f408:	3ff921fb 	.word	0x3ff921fb
 800f40c:	413921fb 	.word	0x413921fb
 800f410:	7fefffff 	.word	0x7fefffff
 800f414:	41700000 	.word	0x41700000
 800f418:	080117f8 	.word	0x080117f8
 800f41c:	3fe00000 	.word	0x3fe00000
 800f420:	08011778 	.word	0x08011778
 800f424:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800f428:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
 800f42c:	2b10      	cmp	r3, #16
 800f42e:	ea4f 5525 	mov.w	r5, r5, asr #20
 800f432:	ddb3      	ble.n	800f39c <__ieee754_rem_pio2+0x20c>
 800f434:	a356      	add	r3, pc, #344	@ (adr r3, 800f590 <__ieee754_rem_pio2+0x400>)
 800f436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f43e:	f7f1 f8bd 	bl	80005bc <__aeabi_dmul>
 800f442:	4680      	mov	r8, r0
 800f444:	4689      	mov	r9, r1
 800f446:	4642      	mov	r2, r8
 800f448:	464b      	mov	r3, r9
 800f44a:	4650      	mov	r0, sl
 800f44c:	4659      	mov	r1, fp
 800f44e:	f7f0 fefd 	bl	800024c <__aeabi_dsub>
 800f452:	4602      	mov	r2, r0
 800f454:	460b      	mov	r3, r1
 800f456:	4650      	mov	r0, sl
 800f458:	4659      	mov	r1, fp
 800f45a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f45e:	4692      	mov	sl, r2
 800f460:	469b      	mov	fp, r3
 800f462:	f7f0 fef3 	bl	800024c <__aeabi_dsub>
 800f466:	4642      	mov	r2, r8
 800f468:	464b      	mov	r3, r9
 800f46a:	f7f0 feef 	bl	800024c <__aeabi_dsub>
 800f46e:	a34a      	add	r3, pc, #296	@ (adr r3, 800f598 <__ieee754_rem_pio2+0x408>)
 800f470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f474:	4680      	mov	r8, r0
 800f476:	4689      	mov	r9, r1
 800f478:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f47c:	f7f1 f89e 	bl	80005bc <__aeabi_dmul>
 800f480:	4642      	mov	r2, r8
 800f482:	464b      	mov	r3, r9
 800f484:	f7f0 fee2 	bl	800024c <__aeabi_dsub>
 800f488:	460b      	mov	r3, r1
 800f48a:	4602      	mov	r2, r0
 800f48c:	4659      	mov	r1, fp
 800f48e:	4650      	mov	r0, sl
 800f490:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f494:	f7f0 feda 	bl	800024c <__aeabi_dsub>
 800f498:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f49c:	1aed      	subs	r5, r5, r3
 800f49e:	2d31      	cmp	r5, #49	@ 0x31
 800f4a0:	4680      	mov	r8, r0
 800f4a2:	4689      	mov	r9, r1
 800f4a4:	f77f af7a 	ble.w	800f39c <__ieee754_rem_pio2+0x20c>
 800f4a8:	a33e      	add	r3, pc, #248	@ (adr r3, 800f5a4 <__ieee754_rem_pio2+0x414>)
 800f4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4b2:	f7f1 f883 	bl	80005bc <__aeabi_dmul>
 800f4b6:	4680      	mov	r8, r0
 800f4b8:	4689      	mov	r9, r1
 800f4ba:	4642      	mov	r2, r8
 800f4bc:	464b      	mov	r3, r9
 800f4be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4c2:	f7f0 fec3 	bl	800024c <__aeabi_dsub>
 800f4c6:	4682      	mov	sl, r0
 800f4c8:	468b      	mov	fp, r1
 800f4ca:	4652      	mov	r2, sl
 800f4cc:	465b      	mov	r3, fp
 800f4ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4d2:	f7f0 febb 	bl	800024c <__aeabi_dsub>
 800f4d6:	4642      	mov	r2, r8
 800f4d8:	464b      	mov	r3, r9
 800f4da:	f7f0 feb7 	bl	800024c <__aeabi_dsub>
 800f4de:	a333      	add	r3, pc, #204	@ (adr r3, 800f5ac <__ieee754_rem_pio2+0x41c>)
 800f4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e4:	4680      	mov	r8, r0
 800f4e6:	4689      	mov	r9, r1
 800f4e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4ec:	f7f1 f866 	bl	80005bc <__aeabi_dmul>
 800f4f0:	4642      	mov	r2, r8
 800f4f2:	464b      	mov	r3, r9
 800f4f4:	f7f0 feaa 	bl	800024c <__aeabi_dsub>
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	460b      	mov	r3, r1
 800f4fc:	4650      	mov	r0, sl
 800f4fe:	4659      	mov	r1, fp
 800f500:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f504:	f7f0 fea2 	bl	800024c <__aeabi_dsub>
 800f508:	4680      	mov	r8, r0
 800f50a:	4689      	mov	r9, r1
 800f50c:	e746      	b.n	800f39c <__ieee754_rem_pio2+0x20c>
 800f50e:	f7f0 fe9f 	bl	8000250 <__adddf3>
 800f512:	4b23      	ldr	r3, [pc, #140]	@ (800f5a0 <__ieee754_rem_pio2+0x410>)
 800f514:	429d      	cmp	r5, r3
 800f516:	4606      	mov	r6, r0
 800f518:	460f      	mov	r7, r1
 800f51a:	d018      	beq.n	800f54e <__ieee754_rem_pio2+0x3be>
 800f51c:	a31a      	add	r3, pc, #104	@ (adr r3, 800f588 <__ieee754_rem_pio2+0x3f8>)
 800f51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f522:	f7f0 fe95 	bl	8000250 <__adddf3>
 800f526:	4680      	mov	r8, r0
 800f528:	4689      	mov	r9, r1
 800f52a:	4642      	mov	r2, r8
 800f52c:	464b      	mov	r3, r9
 800f52e:	4630      	mov	r0, r6
 800f530:	4639      	mov	r1, r7
 800f532:	f7f0 fe8b 	bl	800024c <__aeabi_dsub>
 800f536:	a314      	add	r3, pc, #80	@ (adr r3, 800f588 <__ieee754_rem_pio2+0x3f8>)
 800f538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53c:	f7f0 fe88 	bl	8000250 <__adddf3>
 800f540:	e9c4 8900 	strd	r8, r9, [r4]
 800f544:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f548:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800f54c:	e657      	b.n	800f1fe <__ieee754_rem_pio2+0x6e>
 800f54e:	a310      	add	r3, pc, #64	@ (adr r3, 800f590 <__ieee754_rem_pio2+0x400>)
 800f550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f554:	f7f0 fe7c 	bl	8000250 <__adddf3>
 800f558:	a30f      	add	r3, pc, #60	@ (adr r3, 800f598 <__ieee754_rem_pio2+0x408>)
 800f55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55e:	4606      	mov	r6, r0
 800f560:	460f      	mov	r7, r1
 800f562:	f7f0 fe75 	bl	8000250 <__adddf3>
 800f566:	4680      	mov	r8, r0
 800f568:	4689      	mov	r9, r1
 800f56a:	4642      	mov	r2, r8
 800f56c:	464b      	mov	r3, r9
 800f56e:	4630      	mov	r0, r6
 800f570:	4639      	mov	r1, r7
 800f572:	f7f0 fe6b 	bl	800024c <__aeabi_dsub>
 800f576:	a308      	add	r3, pc, #32	@ (adr r3, 800f598 <__ieee754_rem_pio2+0x408>)
 800f578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57c:	f7f0 fe68 	bl	8000250 <__adddf3>
 800f580:	e7de      	b.n	800f540 <__ieee754_rem_pio2+0x3b0>
 800f582:	bf00      	nop
 800f584:	f3af 8000 	nop.w
 800f588:	1a626331 	.word	0x1a626331
 800f58c:	3dd0b461 	.word	0x3dd0b461
 800f590:	1a600000 	.word	0x1a600000
 800f594:	3dd0b461 	.word	0x3dd0b461
 800f598:	2e037073 	.word	0x2e037073
 800f59c:	3ba3198a 	.word	0x3ba3198a
 800f5a0:	3ff921fb 	.word	0x3ff921fb
 800f5a4:	2e000000 	.word	0x2e000000
 800f5a8:	3ba3198a 	.word	0x3ba3198a
 800f5ac:	252049c1 	.word	0x252049c1
 800f5b0:	397b839a 	.word	0x397b839a

0800f5b4 <fabs>:
 800f5b4:	ec51 0b10 	vmov	r0, r1, d0
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f5be:	ec43 2b10 	vmov	d0, r2, r3
 800f5c2:	4770      	bx	lr
 800f5c4:	0000      	movs	r0, r0
	...

0800f5c8 <scalbn>:
 800f5c8:	b570      	push	{r4, r5, r6, lr}
 800f5ca:	ec55 4b10 	vmov	r4, r5, d0
 800f5ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f5d2:	4606      	mov	r6, r0
 800f5d4:	462b      	mov	r3, r5
 800f5d6:	bb72      	cbnz	r2, 800f636 <scalbn+0x6e>
 800f5d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f5dc:	4323      	orrs	r3, r4
 800f5de:	d029      	beq.n	800f634 <scalbn+0x6c>
 800f5e0:	4b3b      	ldr	r3, [pc, #236]	@ (800f6d0 <scalbn+0x108>)
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	4629      	mov	r1, r5
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	f7f0 ffe8 	bl	80005bc <__aeabi_dmul>
 800f5ec:	4b39      	ldr	r3, [pc, #228]	@ (800f6d4 <scalbn+0x10c>)
 800f5ee:	429e      	cmp	r6, r3
 800f5f0:	4604      	mov	r4, r0
 800f5f2:	460d      	mov	r5, r1
 800f5f4:	db52      	blt.n	800f69c <scalbn+0xd4>
 800f5f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f5fa:	460b      	mov	r3, r1
 800f5fc:	3a36      	subs	r2, #54	@ 0x36
 800f5fe:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f602:	428e      	cmp	r6, r1
 800f604:	dc23      	bgt.n	800f64e <scalbn+0x86>
 800f606:	4416      	add	r6, r2
 800f608:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 800f60c:	4296      	cmp	r6, r2
 800f60e:	dc1e      	bgt.n	800f64e <scalbn+0x86>
 800f610:	2e00      	cmp	r6, #0
 800f612:	dc34      	bgt.n	800f67e <scalbn+0xb6>
 800f614:	f116 0f35 	cmn.w	r6, #53	@ 0x35
 800f618:	db38      	blt.n	800f68c <scalbn+0xc4>
 800f61a:	f36f 531e 	bfc	r3, #20, #11
 800f61e:	3636      	adds	r6, #54	@ 0x36
 800f620:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 800f624:	4620      	mov	r0, r4
 800f626:	4b2c      	ldr	r3, [pc, #176]	@ (800f6d8 <scalbn+0x110>)
 800f628:	4629      	mov	r1, r5
 800f62a:	2200      	movs	r2, #0
 800f62c:	f7f0 ffc6 	bl	80005bc <__aeabi_dmul>
 800f630:	ec41 0b10 	vmov	d0, r0, r1
 800f634:	bd70      	pop	{r4, r5, r6, pc}
 800f636:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800f63a:	428a      	cmp	r2, r1
 800f63c:	d1df      	bne.n	800f5fe <scalbn+0x36>
 800f63e:	4622      	mov	r2, r4
 800f640:	4620      	mov	r0, r4
 800f642:	4629      	mov	r1, r5
 800f644:	f7f0 fe04 	bl	8000250 <__adddf3>
 800f648:	ec41 0b10 	vmov	d0, r0, r1
 800f64c:	bd70      	pop	{r4, r5, r6, pc}
 800f64e:	2d00      	cmp	r5, #0
 800f650:	a117      	add	r1, pc, #92	@ (adr r1, 800f6b0 <scalbn+0xe8>)
 800f652:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f656:	db07      	blt.n	800f668 <scalbn+0xa0>
 800f658:	a315      	add	r3, pc, #84	@ (adr r3, 800f6b0 <scalbn+0xe8>)
 800f65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65e:	f7f0 ffad 	bl	80005bc <__aeabi_dmul>
 800f662:	ec41 0b10 	vmov	d0, r0, r1
 800f666:	bd70      	pop	{r4, r5, r6, pc}
 800f668:	a113      	add	r1, pc, #76	@ (adr r1, 800f6b8 <scalbn+0xf0>)
 800f66a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f66e:	a310      	add	r3, pc, #64	@ (adr r3, 800f6b0 <scalbn+0xe8>)
 800f670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f674:	f7f0 ffa2 	bl	80005bc <__aeabi_dmul>
 800f678:	ec41 0b10 	vmov	d0, r0, r1
 800f67c:	e7f3      	b.n	800f666 <scalbn+0x9e>
 800f67e:	f36f 531e 	bfc	r3, #20, #11
 800f682:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 800f686:	ec45 4b10 	vmov	d0, r4, r5
 800f68a:	bd70      	pop	{r4, r5, r6, pc}
 800f68c:	2d00      	cmp	r5, #0
 800f68e:	a10c      	add	r1, pc, #48	@ (adr r1, 800f6c0 <scalbn+0xf8>)
 800f690:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f694:	da02      	bge.n	800f69c <scalbn+0xd4>
 800f696:	a10c      	add	r1, pc, #48	@ (adr r1, 800f6c8 <scalbn+0x100>)
 800f698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f69c:	a308      	add	r3, pc, #32	@ (adr r3, 800f6c0 <scalbn+0xf8>)
 800f69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a2:	f7f0 ff8b 	bl	80005bc <__aeabi_dmul>
 800f6a6:	ec41 0b10 	vmov	d0, r0, r1
 800f6aa:	bd70      	pop	{r4, r5, r6, pc}
 800f6ac:	f3af 8000 	nop.w
 800f6b0:	8800759c 	.word	0x8800759c
 800f6b4:	7e37e43c 	.word	0x7e37e43c
 800f6b8:	8800759c 	.word	0x8800759c
 800f6bc:	fe37e43c 	.word	0xfe37e43c
 800f6c0:	c2f8f359 	.word	0xc2f8f359
 800f6c4:	01a56e1f 	.word	0x01a56e1f
 800f6c8:	c2f8f359 	.word	0xc2f8f359
 800f6cc:	81a56e1f 	.word	0x81a56e1f
 800f6d0:	43500000 	.word	0x43500000
 800f6d4:	ffff3cb0 	.word	0xffff3cb0
 800f6d8:	3c900000 	.word	0x3c900000

0800f6dc <with_errno>:
 800f6dc:	b510      	push	{r4, lr}
 800f6de:	ed2d 8b02 	vpush	{d8}
 800f6e2:	eeb0 8a40 	vmov.f32	s16, s0
 800f6e6:	eef0 8a60 	vmov.f32	s17, s1
 800f6ea:	4604      	mov	r4, r0
 800f6ec:	f7fe f88e 	bl	800d80c <__errno>
 800f6f0:	eeb0 0a48 	vmov.f32	s0, s16
 800f6f4:	eef0 0a68 	vmov.f32	s1, s17
 800f6f8:	ecbd 8b02 	vpop	{d8}
 800f6fc:	6004      	str	r4, [r0, #0]
 800f6fe:	bd10      	pop	{r4, pc}

0800f700 <xflow>:
 800f700:	b500      	push	{lr}
 800f702:	4603      	mov	r3, r0
 800f704:	b083      	sub	sp, #12
 800f706:	ec51 0b10 	vmov	r0, r1, d0
 800f70a:	b183      	cbz	r3, 800f72e <xflow+0x2e>
 800f70c:	4602      	mov	r2, r0
 800f70e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f712:	e9cd 2300 	strd	r2, r3, [sp]
 800f716:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f71a:	f7f0 ff4f 	bl	80005bc <__aeabi_dmul>
 800f71e:	ec41 0b10 	vmov	d0, r0, r1
 800f722:	2022      	movs	r0, #34	@ 0x22
 800f724:	b003      	add	sp, #12
 800f726:	f85d eb04 	ldr.w	lr, [sp], #4
 800f72a:	f7ff bfd7 	b.w	800f6dc <with_errno>
 800f72e:	4602      	mov	r2, r0
 800f730:	460b      	mov	r3, r1
 800f732:	e7ee      	b.n	800f712 <xflow+0x12>
 800f734:	0000      	movs	r0, r0
	...

0800f738 <__math_uflow>:
 800f738:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f740 <__math_uflow+0x8>
 800f73c:	f7ff bfe0 	b.w	800f700 <xflow>
 800f740:	00000000 	.word	0x00000000
 800f744:	10000000 	.word	0x10000000

0800f748 <__math_oflow>:
 800f748:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f750 <__math_oflow+0x8>
 800f74c:	f7ff bfd8 	b.w	800f700 <xflow>
 800f750:	00000000 	.word	0x00000000
 800f754:	70000000 	.word	0x70000000

0800f758 <__kernel_rem_pio2>:
 800f758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f75c:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800f760:	469c      	mov	ip, r3
 800f762:	910a      	str	r1, [sp, #40]	@ 0x28
 800f764:	4bb0      	ldr	r3, [pc, #704]	@ (800fa28 <__kernel_rem_pio2+0x2d0>)
 800f766:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800f768:	9003      	str	r0, [sp, #12]
 800f76a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f76e:	9304      	str	r3, [sp, #16]
 800f770:	f112 0f14 	cmn.w	r2, #20
 800f774:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 800f778:	9302      	str	r3, [sp, #8]
 800f77a:	f2c0 82c1 	blt.w	800fd00 <__kernel_rem_pio2+0x5a8>
 800f77e:	49ab      	ldr	r1, [pc, #684]	@ (800fa2c <__kernel_rem_pio2+0x2d4>)
 800f780:	1ed3      	subs	r3, r2, #3
 800f782:	fb81 0103 	smull	r0, r1, r1, r3
 800f786:	17db      	asrs	r3, r3, #31
 800f788:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 800f78c:	9307      	str	r3, [sp, #28]
 800f78e:	3301      	adds	r3, #1
 800f790:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 800f794:	00db      	lsls	r3, r3, #3
 800f796:	18d3      	adds	r3, r2, r3
 800f798:	9a07      	ldr	r2, [sp, #28]
 800f79a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f79c:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 800f7a0:	1ad4      	subs	r4, r2, r3
 800f7a2:	9a04      	ldr	r2, [sp, #16]
 800f7a4:	18d7      	adds	r7, r2, r3
 800f7a6:	d41c      	bmi.n	800f7e2 <__kernel_rem_pio2+0x8a>
 800f7a8:	3701      	adds	r7, #1
 800f7aa:	9ea3      	ldr	r6, [sp, #652]	@ 0x28c
 800f7ac:	4427      	add	r7, r4
 800f7ae:	ad20      	add	r5, sp, #128	@ 0x80
 800f7b0:	f04f 0800 	mov.w	r8, #0
 800f7b4:	f04f 0900 	mov.w	r9, #0
 800f7b8:	46e2      	mov	sl, ip
 800f7ba:	e008      	b.n	800f7ce <__kernel_rem_pio2+0x76>
 800f7bc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f7c0:	f7f0 fe92 	bl	80004e8 <__aeabi_i2d>
 800f7c4:	3401      	adds	r4, #1
 800f7c6:	42bc      	cmp	r4, r7
 800f7c8:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f7cc:	d008      	beq.n	800f7e0 <__kernel_rem_pio2+0x88>
 800f7ce:	2c00      	cmp	r4, #0
 800f7d0:	daf4      	bge.n	800f7bc <__kernel_rem_pio2+0x64>
 800f7d2:	3401      	adds	r4, #1
 800f7d4:	4640      	mov	r0, r8
 800f7d6:	4649      	mov	r1, r9
 800f7d8:	42bc      	cmp	r4, r7
 800f7da:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f7de:	d1f6      	bne.n	800f7ce <__kernel_rem_pio2+0x76>
 800f7e0:	46d4      	mov	ip, sl
 800f7e2:	9b04      	ldr	r3, [sp, #16]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	bfb8      	it	lt
 800f7e8:	ea4f 06cc 	movlt.w	r6, ip, lsl #3
 800f7ec:	db1b      	blt.n	800f826 <__kernel_rem_pio2+0xce>
 800f7ee:	9903      	ldr	r1, [sp, #12]
 800f7f0:	9a02      	ldr	r2, [sp, #8]
 800f7f2:	9b04      	ldr	r3, [sp, #16]
 800f7f4:	f10d 0980 	add.w	r9, sp, #128	@ 0x80
 800f7f8:	eb01 08cc 	add.w	r8, r1, ip, lsl #3
 800f7fc:	eb09 09cc 	add.w	r9, r9, ip, lsl #3
 800f800:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800f804:	ea4f 06cc 	mov.w	r6, ip, lsl #3
 800f808:	4692      	mov	sl, r2
 800f80a:	4463      	add	r3, ip
 800f80c:	2000      	movs	r0, #0
 800f80e:	2100      	movs	r1, #0
 800f810:	2a00      	cmp	r2, #0
 800f812:	f280 8198 	bge.w	800fb46 <__kernel_rem_pio2+0x3ee>
 800f816:	f10a 0a01 	add.w	sl, sl, #1
 800f81a:	459a      	cmp	sl, r3
 800f81c:	e8eb 0102 	strd	r0, r1, [fp], #8
 800f820:	f109 0908 	add.w	r9, r9, #8
 800f824:	d1f4      	bne.n	800f810 <__kernel_rem_pio2+0xb8>
 800f826:	9b03      	ldr	r3, [sp, #12]
 800f828:	9a04      	ldr	r2, [sp, #16]
 800f82a:	9200      	str	r2, [sp, #0]
 800f82c:	1999      	adds	r1, r3, r6
 800f82e:	ab0c      	add	r3, sp, #48	@ 0x30
 800f830:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f834:	3b04      	subs	r3, #4
 800f836:	9308      	str	r3, [sp, #32]
 800f838:	ab0c      	add	r3, sp, #48	@ 0x30
 800f83a:	eb03 0682 	add.w	r6, r3, r2, lsl #2
 800f83e:	4637      	mov	r7, r6
 800f840:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f842:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800f846:	468b      	mov	fp, r1
 800f848:	9a00      	ldr	r2, [sp, #0]
 800f84a:	eb0d 03c2 	add.w	r3, sp, r2, lsl #3
 800f84e:	2a00      	cmp	r2, #0
 800f850:	e9d3 4570 	ldrd	r4, r5, [r3, #448]	@ 0x1c0
 800f854:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800f858:	dd2c      	ble.n	800f8b4 <__kernel_rem_pio2+0x15c>
 800f85a:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800f85e:	44d0      	add	r8, sl
 800f860:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800f864:	9601      	str	r6, [sp, #4]
 800f866:	9705      	str	r7, [sp, #20]
 800f868:	4b71      	ldr	r3, [pc, #452]	@ (800fa30 <__kernel_rem_pio2+0x2d8>)
 800f86a:	2200      	movs	r2, #0
 800f86c:	4620      	mov	r0, r4
 800f86e:	4629      	mov	r1, r5
 800f870:	f7f0 fea4 	bl	80005bc <__aeabi_dmul>
 800f874:	f7f1 f952 	bl	8000b1c <__aeabi_d2iz>
 800f878:	f7f0 fe36 	bl	80004e8 <__aeabi_i2d>
 800f87c:	4b6d      	ldr	r3, [pc, #436]	@ (800fa34 <__kernel_rem_pio2+0x2dc>)
 800f87e:	2200      	movs	r2, #0
 800f880:	4606      	mov	r6, r0
 800f882:	460f      	mov	r7, r1
 800f884:	f7f0 fe9a 	bl	80005bc <__aeabi_dmul>
 800f888:	4602      	mov	r2, r0
 800f88a:	460b      	mov	r3, r1
 800f88c:	4620      	mov	r0, r4
 800f88e:	4629      	mov	r1, r5
 800f890:	f7f0 fcdc 	bl	800024c <__aeabi_dsub>
 800f894:	f7f1 f942 	bl	8000b1c <__aeabi_d2iz>
 800f898:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800f89c:	f849 0b04 	str.w	r0, [r9], #4
 800f8a0:	4639      	mov	r1, r7
 800f8a2:	4630      	mov	r0, r6
 800f8a4:	f7f0 fcd4 	bl	8000250 <__adddf3>
 800f8a8:	45d0      	cmp	r8, sl
 800f8aa:	4604      	mov	r4, r0
 800f8ac:	460d      	mov	r5, r1
 800f8ae:	d1db      	bne.n	800f868 <__kernel_rem_pio2+0x110>
 800f8b0:	9e01      	ldr	r6, [sp, #4]
 800f8b2:	9f05      	ldr	r7, [sp, #20]
 800f8b4:	ec45 4b10 	vmov	d0, r4, r5
 800f8b8:	4630      	mov	r0, r6
 800f8ba:	f7ff fe85 	bl	800f5c8 <scalbn>
 800f8be:	ec55 4b10 	vmov	r4, r5, d0
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	4629      	mov	r1, r5
 800f8cc:	f7f0 fe76 	bl	80005bc <__aeabi_dmul>
 800f8d0:	ec41 0b10 	vmov	d0, r0, r1
 800f8d4:	f000 fb84 	bl	800ffe0 <floor>
 800f8d8:	4b57      	ldr	r3, [pc, #348]	@ (800fa38 <__kernel_rem_pio2+0x2e0>)
 800f8da:	ec51 0b10 	vmov	r0, r1, d0
 800f8de:	2200      	movs	r2, #0
 800f8e0:	f7f0 fe6c 	bl	80005bc <__aeabi_dmul>
 800f8e4:	4602      	mov	r2, r0
 800f8e6:	460b      	mov	r3, r1
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	4629      	mov	r1, r5
 800f8ec:	f7f0 fcae 	bl	800024c <__aeabi_dsub>
 800f8f0:	460d      	mov	r5, r1
 800f8f2:	4604      	mov	r4, r0
 800f8f4:	f7f1 f912 	bl	8000b1c <__aeabi_d2iz>
 800f8f8:	4682      	mov	sl, r0
 800f8fa:	f7f0 fdf5 	bl	80004e8 <__aeabi_i2d>
 800f8fe:	4602      	mov	r2, r0
 800f900:	460b      	mov	r3, r1
 800f902:	4620      	mov	r0, r4
 800f904:	4629      	mov	r1, r5
 800f906:	f7f0 fca1 	bl	800024c <__aeabi_dsub>
 800f90a:	2e00      	cmp	r6, #0
 800f90c:	4680      	mov	r8, r0
 800f90e:	4689      	mov	r9, r1
 800f910:	f340 8094 	ble.w	800fa3c <__kernel_rem_pio2+0x2e4>
 800f914:	9b00      	ldr	r3, [sp, #0]
 800f916:	aa0c      	add	r2, sp, #48	@ 0x30
 800f918:	1e59      	subs	r1, r3, #1
 800f91a:	f1c6 0318 	rsb	r3, r6, #24
 800f91e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f922:	fa42 f003 	asr.w	r0, r2, r3
 800f926:	fa00 f303 	lsl.w	r3, r0, r3
 800f92a:	1ad2      	subs	r2, r2, r3
 800f92c:	f1c6 0417 	rsb	r4, r6, #23
 800f930:	fa42 f404 	asr.w	r4, r2, r4
 800f934:	ab0c      	add	r3, sp, #48	@ 0x30
 800f936:	2c00      	cmp	r4, #0
 800f938:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f93c:	4482      	add	sl, r0
 800f93e:	f300 80f0 	bgt.w	800fb22 <__kernel_rem_pio2+0x3ca>
 800f942:	2200      	movs	r2, #0
 800f944:	2300      	movs	r3, #0
 800f946:	4640      	mov	r0, r8
 800f948:	4649      	mov	r1, r9
 800f94a:	f7f1 f89f 	bl	8000a8c <__aeabi_dcmpeq>
 800f94e:	2800      	cmp	r0, #0
 800f950:	f000 8223 	beq.w	800fd9a <__kernel_rem_pio2+0x642>
 800f954:	9b00      	ldr	r3, [sp, #0]
 800f956:	9a04      	ldr	r2, [sp, #16]
 800f958:	4293      	cmp	r3, r2
 800f95a:	dd0c      	ble.n	800f976 <__kernel_rem_pio2+0x21e>
 800f95c:	aa0c      	add	r2, sp, #48	@ 0x30
 800f95e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f962:	2200      	movs	r2, #0
 800f964:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f968:	42bb      	cmp	r3, r7
 800f96a:	ea42 0201 	orr.w	r2, r2, r1
 800f96e:	d1f9      	bne.n	800f964 <__kernel_rem_pio2+0x20c>
 800f970:	2a00      	cmp	r2, #0
 800f972:	f040 8110 	bne.w	800fb96 <__kernel_rem_pio2+0x43e>
 800f976:	9b04      	ldr	r3, [sp, #16]
 800f978:	aa0c      	add	r2, sp, #48	@ 0x30
 800f97a:	3b01      	subs	r3, #1
 800f97c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f980:	9a00      	ldr	r2, [sp, #0]
 800f982:	1c50      	adds	r0, r2, #1
 800f984:	4681      	mov	r9, r0
 800f986:	2b00      	cmp	r3, #0
 800f988:	f040 80db 	bne.w	800fb42 <__kernel_rem_pio2+0x3ea>
 800f98c:	9a08      	ldr	r2, [sp, #32]
 800f98e:	2301      	movs	r3, #1
 800f990:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f994:	3301      	adds	r3, #1
 800f996:	2900      	cmp	r1, #0
 800f998:	d0fa      	beq.n	800f990 <__kernel_rem_pio2+0x238>
 800f99a:	9a00      	ldr	r2, [sp, #0]
 800f99c:	4413      	add	r3, r2
 800f99e:	9a00      	ldr	r2, [sp, #0]
 800f9a0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f9a2:	9605      	str	r6, [sp, #20]
 800f9a4:	440a      	add	r2, r1
 800f9a6:	9907      	ldr	r1, [sp, #28]
 800f9a8:	9301      	str	r3, [sp, #4]
 800f9aa:	eb01 0a00 	add.w	sl, r1, r0
 800f9ae:	f10d 0880 	add.w	r8, sp, #128	@ 0x80
 800f9b2:	99a3      	ldr	r1, [sp, #652]	@ 0x28c
 800f9b4:	9706      	str	r7, [sp, #24]
 800f9b6:	f10a 4a80 	add.w	sl, sl, #1073741824	@ 0x40000000
 800f9ba:	eb08 08c2 	add.w	r8, r8, r2, lsl #3
 800f9be:	aa70      	add	r2, sp, #448	@ 0x1c0
 800f9c0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800f9c4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f9c8:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 800f9cc:	9200      	str	r2, [sp, #0]
 800f9ce:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 800f9d2:	f7f0 fd89 	bl	80004e8 <__aeabi_i2d>
 800f9d6:	9b02      	ldr	r3, [sp, #8]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	e8e8 0102 	strd	r0, r1, [r8], #8
 800f9de:	db20      	blt.n	800fa22 <__kernel_rem_pio2+0x2ca>
 800f9e0:	9e03      	ldr	r6, [sp, #12]
 800f9e2:	4647      	mov	r7, r8
 800f9e4:	2400      	movs	r4, #0
 800f9e6:	2500      	movs	r5, #0
 800f9e8:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 800f9ec:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800f9f0:	f7f0 fde4 	bl	80005bc <__aeabi_dmul>
 800f9f4:	4602      	mov	r2, r0
 800f9f6:	460b      	mov	r3, r1
 800f9f8:	4620      	mov	r0, r4
 800f9fa:	4629      	mov	r1, r5
 800f9fc:	f7f0 fc28 	bl	8000250 <__adddf3>
 800fa00:	455e      	cmp	r6, fp
 800fa02:	4604      	mov	r4, r0
 800fa04:	460d      	mov	r5, r1
 800fa06:	d1ef      	bne.n	800f9e8 <__kernel_rem_pio2+0x290>
 800fa08:	9b00      	ldr	r3, [sp, #0]
 800fa0a:	e8e3 4502 	strd	r4, r5, [r3], #8
 800fa0e:	9300      	str	r3, [sp, #0]
 800fa10:	9b01      	ldr	r3, [sp, #4]
 800fa12:	f109 0901 	add.w	r9, r9, #1
 800fa16:	4599      	cmp	r9, r3
 800fa18:	ddd9      	ble.n	800f9ce <__kernel_rem_pio2+0x276>
 800fa1a:	e9dd 6705 	ldrd	r6, r7, [sp, #20]
 800fa1e:	9300      	str	r3, [sp, #0]
 800fa20:	e712      	b.n	800f848 <__kernel_rem_pio2+0xf0>
 800fa22:	2400      	movs	r4, #0
 800fa24:	2500      	movs	r5, #0
 800fa26:	e7ef      	b.n	800fa08 <__kernel_rem_pio2+0x2b0>
 800fa28:	08011940 	.word	0x08011940
 800fa2c:	2aaaaaab 	.word	0x2aaaaaab
 800fa30:	3e700000 	.word	0x3e700000
 800fa34:	41700000 	.word	0x41700000
 800fa38:	40200000 	.word	0x40200000
 800fa3c:	d057      	beq.n	800faee <__kernel_rem_pio2+0x396>
 800fa3e:	4bb6      	ldr	r3, [pc, #728]	@ (800fd18 <__kernel_rem_pio2+0x5c0>)
 800fa40:	2200      	movs	r2, #0
 800fa42:	f7f1 f841 	bl	8000ac8 <__aeabi_dcmpge>
 800fa46:	4604      	mov	r4, r0
 800fa48:	2800      	cmp	r0, #0
 800fa4a:	f43f af7a 	beq.w	800f942 <__kernel_rem_pio2+0x1ea>
 800fa4e:	9b00      	ldr	r3, [sp, #0]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	f10a 0a01 	add.w	sl, sl, #1
 800fa56:	bfc8      	it	gt
 800fa58:	2402      	movgt	r4, #2
 800fa5a:	f340 8284 	ble.w	800ff66 <__kernel_rem_pio2+0x80e>
 800fa5e:	ab0c      	add	r3, sp, #48	@ 0x30
 800fa60:	2100      	movs	r1, #0
 800fa62:	f853 5b04 	ldr.w	r5, [r3], #4
 800fa66:	2d00      	cmp	r5, #0
 800fa68:	d03c      	beq.n	800fae4 <__kernel_rem_pio2+0x38c>
 800fa6a:	f1c5 7580 	rsb	r5, r5, #16777216	@ 0x1000000
 800fa6e:	f843 5c04 	str.w	r5, [r3, #-4]
 800fa72:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800fa76:	e003      	b.n	800fa80 <__kernel_rem_pio2+0x328>
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	1a82      	subs	r2, r0, r2
 800fa7c:	f843 2b04 	str.w	r2, [r3], #4
 800fa80:	9a00      	ldr	r2, [sp, #0]
 800fa82:	3101      	adds	r1, #1
 800fa84:	428a      	cmp	r2, r1
 800fa86:	dcf7      	bgt.n	800fa78 <__kernel_rem_pio2+0x320>
 800fa88:	2501      	movs	r5, #1
 800fa8a:	2e00      	cmp	r6, #0
 800fa8c:	dd0e      	ble.n	800faac <__kernel_rem_pio2+0x354>
 800fa8e:	2e01      	cmp	r6, #1
 800fa90:	f000 812b 	beq.w	800fcea <__kernel_rem_pio2+0x592>
 800fa94:	2e02      	cmp	r6, #2
 800fa96:	d109      	bne.n	800faac <__kernel_rem_pio2+0x354>
 800fa98:	9b00      	ldr	r3, [sp, #0]
 800fa9a:	1e5a      	subs	r2, r3, #1
 800fa9c:	ab0c      	add	r3, sp, #48	@ 0x30
 800fa9e:	a90c      	add	r1, sp, #48	@ 0x30
 800faa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faa4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800faa8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800faac:	2c02      	cmp	r4, #2
 800faae:	f47f af48 	bne.w	800f942 <__kernel_rem_pio2+0x1ea>
 800fab2:	4642      	mov	r2, r8
 800fab4:	464b      	mov	r3, r9
 800fab6:	4999      	ldr	r1, [pc, #612]	@ (800fd1c <__kernel_rem_pio2+0x5c4>)
 800fab8:	2000      	movs	r0, #0
 800faba:	f7f0 fbc7 	bl	800024c <__aeabi_dsub>
 800fabe:	4680      	mov	r8, r0
 800fac0:	4689      	mov	r9, r1
 800fac2:	2d00      	cmp	r5, #0
 800fac4:	f43f af3d 	beq.w	800f942 <__kernel_rem_pio2+0x1ea>
 800fac8:	4630      	mov	r0, r6
 800faca:	ed9f 0b91 	vldr	d0, [pc, #580]	@ 800fd10 <__kernel_rem_pio2+0x5b8>
 800face:	f7ff fd7b 	bl	800f5c8 <scalbn>
 800fad2:	4640      	mov	r0, r8
 800fad4:	4649      	mov	r1, r9
 800fad6:	ec53 2b10 	vmov	r2, r3, d0
 800fada:	f7f0 fbb7 	bl	800024c <__aeabi_dsub>
 800fade:	4680      	mov	r8, r0
 800fae0:	4689      	mov	r9, r1
 800fae2:	e72e      	b.n	800f942 <__kernel_rem_pio2+0x1ea>
 800fae4:	9a00      	ldr	r2, [sp, #0]
 800fae6:	3101      	adds	r1, #1
 800fae8:	428a      	cmp	r2, r1
 800faea:	dcba      	bgt.n	800fa62 <__kernel_rem_pio2+0x30a>
 800faec:	e7cd      	b.n	800fa8a <__kernel_rem_pio2+0x332>
 800faee:	9b00      	ldr	r3, [sp, #0]
 800faf0:	aa0c      	add	r2, sp, #48	@ 0x30
 800faf2:	3b01      	subs	r3, #1
 800faf4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800faf8:	15e4      	asrs	r4, r4, #23
 800fafa:	2c00      	cmp	r4, #0
 800fafc:	f77f af21 	ble.w	800f942 <__kernel_rem_pio2+0x1ea>
 800fb00:	9b00      	ldr	r3, [sp, #0]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	f10a 0a01 	add.w	sl, sl, #1
 800fb08:	dca9      	bgt.n	800fa5e <__kernel_rem_pio2+0x306>
 800fb0a:	2c02      	cmp	r4, #2
 800fb0c:	f47f af19 	bne.w	800f942 <__kernel_rem_pio2+0x1ea>
 800fb10:	4642      	mov	r2, r8
 800fb12:	464b      	mov	r3, r9
 800fb14:	4981      	ldr	r1, [pc, #516]	@ (800fd1c <__kernel_rem_pio2+0x5c4>)
 800fb16:	2000      	movs	r0, #0
 800fb18:	f7f0 fb98 	bl	800024c <__aeabi_dsub>
 800fb1c:	4680      	mov	r8, r0
 800fb1e:	4689      	mov	r9, r1
 800fb20:	e70f      	b.n	800f942 <__kernel_rem_pio2+0x1ea>
 800fb22:	9b00      	ldr	r3, [sp, #0]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	f10a 0a01 	add.w	sl, sl, #1
 800fb2a:	dc98      	bgt.n	800fa5e <__kernel_rem_pio2+0x306>
 800fb2c:	2e01      	cmp	r6, #1
 800fb2e:	f000 822e 	beq.w	800ff8e <__kernel_rem_pio2+0x836>
 800fb32:	2e02      	cmp	r6, #2
 800fb34:	d1e9      	bne.n	800fb0a <__kernel_rem_pio2+0x3b2>
 800fb36:	ab0c      	add	r3, sp, #48	@ 0x30
 800fb38:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800fb3c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fb40:	e7e3      	b.n	800fb0a <__kernel_rem_pio2+0x3b2>
 800fb42:	4603      	mov	r3, r0
 800fb44:	e72b      	b.n	800f99e <__kernel_rem_pio2+0x246>
 800fb46:	e9cd 3c00 	strd	r3, ip, [sp]
 800fb4a:	4652      	mov	r2, sl
 800fb4c:	9605      	str	r6, [sp, #20]
 800fb4e:	46da      	mov	sl, fp
 800fb50:	46cb      	mov	fp, r9
 800fb52:	4691      	mov	r9, r2
 800fb54:	9e03      	ldr	r6, [sp, #12]
 800fb56:	465f      	mov	r7, fp
 800fb58:	2400      	movs	r4, #0
 800fb5a:	2500      	movs	r5, #0
 800fb5c:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 800fb60:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800fb64:	f7f0 fd2a 	bl	80005bc <__aeabi_dmul>
 800fb68:	4602      	mov	r2, r0
 800fb6a:	460b      	mov	r3, r1
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	4629      	mov	r1, r5
 800fb70:	f7f0 fb6e 	bl	8000250 <__adddf3>
 800fb74:	4546      	cmp	r6, r8
 800fb76:	4604      	mov	r4, r0
 800fb78:	460d      	mov	r5, r1
 800fb7a:	d1ef      	bne.n	800fb5c <__kernel_rem_pio2+0x404>
 800fb7c:	9b00      	ldr	r3, [sp, #0]
 800fb7e:	f109 0901 	add.w	r9, r9, #1
 800fb82:	4599      	cmp	r9, r3
 800fb84:	e8ea 4502 	strd	r4, r5, [sl], #8
 800fb88:	f10b 0b08 	add.w	fp, fp, #8
 800fb8c:	d1e2      	bne.n	800fb54 <__kernel_rem_pio2+0x3fc>
 800fb8e:	f8dd c004 	ldr.w	ip, [sp, #4]
 800fb92:	9e05      	ldr	r6, [sp, #20]
 800fb94:	e647      	b.n	800f826 <__kernel_rem_pio2+0xce>
 800fb96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb98:	f8dd b000 	ldr.w	fp, [sp]
 800fb9c:	f1a3 0218 	sub.w	r2, r3, #24
 800fba0:	e9cd 4a02 	strd	r4, sl, [sp, #8]
 800fba4:	ab0c      	add	r3, sp, #48	@ 0x30
 800fba6:	f10b 34ff 	add.w	r4, fp, #4294967295	@ 0xffffffff
 800fbaa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fbac:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800fbb0:	b963      	cbnz	r3, 800fbcc <__kernel_rem_pio2+0x474>
 800fbb2:	f10b 4380 	add.w	r3, fp, #1073741824	@ 0x40000000
 800fbb6:	3b01      	subs	r3, #1
 800fbb8:	a90c      	add	r1, sp, #48	@ 0x30
 800fbba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fbbe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fbc2:	3c01      	subs	r4, #1
 800fbc4:	3a18      	subs	r2, #24
 800fbc6:	2900      	cmp	r1, #0
 800fbc8:	d0f9      	beq.n	800fbbe <__kernel_rem_pio2+0x466>
 800fbca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fbcc:	ed9f 0b50 	vldr	d0, [pc, #320]	@ 800fd10 <__kernel_rem_pio2+0x5b8>
 800fbd0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800fbd2:	f7ff fcf9 	bl	800f5c8 <scalbn>
 800fbd6:	2c00      	cmp	r4, #0
 800fbd8:	ec5b ab10 	vmov	sl, fp, d0
 800fbdc:	f2c0 81cd 	blt.w	800ff7a <__kernel_rem_pio2+0x822>
 800fbe0:	f104 0801 	add.w	r8, r4, #1
 800fbe4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fbe8:	f50d 79e0 	add.w	r9, sp, #448	@ 0x1c0
 800fbec:	ab0c      	add	r3, sp, #48	@ 0x30
 800fbee:	4f4c      	ldr	r7, [pc, #304]	@ (800fd20 <__kernel_rem_pio2+0x5c8>)
 800fbf0:	9100      	str	r1, [sp, #0]
 800fbf2:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 800fbf6:	2600      	movs	r6, #0
 800fbf8:	eb09 08c8 	add.w	r8, r9, r8, lsl #3
 800fbfc:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 800fc00:	f7f0 fc72 	bl	80004e8 <__aeabi_i2d>
 800fc04:	4652      	mov	r2, sl
 800fc06:	465b      	mov	r3, fp
 800fc08:	f7f0 fcd8 	bl	80005bc <__aeabi_dmul>
 800fc0c:	463b      	mov	r3, r7
 800fc0e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800fc12:	4632      	mov	r2, r6
 800fc14:	4650      	mov	r0, sl
 800fc16:	4659      	mov	r1, fp
 800fc18:	f7f0 fcd0 	bl	80005bc <__aeabi_dmul>
 800fc1c:	ab0c      	add	r3, sp, #48	@ 0x30
 800fc1e:	429d      	cmp	r5, r3
 800fc20:	4682      	mov	sl, r0
 800fc22:	468b      	mov	fp, r1
 800fc24:	d1ea      	bne.n	800fbfc <__kernel_rem_pio2+0x4a4>
 800fc26:	9900      	ldr	r1, [sp, #0]
 800fc28:	f1a1 0a08 	sub.w	sl, r1, #8
 800fc2c:	ab48      	add	r3, sp, #288	@ 0x120
 800fc2e:	44ca      	add	sl, r9
 800fc30:	e9cd 4105 	strd	r4, r1, [sp, #20]
 800fc34:	f04f 0900 	mov.w	r9, #0
 800fc38:	461a      	mov	r2, r3
 800fc3a:	9307      	str	r3, [sp, #28]
 800fc3c:	4653      	mov	r3, sl
 800fc3e:	46ca      	mov	sl, r9
 800fc40:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800fc44:	46a3      	mov	fp, r4
 800fc46:	f1b9 0f00 	cmp.w	r9, #0
 800fc4a:	f2c0 80a3 	blt.w	800fd94 <__kernel_rem_pio2+0x63c>
 800fc4e:	e9cd 2b00 	strd	r2, fp, [sp]
 800fc52:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 800fd24 <__kernel_rem_pio2+0x5cc>
 800fc56:	461f      	mov	r7, r3
 800fc58:	2600      	movs	r6, #0
 800fc5a:	2400      	movs	r4, #0
 800fc5c:	2500      	movs	r5, #0
 800fc5e:	469b      	mov	fp, r3
 800fc60:	e010      	b.n	800fc84 <__kernel_rem_pio2+0x52c>
 800fc62:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 800fc66:	e8f8 0102 	ldrd	r0, r1, [r8], #8
 800fc6a:	f7f0 fca7 	bl	80005bc <__aeabi_dmul>
 800fc6e:	4602      	mov	r2, r0
 800fc70:	460b      	mov	r3, r1
 800fc72:	4620      	mov	r0, r4
 800fc74:	4629      	mov	r1, r5
 800fc76:	f7f0 faeb 	bl	8000250 <__adddf3>
 800fc7a:	3601      	adds	r6, #1
 800fc7c:	45b1      	cmp	r9, r6
 800fc7e:	4604      	mov	r4, r0
 800fc80:	460d      	mov	r5, r1
 800fc82:	db01      	blt.n	800fc88 <__kernel_rem_pio2+0x530>
 800fc84:	4556      	cmp	r6, sl
 800fc86:	ddec      	ble.n	800fc62 <__kernel_rem_pio2+0x50a>
 800fc88:	465b      	mov	r3, fp
 800fc8a:	9a00      	ldr	r2, [sp, #0]
 800fc8c:	f8dd b004 	ldr.w	fp, [sp, #4]
 800fc90:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800fc94:	f1bb 3fff 	cmp.w	fp, #4294967295	@ 0xffffffff
 800fc98:	e8e2 4502 	strd	r4, r5, [r2], #8
 800fc9c:	f10a 0a01 	add.w	sl, sl, #1
 800fca0:	f1a3 0308 	sub.w	r3, r3, #8
 800fca4:	d1cf      	bne.n	800fc46 <__kernel_rem_pio2+0x4ee>
 800fca6:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800fca8:	9b07      	ldr	r3, [sp, #28]
 800fcaa:	2a02      	cmp	r2, #2
 800fcac:	e9dd 4105 	ldrd	r4, r1, [sp, #20]
 800fcb0:	f300 80a9 	bgt.w	800fe06 <__kernel_rem_pio2+0x6ae>
 800fcb4:	2a00      	cmp	r2, #0
 800fcb6:	dc37      	bgt.n	800fd28 <__kernel_rem_pio2+0x5d0>
 800fcb8:	d110      	bne.n	800fcdc <__kernel_rem_pio2+0x584>
 800fcba:	185c      	adds	r4, r3, r1
 800fcbc:	2000      	movs	r0, #0
 800fcbe:	2100      	movs	r1, #0
 800fcc0:	461d      	mov	r5, r3
 800fcc2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fcc6:	f7f0 fac3 	bl	8000250 <__adddf3>
 800fcca:	42ac      	cmp	r4, r5
 800fccc:	d1f9      	bne.n	800fcc2 <__kernel_rem_pio2+0x56a>
 800fcce:	9b02      	ldr	r3, [sp, #8]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	f040 812f 	bne.w	800ff34 <__kernel_rem_pio2+0x7dc>
 800fcd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcd8:	e9c3 0100 	strd	r0, r1, [r3]
 800fcdc:	9b03      	ldr	r3, [sp, #12]
 800fcde:	f003 0007 	and.w	r0, r3, #7
 800fce2:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800fce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcea:	9b00      	ldr	r3, [sp, #0]
 800fcec:	1e5a      	subs	r2, r3, #1
 800fcee:	ab0c      	add	r3, sp, #48	@ 0x30
 800fcf0:	a90c      	add	r1, sp, #48	@ 0x30
 800fcf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcf6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fcfa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fcfe:	e6d5      	b.n	800faac <__kernel_rem_pio2+0x354>
 800fd00:	2100      	movs	r1, #0
 800fd02:	f06f 0317 	mvn.w	r3, #23
 800fd06:	9107      	str	r1, [sp, #28]
 800fd08:	e545      	b.n	800f796 <__kernel_rem_pio2+0x3e>
 800fd0a:	bf00      	nop
 800fd0c:	f3af 8000 	nop.w
 800fd10:	00000000 	.word	0x00000000
 800fd14:	3ff00000 	.word	0x3ff00000
 800fd18:	3fe00000 	.word	0x3fe00000
 800fd1c:	3ff00000 	.word	0x3ff00000
 800fd20:	3e700000 	.word	0x3e700000
 800fd24:	08011900 	.word	0x08011900
 800fd28:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd2c:	185d      	adds	r5, r3, r1
 800fd2e:	2600      	movs	r6, #0
 800fd30:	2700      	movs	r7, #0
 800fd32:	469a      	mov	sl, r3
 800fd34:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800fd38:	4630      	mov	r0, r6
 800fd3a:	4639      	mov	r1, r7
 800fd3c:	f7f0 fa88 	bl	8000250 <__adddf3>
 800fd40:	4555      	cmp	r5, sl
 800fd42:	4606      	mov	r6, r0
 800fd44:	460f      	mov	r7, r1
 800fd46:	d1f5      	bne.n	800fd34 <__kernel_rem_pio2+0x5dc>
 800fd48:	9b02      	ldr	r3, [sp, #8]
 800fd4a:	4640      	mov	r0, r8
 800fd4c:	4649      	mov	r1, r9
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	f040 80e3 	bne.w	800ff1a <__kernel_rem_pio2+0x7c2>
 800fd54:	463b      	mov	r3, r7
 800fd56:	4632      	mov	r2, r6
 800fd58:	f7f0 fa78 	bl	800024c <__aeabi_dsub>
 800fd5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd5e:	e9c3 6700 	strd	r6, r7, [r3]
 800fd62:	b16c      	cbz	r4, 800fd80 <__kernel_rem_pio2+0x628>
 800fd64:	ae4a      	add	r6, sp, #296	@ 0x128
 800fd66:	2501      	movs	r5, #1
 800fd68:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800fd6c:	3501      	adds	r5, #1
 800fd6e:	f7f0 fa6f 	bl	8000250 <__adddf3>
 800fd72:	42ac      	cmp	r4, r5
 800fd74:	daf8      	bge.n	800fd68 <__kernel_rem_pio2+0x610>
 800fd76:	9b02      	ldr	r3, [sp, #8]
 800fd78:	b113      	cbz	r3, 800fd80 <__kernel_rem_pio2+0x628>
 800fd7a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fd7e:	4619      	mov	r1, r3
 800fd80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd82:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fd86:	9b03      	ldr	r3, [sp, #12]
 800fd88:	f003 0007 	and.w	r0, r3, #7
 800fd8c:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800fd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd94:	2400      	movs	r4, #0
 800fd96:	2500      	movs	r5, #0
 800fd98:	e77a      	b.n	800fc90 <__kernel_rem_pio2+0x538>
 800fd9a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800fd9c:	f8dd b000 	ldr.w	fp, [sp]
 800fda0:	4270      	negs	r0, r6
 800fda2:	ec49 8b10 	vmov	d0, r8, r9
 800fda6:	e9cd 4a02 	strd	r4, sl, [sp, #8]
 800fdaa:	f7ff fc0d 	bl	800f5c8 <scalbn>
 800fdae:	ec55 4b10 	vmov	r4, r5, d0
 800fdb2:	4b88      	ldr	r3, [pc, #544]	@ (800ffd4 <__kernel_rem_pio2+0x87c>)
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	4629      	mov	r1, r5
 800fdba:	f7f0 fe85 	bl	8000ac8 <__aeabi_dcmpge>
 800fdbe:	2800      	cmp	r0, #0
 800fdc0:	f000 80a2 	beq.w	800ff08 <__kernel_rem_pio2+0x7b0>
 800fdc4:	4b84      	ldr	r3, [pc, #528]	@ (800ffd8 <__kernel_rem_pio2+0x880>)
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	4620      	mov	r0, r4
 800fdca:	4629      	mov	r1, r5
 800fdcc:	f7f0 fbf6 	bl	80005bc <__aeabi_dmul>
 800fdd0:	f7f0 fea4 	bl	8000b1c <__aeabi_d2iz>
 800fdd4:	4607      	mov	r7, r0
 800fdd6:	f7f0 fb87 	bl	80004e8 <__aeabi_i2d>
 800fdda:	4b7e      	ldr	r3, [pc, #504]	@ (800ffd4 <__kernel_rem_pio2+0x87c>)
 800fddc:	2200      	movs	r2, #0
 800fdde:	f7f0 fbed 	bl	80005bc <__aeabi_dmul>
 800fde2:	460b      	mov	r3, r1
 800fde4:	4602      	mov	r2, r0
 800fde6:	4629      	mov	r1, r5
 800fde8:	4620      	mov	r0, r4
 800fdea:	f7f0 fa2f 	bl	800024c <__aeabi_dsub>
 800fdee:	f7f0 fe95 	bl	8000b1c <__aeabi_d2iz>
 800fdf2:	f10b 0401 	add.w	r4, fp, #1
 800fdf6:	ab0c      	add	r3, sp, #48	@ 0x30
 800fdf8:	3618      	adds	r6, #24
 800fdfa:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800fdfe:	960b      	str	r6, [sp, #44]	@ 0x2c
 800fe00:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800fe04:	e6e2      	b.n	800fbcc <__kernel_rem_pio2+0x474>
 800fe06:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800fe08:	2a03      	cmp	r2, #3
 800fe0a:	f47f af67 	bne.w	800fcdc <__kernel_rem_pio2+0x584>
 800fe0e:	2c00      	cmp	r4, #0
 800fe10:	f000 80cb 	beq.w	800ffaa <__kernel_rem_pio2+0x852>
 800fe14:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800fe18:	ed95 7b00 	vldr	d7, [r5]
 800fe1c:	ec52 1b17 	vmov	r1, r2, d7
 800fe20:	00e6      	lsls	r6, r4, #3
 800fe22:	e9cd 5400 	strd	r5, r4, [sp]
 800fe26:	e9cd 6504 	strd	r6, r5, [sp, #16]
 800fe2a:	46a8      	mov	r8, r5
 800fe2c:	460c      	mov	r4, r1
 800fe2e:	4615      	mov	r5, r2
 800fe30:	4699      	mov	r9, r3
 800fe32:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
 800fe36:	4620      	mov	r0, r4
 800fe38:	4629      	mov	r1, r5
 800fe3a:	4632      	mov	r2, r6
 800fe3c:	463b      	mov	r3, r7
 800fe3e:	f7f0 fa07 	bl	8000250 <__adddf3>
 800fe42:	46a2      	mov	sl, r4
 800fe44:	46ab      	mov	fp, r5
 800fe46:	4604      	mov	r4, r0
 800fe48:	460d      	mov	r5, r1
 800fe4a:	4622      	mov	r2, r4
 800fe4c:	462b      	mov	r3, r5
 800fe4e:	4630      	mov	r0, r6
 800fe50:	4639      	mov	r1, r7
 800fe52:	f7f0 f9fb 	bl	800024c <__aeabi_dsub>
 800fe56:	4652      	mov	r2, sl
 800fe58:	465b      	mov	r3, fp
 800fe5a:	f7f0 f9f9 	bl	8000250 <__adddf3>
 800fe5e:	45c8      	cmp	r8, r9
 800fe60:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800fe64:	e9c8 4500 	strd	r4, r5, [r8]
 800fe68:	d1e3      	bne.n	800fe32 <__kernel_rem_pio2+0x6da>
 800fe6a:	e9dd a400 	ldrd	sl, r4, [sp]
 800fe6e:	2c01      	cmp	r4, #1
 800fe70:	e9dd 6504 	ldrd	r6, r5, [sp, #16]
 800fe74:	464b      	mov	r3, r9
 800fe76:	f000 8098 	beq.w	800ffaa <__kernel_rem_pio2+0x852>
 800fe7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fe7e:	e9cd 6900 	strd	r6, r9, [sp]
 800fe82:	f109 0b08 	add.w	fp, r9, #8
 800fe86:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	4629      	mov	r1, r5
 800fe8e:	4642      	mov	r2, r8
 800fe90:	464b      	mov	r3, r9
 800fe92:	f7f0 f9dd 	bl	8000250 <__adddf3>
 800fe96:	4626      	mov	r6, r4
 800fe98:	462f      	mov	r7, r5
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	460d      	mov	r5, r1
 800fe9e:	4622      	mov	r2, r4
 800fea0:	462b      	mov	r3, r5
 800fea2:	4640      	mov	r0, r8
 800fea4:	4649      	mov	r1, r9
 800fea6:	f7f0 f9d1 	bl	800024c <__aeabi_dsub>
 800feaa:	4632      	mov	r2, r6
 800feac:	463b      	mov	r3, r7
 800feae:	f7f0 f9cf 	bl	8000250 <__adddf3>
 800feb2:	45d3      	cmp	fp, sl
 800feb4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800feb8:	e9ca 4500 	strd	r4, r5, [sl]
 800febc:	d1e3      	bne.n	800fe86 <__kernel_rem_pio2+0x72e>
 800febe:	e9dd 6300 	ldrd	r6, r3, [sp]
 800fec2:	f106 0408 	add.w	r4, r6, #8
 800fec6:	441c      	add	r4, r3
 800fec8:	f103 0510 	add.w	r5, r3, #16
 800fecc:	2000      	movs	r0, #0
 800fece:	2100      	movs	r1, #0
 800fed0:	461e      	mov	r6, r3
 800fed2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fed6:	f7f0 f9bb 	bl	8000250 <__adddf3>
 800feda:	42a5      	cmp	r5, r4
 800fedc:	d1f9      	bne.n	800fed2 <__kernel_rem_pio2+0x77a>
 800fede:	4633      	mov	r3, r6
 800fee0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fee4:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 800fee8:	9b02      	ldr	r3, [sp, #8]
 800feea:	bb3b      	cbnz	r3, 800ff3c <__kernel_rem_pio2+0x7e4>
 800feec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800feee:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fef2:	e9c3 4500 	strd	r4, r5, [r3]
 800fef6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800fefa:	9b03      	ldr	r3, [sp, #12]
 800fefc:	f003 0007 	and.w	r0, r3, #7
 800ff00:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800ff04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff08:	4620      	mov	r0, r4
 800ff0a:	4629      	mov	r1, r5
 800ff0c:	f7f0 fe06 	bl	8000b1c <__aeabi_d2iz>
 800ff10:	ab0c      	add	r3, sp, #48	@ 0x30
 800ff12:	465c      	mov	r4, fp
 800ff14:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800ff18:	e658      	b.n	800fbcc <__kernel_rem_pio2+0x474>
 800ff1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ff1c:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ff20:	6053      	str	r3, [r2, #4]
 800ff22:	6016      	str	r6, [r2, #0]
 800ff24:	463b      	mov	r3, r7
 800ff26:	4632      	mov	r2, r6
 800ff28:	f7f0 f990 	bl	800024c <__aeabi_dsub>
 800ff2c:	2c00      	cmp	r4, #0
 800ff2e:	f47f af19 	bne.w	800fd64 <__kernel_rem_pio2+0x60c>
 800ff32:	e722      	b.n	800fd7a <__kernel_rem_pio2+0x622>
 800ff34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff38:	4619      	mov	r1, r3
 800ff3a:	e6cc      	b.n	800fcd6 <__kernel_rem_pio2+0x57e>
 800ff3c:	4626      	mov	r6, r4
 800ff3e:	f105 4400 	add.w	r4, r5, #2147483648	@ 0x80000000
 800ff42:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ff44:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800ff48:	e9c5 7302 	strd	r7, r3, [r5, #8]
 800ff4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff50:	e9c5 0304 	strd	r0, r3, [r5, #16]
 800ff54:	9b03      	ldr	r3, [sp, #12]
 800ff56:	f003 0007 	and.w	r0, r3, #7
 800ff5a:	e9c5 6400 	strd	r6, r4, [r5]
 800ff5e:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800ff62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff66:	4642      	mov	r2, r8
 800ff68:	464b      	mov	r3, r9
 800ff6a:	491c      	ldr	r1, [pc, #112]	@ (800ffdc <__kernel_rem_pio2+0x884>)
 800ff6c:	2000      	movs	r0, #0
 800ff6e:	f7f0 f96d 	bl	800024c <__aeabi_dsub>
 800ff72:	2402      	movs	r4, #2
 800ff74:	4680      	mov	r8, r0
 800ff76:	4689      	mov	r9, r1
 800ff78:	e4e3      	b.n	800f942 <__kernel_rem_pio2+0x1ea>
 800ff7a:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800ff7c:	2b02      	cmp	r3, #2
 800ff7e:	dc0f      	bgt.n	800ffa0 <__kernel_rem_pio2+0x848>
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	dc15      	bgt.n	800ffb0 <__kernel_rem_pio2+0x858>
 800ff84:	f47f aeaa 	bne.w	800fcdc <__kernel_rem_pio2+0x584>
 800ff88:	2000      	movs	r0, #0
 800ff8a:	2100      	movs	r1, #0
 800ff8c:	e69f      	b.n	800fcce <__kernel_rem_pio2+0x576>
 800ff8e:	ab0c      	add	r3, sp, #48	@ 0x30
 800ff90:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800ff94:	2c02      	cmp	r4, #2
 800ff96:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800ff9a:	f47f acd2 	bne.w	800f942 <__kernel_rem_pio2+0x1ea>
 800ff9e:	e5b7      	b.n	800fb10 <__kernel_rem_pio2+0x3b8>
 800ffa0:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800ffa2:	2b03      	cmp	r3, #3
 800ffa4:	f47f ae9a 	bne.w	800fcdc <__kernel_rem_pio2+0x584>
 800ffa8:	ab48      	add	r3, sp, #288	@ 0x120
 800ffaa:	2000      	movs	r0, #0
 800ffac:	2100      	movs	r1, #0
 800ffae:	e797      	b.n	800fee0 <__kernel_rem_pio2+0x788>
 800ffb0:	9b02      	ldr	r3, [sp, #8]
 800ffb2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800ffb6:	b133      	cbz	r3, 800ffc6 <__kernel_rem_pio2+0x86e>
 800ffb8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ffba:	2200      	movs	r2, #0
 800ffbc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ffc0:	e9c4 2300 	strd	r2, r3, [r4]
 800ffc4:	e6d9      	b.n	800fd7a <__kernel_rem_pio2+0x622>
 800ffc6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ffc8:	2200      	movs	r2, #0
 800ffca:	2300      	movs	r3, #0
 800ffcc:	e9c4 2300 	strd	r2, r3, [r4]
 800ffd0:	e6d6      	b.n	800fd80 <__kernel_rem_pio2+0x628>
 800ffd2:	bf00      	nop
 800ffd4:	41700000 	.word	0x41700000
 800ffd8:	3e700000 	.word	0x3e700000
 800ffdc:	3ff00000 	.word	0x3ff00000

0800ffe0 <floor>:
 800ffe0:	ec51 0b10 	vmov	r0, r1, d0
 800ffe4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ffe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffec:	f2a3 35ff 	subw	r5, r3, #1023	@ 0x3ff
 800fff0:	2d13      	cmp	r5, #19
 800fff2:	460c      	mov	r4, r1
 800fff4:	4606      	mov	r6, r0
 800fff6:	dc22      	bgt.n	801003e <floor+0x5e>
 800fff8:	2d00      	cmp	r5, #0
 800fffa:	db41      	blt.n	8010080 <floor+0xa0>
 800fffc:	4b38      	ldr	r3, [pc, #224]	@ (80100e0 <floor+0x100>)
 800fffe:	fa43 f805 	asr.w	r8, r3, r5
 8010002:	ea01 0308 	and.w	r3, r1, r8
 8010006:	4303      	orrs	r3, r0
 8010008:	460f      	mov	r7, r1
 801000a:	d01d      	beq.n	8010048 <floor+0x68>
 801000c:	a332      	add	r3, pc, #200	@ (adr r3, 80100d8 <floor+0xf8>)
 801000e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010012:	f7f0 f91d 	bl	8000250 <__adddf3>
 8010016:	2200      	movs	r2, #0
 8010018:	2300      	movs	r3, #0
 801001a:	f7f0 fd5f 	bl	8000adc <__aeabi_dcmpgt>
 801001e:	b140      	cbz	r0, 8010032 <floor+0x52>
 8010020:	2c00      	cmp	r4, #0
 8010022:	da03      	bge.n	801002c <floor+0x4c>
 8010024:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010028:	412b      	asrs	r3, r5
 801002a:	441f      	add	r7, r3
 801002c:	ea27 0408 	bic.w	r4, r7, r8
 8010030:	2600      	movs	r6, #0
 8010032:	4623      	mov	r3, r4
 8010034:	4632      	mov	r2, r6
 8010036:	ec43 2b10 	vmov	d0, r2, r3
 801003a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801003e:	2d33      	cmp	r5, #51	@ 0x33
 8010040:	dd06      	ble.n	8010050 <floor+0x70>
 8010042:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8010046:	d02b      	beq.n	80100a0 <floor+0xc0>
 8010048:	ec41 0b10 	vmov	d0, r0, r1
 801004c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010050:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8010054:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010058:	40df      	lsrs	r7, r3
 801005a:	4238      	tst	r0, r7
 801005c:	d0f4      	beq.n	8010048 <floor+0x68>
 801005e:	a31e      	add	r3, pc, #120	@ (adr r3, 80100d8 <floor+0xf8>)
 8010060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010064:	f7f0 f8f4 	bl	8000250 <__adddf3>
 8010068:	2200      	movs	r2, #0
 801006a:	2300      	movs	r3, #0
 801006c:	f7f0 fd36 	bl	8000adc <__aeabi_dcmpgt>
 8010070:	2800      	cmp	r0, #0
 8010072:	d0de      	beq.n	8010032 <floor+0x52>
 8010074:	2c00      	cmp	r4, #0
 8010076:	4633      	mov	r3, r6
 8010078:	db20      	blt.n	80100bc <floor+0xdc>
 801007a:	ea23 0607 	bic.w	r6, r3, r7
 801007e:	e7d8      	b.n	8010032 <floor+0x52>
 8010080:	a315      	add	r3, pc, #84	@ (adr r3, 80100d8 <floor+0xf8>)
 8010082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010086:	f7f0 f8e3 	bl	8000250 <__adddf3>
 801008a:	2200      	movs	r2, #0
 801008c:	2300      	movs	r3, #0
 801008e:	f7f0 fd25 	bl	8000adc <__aeabi_dcmpgt>
 8010092:	2800      	cmp	r0, #0
 8010094:	d0cd      	beq.n	8010032 <floor+0x52>
 8010096:	2c00      	cmp	r4, #0
 8010098:	db09      	blt.n	80100ae <floor+0xce>
 801009a:	2600      	movs	r6, #0
 801009c:	4634      	mov	r4, r6
 801009e:	e7c8      	b.n	8010032 <floor+0x52>
 80100a0:	4602      	mov	r2, r0
 80100a2:	460b      	mov	r3, r1
 80100a4:	f7f0 f8d4 	bl	8000250 <__adddf3>
 80100a8:	ec41 0b10 	vmov	d0, r0, r1
 80100ac:	e7ce      	b.n	801004c <floor+0x6c>
 80100ae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80100b2:	4326      	orrs	r6, r4
 80100b4:	d10d      	bne.n	80100d2 <floor+0xf2>
 80100b6:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80100ba:	e7ba      	b.n	8010032 <floor+0x52>
 80100bc:	2d14      	cmp	r5, #20
 80100be:	d006      	beq.n	80100ce <floor+0xee>
 80100c0:	f1c5 0534 	rsb	r5, r5, #52	@ 0x34
 80100c4:	2201      	movs	r2, #1
 80100c6:	40aa      	lsls	r2, r5
 80100c8:	4413      	add	r3, r2
 80100ca:	429e      	cmp	r6, r3
 80100cc:	d9d5      	bls.n	801007a <floor+0x9a>
 80100ce:	3401      	adds	r4, #1
 80100d0:	e7d3      	b.n	801007a <floor+0x9a>
 80100d2:	4c04      	ldr	r4, [pc, #16]	@ (80100e4 <floor+0x104>)
 80100d4:	2600      	movs	r6, #0
 80100d6:	e7ac      	b.n	8010032 <floor+0x52>
 80100d8:	8800759c 	.word	0x8800759c
 80100dc:	7e37e43c 	.word	0x7e37e43c
 80100e0:	000fffff 	.word	0x000fffff
 80100e4:	bff00000 	.word	0xbff00000

080100e8 <__udivmoddi4>:
 80100e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100ec:	468c      	mov	ip, r1
 80100ee:	468e      	mov	lr, r1
 80100f0:	9e08      	ldr	r6, [sp, #32]
 80100f2:	4615      	mov	r5, r2
 80100f4:	4604      	mov	r4, r0
 80100f6:	4619      	mov	r1, r3
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	f040 80d0 	bne.w	801029e <__udivmoddi4+0x1b6>
 80100fe:	4572      	cmp	r2, lr
 8010100:	d947      	bls.n	8010192 <__udivmoddi4+0xaa>
 8010102:	fab2 f782 	clz	r7, r2
 8010106:	b14f      	cbz	r7, 801011c <__udivmoddi4+0x34>
 8010108:	f1c7 0320 	rsb	r3, r7, #32
 801010c:	fa0e fc07 	lsl.w	ip, lr, r7
 8010110:	fa20 f303 	lsr.w	r3, r0, r3
 8010114:	40bd      	lsls	r5, r7
 8010116:	ea43 0c0c 	orr.w	ip, r3, ip
 801011a:	40bc      	lsls	r4, r7
 801011c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8010120:	b2a8      	uxth	r0, r5
 8010122:	fbbc f8fe 	udiv	r8, ip, lr
 8010126:	0c23      	lsrs	r3, r4, #16
 8010128:	fb0e cc18 	mls	ip, lr, r8, ip
 801012c:	fb08 f900 	mul.w	r9, r8, r0
 8010130:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8010134:	4599      	cmp	r9, r3
 8010136:	d928      	bls.n	801018a <__udivmoddi4+0xa2>
 8010138:	18eb      	adds	r3, r5, r3
 801013a:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 801013e:	d204      	bcs.n	801014a <__udivmoddi4+0x62>
 8010140:	4599      	cmp	r9, r3
 8010142:	d902      	bls.n	801014a <__udivmoddi4+0x62>
 8010144:	f1a8 0202 	sub.w	r2, r8, #2
 8010148:	442b      	add	r3, r5
 801014a:	eba3 0309 	sub.w	r3, r3, r9
 801014e:	b2a4      	uxth	r4, r4
 8010150:	fbb3 fcfe 	udiv	ip, r3, lr
 8010154:	fb0e 331c 	mls	r3, lr, ip, r3
 8010158:	fb0c f000 	mul.w	r0, ip, r0
 801015c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010160:	42a0      	cmp	r0, r4
 8010162:	d914      	bls.n	801018e <__udivmoddi4+0xa6>
 8010164:	192c      	adds	r4, r5, r4
 8010166:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 801016a:	d204      	bcs.n	8010176 <__udivmoddi4+0x8e>
 801016c:	42a0      	cmp	r0, r4
 801016e:	d902      	bls.n	8010176 <__udivmoddi4+0x8e>
 8010170:	f1ac 0302 	sub.w	r3, ip, #2
 8010174:	442c      	add	r4, r5
 8010176:	1a24      	subs	r4, r4, r0
 8010178:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 801017c:	b11e      	cbz	r6, 8010186 <__udivmoddi4+0x9e>
 801017e:	40fc      	lsrs	r4, r7
 8010180:	2300      	movs	r3, #0
 8010182:	6034      	str	r4, [r6, #0]
 8010184:	6073      	str	r3, [r6, #4]
 8010186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801018a:	4642      	mov	r2, r8
 801018c:	e7dd      	b.n	801014a <__udivmoddi4+0x62>
 801018e:	4663      	mov	r3, ip
 8010190:	e7f1      	b.n	8010176 <__udivmoddi4+0x8e>
 8010192:	2a00      	cmp	r2, #0
 8010194:	d079      	beq.n	801028a <__udivmoddi4+0x1a2>
 8010196:	fab2 f382 	clz	r3, r2
 801019a:	2b00      	cmp	r3, #0
 801019c:	d03f      	beq.n	801021e <__udivmoddi4+0x136>
 801019e:	4619      	mov	r1, r3
 80101a0:	f1c1 0320 	rsb	r3, r1, #32
 80101a4:	fa02 f501 	lsl.w	r5, r2, r1
 80101a8:	fa2e f203 	lsr.w	r2, lr, r3
 80101ac:	fa0e fe01 	lsl.w	lr, lr, r1
 80101b0:	fa20 f303 	lsr.w	r3, r0, r3
 80101b4:	ea43 030e 	orr.w	r3, r3, lr
 80101b8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80101bc:	fa00 f401 	lsl.w	r4, r0, r1
 80101c0:	fbb2 fcfe 	udiv	ip, r2, lr
 80101c4:	b2af      	uxth	r7, r5
 80101c6:	fb0e 201c 	mls	r0, lr, ip, r2
 80101ca:	0c1a      	lsrs	r2, r3, #16
 80101cc:	fb0c f807 	mul.w	r8, ip, r7
 80101d0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80101d4:	4590      	cmp	r8, r2
 80101d6:	d95a      	bls.n	801028e <__udivmoddi4+0x1a6>
 80101d8:	18aa      	adds	r2, r5, r2
 80101da:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 80101de:	d204      	bcs.n	80101ea <__udivmoddi4+0x102>
 80101e0:	4590      	cmp	r8, r2
 80101e2:	d902      	bls.n	80101ea <__udivmoddi4+0x102>
 80101e4:	f1ac 0002 	sub.w	r0, ip, #2
 80101e8:	442a      	add	r2, r5
 80101ea:	eba2 0208 	sub.w	r2, r2, r8
 80101ee:	b29b      	uxth	r3, r3
 80101f0:	fbb2 fcfe 	udiv	ip, r2, lr
 80101f4:	fb0e 221c 	mls	r2, lr, ip, r2
 80101f8:	fb0c f707 	mul.w	r7, ip, r7
 80101fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010200:	429f      	cmp	r7, r3
 8010202:	d946      	bls.n	8010292 <__udivmoddi4+0x1aa>
 8010204:	18eb      	adds	r3, r5, r3
 8010206:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
 801020a:	d204      	bcs.n	8010216 <__udivmoddi4+0x12e>
 801020c:	429f      	cmp	r7, r3
 801020e:	d902      	bls.n	8010216 <__udivmoddi4+0x12e>
 8010210:	f1ac 0202 	sub.w	r2, ip, #2
 8010214:	442b      	add	r3, r5
 8010216:	1bdb      	subs	r3, r3, r7
 8010218:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 801021c:	e002      	b.n	8010224 <__udivmoddi4+0x13c>
 801021e:	ebae 0302 	sub.w	r3, lr, r2
 8010222:	2201      	movs	r2, #1
 8010224:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8010228:	b2af      	uxth	r7, r5
 801022a:	fbb3 fcfe 	udiv	ip, r3, lr
 801022e:	0c20      	lsrs	r0, r4, #16
 8010230:	fb0e 331c 	mls	r3, lr, ip, r3
 8010234:	fb0c f807 	mul.w	r8, ip, r7
 8010238:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 801023c:	4598      	cmp	r8, r3
 801023e:	d92a      	bls.n	8010296 <__udivmoddi4+0x1ae>
 8010240:	18eb      	adds	r3, r5, r3
 8010242:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8010246:	d204      	bcs.n	8010252 <__udivmoddi4+0x16a>
 8010248:	4598      	cmp	r8, r3
 801024a:	d902      	bls.n	8010252 <__udivmoddi4+0x16a>
 801024c:	f1ac 0002 	sub.w	r0, ip, #2
 8010250:	442b      	add	r3, r5
 8010252:	eba3 0308 	sub.w	r3, r3, r8
 8010256:	b2a4      	uxth	r4, r4
 8010258:	fbb3 fcfe 	udiv	ip, r3, lr
 801025c:	fb0e 331c 	mls	r3, lr, ip, r3
 8010260:	fb0c f707 	mul.w	r7, ip, r7
 8010264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010268:	42a7      	cmp	r7, r4
 801026a:	d916      	bls.n	801029a <__udivmoddi4+0x1b2>
 801026c:	192c      	adds	r4, r5, r4
 801026e:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8010272:	d204      	bcs.n	801027e <__udivmoddi4+0x196>
 8010274:	42a7      	cmp	r7, r4
 8010276:	d902      	bls.n	801027e <__udivmoddi4+0x196>
 8010278:	f1ac 0302 	sub.w	r3, ip, #2
 801027c:	442c      	add	r4, r5
 801027e:	1be4      	subs	r4, r4, r7
 8010280:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8010284:	460f      	mov	r7, r1
 8010286:	4611      	mov	r1, r2
 8010288:	e778      	b.n	801017c <__udivmoddi4+0x94>
 801028a:	211f      	movs	r1, #31
 801028c:	e788      	b.n	80101a0 <__udivmoddi4+0xb8>
 801028e:	4660      	mov	r0, ip
 8010290:	e7ab      	b.n	80101ea <__udivmoddi4+0x102>
 8010292:	4662      	mov	r2, ip
 8010294:	e7bf      	b.n	8010216 <__udivmoddi4+0x12e>
 8010296:	4660      	mov	r0, ip
 8010298:	e7db      	b.n	8010252 <__udivmoddi4+0x16a>
 801029a:	4663      	mov	r3, ip
 801029c:	e7ef      	b.n	801027e <__udivmoddi4+0x196>
 801029e:	4573      	cmp	r3, lr
 80102a0:	d906      	bls.n	80102b0 <__udivmoddi4+0x1c8>
 80102a2:	b916      	cbnz	r6, 80102aa <__udivmoddi4+0x1c2>
 80102a4:	2100      	movs	r1, #0
 80102a6:	4608      	mov	r0, r1
 80102a8:	e76d      	b.n	8010186 <__udivmoddi4+0x9e>
 80102aa:	e9c6 0e00 	strd	r0, lr, [r6]
 80102ae:	e7f9      	b.n	80102a4 <__udivmoddi4+0x1bc>
 80102b0:	fab3 f783 	clz	r7, r3
 80102b4:	b987      	cbnz	r7, 80102d8 <__udivmoddi4+0x1f0>
 80102b6:	4573      	cmp	r3, lr
 80102b8:	d301      	bcc.n	80102be <__udivmoddi4+0x1d6>
 80102ba:	4282      	cmp	r2, r0
 80102bc:	d807      	bhi.n	80102ce <__udivmoddi4+0x1e6>
 80102be:	1a84      	subs	r4, r0, r2
 80102c0:	eb6e 0303 	sbc.w	r3, lr, r3
 80102c4:	2001      	movs	r0, #1
 80102c6:	469c      	mov	ip, r3
 80102c8:	b91e      	cbnz	r6, 80102d2 <__udivmoddi4+0x1ea>
 80102ca:	2100      	movs	r1, #0
 80102cc:	e75b      	b.n	8010186 <__udivmoddi4+0x9e>
 80102ce:	4638      	mov	r0, r7
 80102d0:	e7fa      	b.n	80102c8 <__udivmoddi4+0x1e0>
 80102d2:	e9c6 4c00 	strd	r4, ip, [r6]
 80102d6:	e7f8      	b.n	80102ca <__udivmoddi4+0x1e2>
 80102d8:	f1c7 0c20 	rsb	ip, r7, #32
 80102dc:	40bb      	lsls	r3, r7
 80102de:	fa22 f50c 	lsr.w	r5, r2, ip
 80102e2:	431d      	orrs	r5, r3
 80102e4:	fa20 f10c 	lsr.w	r1, r0, ip
 80102e8:	fa2e f30c 	lsr.w	r3, lr, ip
 80102ec:	fa0e fe07 	lsl.w	lr, lr, r7
 80102f0:	ea41 010e 	orr.w	r1, r1, lr
 80102f4:	ea4f 4915 	mov.w	r9, r5, lsr #16
 80102f8:	fa00 f407 	lsl.w	r4, r0, r7
 80102fc:	fbb3 f8f9 	udiv	r8, r3, r9
 8010300:	fa1f fe85 	uxth.w	lr, r5
 8010304:	fb09 3018 	mls	r0, r9, r8, r3
 8010308:	0c0b      	lsrs	r3, r1, #16
 801030a:	fb08 fa0e 	mul.w	sl, r8, lr
 801030e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010312:	459a      	cmp	sl, r3
 8010314:	fa02 f207 	lsl.w	r2, r2, r7
 8010318:	d940      	bls.n	801039c <__udivmoddi4+0x2b4>
 801031a:	18eb      	adds	r3, r5, r3
 801031c:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 8010320:	d204      	bcs.n	801032c <__udivmoddi4+0x244>
 8010322:	459a      	cmp	sl, r3
 8010324:	d902      	bls.n	801032c <__udivmoddi4+0x244>
 8010326:	f1a8 0002 	sub.w	r0, r8, #2
 801032a:	442b      	add	r3, r5
 801032c:	eba3 030a 	sub.w	r3, r3, sl
 8010330:	b289      	uxth	r1, r1
 8010332:	fbb3 f8f9 	udiv	r8, r3, r9
 8010336:	fb09 3318 	mls	r3, r9, r8, r3
 801033a:	fb08 fe0e 	mul.w	lr, r8, lr
 801033e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010342:	458e      	cmp	lr, r1
 8010344:	d92c      	bls.n	80103a0 <__udivmoddi4+0x2b8>
 8010346:	1869      	adds	r1, r5, r1
 8010348:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801034c:	d204      	bcs.n	8010358 <__udivmoddi4+0x270>
 801034e:	458e      	cmp	lr, r1
 8010350:	d902      	bls.n	8010358 <__udivmoddi4+0x270>
 8010352:	f1a8 0302 	sub.w	r3, r8, #2
 8010356:	4429      	add	r1, r5
 8010358:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801035c:	fba0 9802 	umull	r9, r8, r0, r2
 8010360:	eba1 010e 	sub.w	r1, r1, lr
 8010364:	4541      	cmp	r1, r8
 8010366:	46ce      	mov	lr, r9
 8010368:	4643      	mov	r3, r8
 801036a:	d302      	bcc.n	8010372 <__udivmoddi4+0x28a>
 801036c:	d106      	bne.n	801037c <__udivmoddi4+0x294>
 801036e:	454c      	cmp	r4, r9
 8010370:	d204      	bcs.n	801037c <__udivmoddi4+0x294>
 8010372:	ebb9 0e02 	subs.w	lr, r9, r2
 8010376:	eb68 0305 	sbc.w	r3, r8, r5
 801037a:	3801      	subs	r0, #1
 801037c:	2e00      	cmp	r6, #0
 801037e:	d0a4      	beq.n	80102ca <__udivmoddi4+0x1e2>
 8010380:	ebb4 020e 	subs.w	r2, r4, lr
 8010384:	eb61 0103 	sbc.w	r1, r1, r3
 8010388:	fa01 fc0c 	lsl.w	ip, r1, ip
 801038c:	fa22 f307 	lsr.w	r3, r2, r7
 8010390:	ea4c 0303 	orr.w	r3, ip, r3
 8010394:	40f9      	lsrs	r1, r7
 8010396:	e9c6 3100 	strd	r3, r1, [r6]
 801039a:	e796      	b.n	80102ca <__udivmoddi4+0x1e2>
 801039c:	4640      	mov	r0, r8
 801039e:	e7c5      	b.n	801032c <__udivmoddi4+0x244>
 80103a0:	4643      	mov	r3, r8
 80103a2:	e7d9      	b.n	8010358 <__udivmoddi4+0x270>

080103a4 <_init>:
 80103a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103a6:	bf00      	nop
 80103a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103aa:	bc08      	pop	{r3}
 80103ac:	469e      	mov	lr, r3
 80103ae:	4770      	bx	lr

080103b0 <_fini>:
 80103b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103b2:	bf00      	nop
 80103b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103b6:	bc08      	pop	{r3}
 80103b8:	469e      	mov	lr, r3
 80103ba:	4770      	bx	lr
